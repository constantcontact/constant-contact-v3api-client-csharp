/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// EmailCampaignActivity
    /// </summary>
    [DataContract(Name = "EmailCampaignActivity")]
    public partial class EmailCampaignActivity : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignActivity" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailCampaignActivity() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignActivity" /> class.
        /// </summary>
        /// <param name="contactListIds">The contacts that Constant Contact sends the email campaign activity to as an array of contact &lt;code&gt;list_id&lt;/code&gt; values. You cannot use contact lists and segments at the same time in an email campaign activity..</param>
        /// <param name="segmentIds">The contacts that Constant Contact sends the email campaign activity to as an array containing a single &lt;code&gt;segment_id&lt;/code&gt; value. Only &lt;code&gt;format_type&lt;/code&gt; 3, 4, and 5 email campaign activities support segments. You cannot use contact lists and segments at the same time in an email campaign activity..</param>
        /// <param name="fromEmail">The email \&quot;From Email\&quot; field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status. (required).</param>
        /// <param name="fromName">The email \&quot;From Name\&quot; field for the email campaign activity. (required).</param>
        /// <param name="replyToEmail">The email \&quot;Reply To Email\&quot; field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status. (required).</param>
        /// <param name="subject">The email \&quot;Subject\&quot; field for the email campaign activity. (required).</param>
        /// <param name="htmlContent">The HTML or XHTML content for the email campaign activity. Only &lt;code&gt;format_type&lt;/code&gt; 1 and 5 (legacy custom code emails or modern custom code emails) can contain &lt;code&gt;html_content&lt;/code&gt;..</param>
        /// <param name="preheader">The email preheader for the email campaign activity. Only &lt;code&gt;format_type&lt;/code&gt; 3, 4, and 5 email campaign activities use the preheader property..</param>
        /// <param name="physicalAddressInFooter">physicalAddressInFooter.</param>
        /// <param name="documentProperties">documentProperties.</param>
        public EmailCampaignActivity(List<string> contactListIds = default(List<string>), List<int> segmentIds = default(List<int>), string fromEmail = default(string), string fromName = default(string), string replyToEmail = default(string), string subject = default(string), string htmlContent = default(string), string preheader = default(string), GetEmailCampaignActivity200ResponsePhysicalAddressInFooter physicalAddressInFooter = default(GetEmailCampaignActivity200ResponsePhysicalAddressInFooter), GetEmailCampaignActivity200ResponseDocumentProperties documentProperties = default(GetEmailCampaignActivity200ResponseDocumentProperties))
        {
            // to ensure "fromEmail" is required (not null)
            if (fromEmail == null)
            {
                throw new ArgumentNullException("fromEmail is a required property for EmailCampaignActivity and cannot be null");
            }
            this.FromEmail = fromEmail;
            // to ensure "fromName" is required (not null)
            if (fromName == null)
            {
                throw new ArgumentNullException("fromName is a required property for EmailCampaignActivity and cannot be null");
            }
            this.FromName = fromName;
            // to ensure "replyToEmail" is required (not null)
            if (replyToEmail == null)
            {
                throw new ArgumentNullException("replyToEmail is a required property for EmailCampaignActivity and cannot be null");
            }
            this.ReplyToEmail = replyToEmail;
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new ArgumentNullException("subject is a required property for EmailCampaignActivity and cannot be null");
            }
            this.Subject = subject;
            this.ContactListIds = contactListIds;
            this.SegmentIds = segmentIds;
            this.HtmlContent = htmlContent;
            this.Preheader = preheader;
            this.PhysicalAddressInFooter = physicalAddressInFooter;
            this.DocumentProperties = documentProperties;
        }

        /// <summary>
        /// Identifies a campaign activity in the V3 API.
        /// </summary>
        /// <value>Identifies a campaign activity in the V3 API.</value>
        /// <example>4c08372c-957a-48b5-bc45-72c7f00796cd</example>
        [DataMember(Name = "campaign_activity_id", EmitDefaultValue = false)]
        public string CampaignActivityId { get; private set; }

        /// <summary>
        /// Returns false as CampaignActivityId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignActivityId()
        {
            return false;
        }
        /// <summary>
        /// Identifies a campaign in the V3 API.
        /// </summary>
        /// <value>Identifies a campaign in the V3 API.</value>
        /// <example>8987dc1a-48ef-433a-b836-7ca4f9aa3481</example>
        [DataMember(Name = "campaign_id", EmitDefaultValue = false)]
        public string CampaignId { get; private set; }

        /// <summary>
        /// Returns false as CampaignId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCampaignId()
        {
            return false;
        }
        /// <summary>
        /// The purpose of the individual campaign activity in the larger email campaign effort. Valid values are: &lt;ul&gt;   &lt;li&gt;primary_email — The main email marketing campaign that you send to contacts. The &lt;code&gt;primary_email&lt;/code&gt; contains the complete email content.&lt;/li&gt;   &lt;li&gt;permalink — A permanent link to a web accessible version of the &lt;code&gt;primary_email&lt;/code&gt; content without any personalized email information. For example, permalinks do not contain any of the contact details that you add to the &lt;code&gt;primary_email&lt;/code&gt; email content. &lt;/li&gt;   &lt;li&gt;resend — An email campaign that you resend to contacts that did not open the email campaign.&lt;/li&gt; &lt;/ul&gt; Constant Contact creates a &lt;code&gt;primary_email&lt;/code&gt; and a &lt;code&gt;permalink&lt;/code&gt; role campaign activity when you create an email campaign. 
        /// </summary>
        /// <value>The purpose of the individual campaign activity in the larger email campaign effort. Valid values are: &lt;ul&gt;   &lt;li&gt;primary_email — The main email marketing campaign that you send to contacts. The &lt;code&gt;primary_email&lt;/code&gt; contains the complete email content.&lt;/li&gt;   &lt;li&gt;permalink — A permanent link to a web accessible version of the &lt;code&gt;primary_email&lt;/code&gt; content without any personalized email information. For example, permalinks do not contain any of the contact details that you add to the &lt;code&gt;primary_email&lt;/code&gt; email content. &lt;/li&gt;   &lt;li&gt;resend — An email campaign that you resend to contacts that did not open the email campaign.&lt;/li&gt; &lt;/ul&gt; Constant Contact creates a &lt;code&gt;primary_email&lt;/code&gt; and a &lt;code&gt;permalink&lt;/code&gt; role campaign activity when you create an email campaign. </value>
        /// <example>primary_email</example>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public string Role { get; private set; }

        /// <summary>
        /// Returns false as Role should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRole()
        {
            return false;
        }
        /// <summary>
        /// The contacts that Constant Contact sends the email campaign activity to as an array of contact &lt;code&gt;list_id&lt;/code&gt; values. You cannot use contact lists and segments at the same time in an email campaign activity.
        /// </summary>
        /// <value>The contacts that Constant Contact sends the email campaign activity to as an array of contact &lt;code&gt;list_id&lt;/code&gt; values. You cannot use contact lists and segments at the same time in an email campaign activity.</value>
        [DataMember(Name = "contact_list_ids", EmitDefaultValue = false)]
        public List<string> ContactListIds { get; set; }

        /// <summary>
        /// The contacts that Constant Contact sends the email campaign activity to as an array containing a single &lt;code&gt;segment_id&lt;/code&gt; value. Only &lt;code&gt;format_type&lt;/code&gt; 3, 4, and 5 email campaign activities support segments. You cannot use contact lists and segments at the same time in an email campaign activity.
        /// </summary>
        /// <value>The contacts that Constant Contact sends the email campaign activity to as an array containing a single &lt;code&gt;segment_id&lt;/code&gt; value. Only &lt;code&gt;format_type&lt;/code&gt; 3, 4, and 5 email campaign activities support segments. You cannot use contact lists and segments at the same time in an email campaign activity.</value>
        [DataMember(Name = "segment_ids", EmitDefaultValue = false)]
        public List<int> SegmentIds { get; set; }

        /// <summary>
        /// The current status of the email campaign activity. Valid values are: &lt;ul&gt;   &lt;li&gt;DRAFT — An email campaign activity that you have created but have not sent to contacts.&lt;/li&gt;   &lt;li&gt;SCHEDULED — An email campaign activity that you have scheduled for Constant Contact to send to contacts.&lt;/li&gt;   &lt;li&gt;EXECUTING — An email campaign activity Constant Contact is currently sending to contacts. Email campaign activities are only in this status briefly.&lt;/li&gt;   &lt;li&gt;DONE — An email campaign activity that you successfully sent to contacts.&lt;/li&gt;   &lt;li&gt;ERROR — An email campaign activity that encountered an error.&lt;/li&gt;   &lt;li&gt;REMOVED — An email campaign that a user deleted. Users can view and restore deleted emails through the UI.&lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <value>The current status of the email campaign activity. Valid values are: &lt;ul&gt;   &lt;li&gt;DRAFT — An email campaign activity that you have created but have not sent to contacts.&lt;/li&gt;   &lt;li&gt;SCHEDULED — An email campaign activity that you have scheduled for Constant Contact to send to contacts.&lt;/li&gt;   &lt;li&gt;EXECUTING — An email campaign activity Constant Contact is currently sending to contacts. Email campaign activities are only in this status briefly.&lt;/li&gt;   &lt;li&gt;DONE — An email campaign activity that you successfully sent to contacts.&lt;/li&gt;   &lt;li&gt;ERROR — An email campaign activity that encountered an error.&lt;/li&gt;   &lt;li&gt;REMOVED — An email campaign that a user deleted. Users can view and restore deleted emails through the UI.&lt;/li&gt; &lt;/ul&gt; </value>
        /// <example>DRAFT</example>
        [DataMember(Name = "current_status", EmitDefaultValue = false)]
        public string CurrentStatus { get; private set; }

        /// <summary>
        /// Returns false as CurrentStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCurrentStatus()
        {
            return false;
        }
        /// <summary>
        /// Identifies the type of email format. Valid values are: &lt;ul&gt;   &lt;li&gt;1 - A legacy custom code email created using the V2 API, the V3 API, or the legacy UI HTML editor.&lt;/li&gt;   &lt;li&gt;2 - An email created using the second generation email editor UI.&lt;/li&gt;   &lt;li&gt;3 - An email created using the third generation email editor UI. This email editor features an improved drag and drop UI and mobile responsiveness.&lt;/li&gt;   &lt;li&gt;4 - An email created using the fourth generation email editor UI.&lt;/li&gt;   &lt;li&gt;5 - A custom code email created using the V3 API or the new UI HTML editor.&lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <value>Identifies the type of email format. Valid values are: &lt;ul&gt;   &lt;li&gt;1 - A legacy custom code email created using the V2 API, the V3 API, or the legacy UI HTML editor.&lt;/li&gt;   &lt;li&gt;2 - An email created using the second generation email editor UI.&lt;/li&gt;   &lt;li&gt;3 - An email created using the third generation email editor UI. This email editor features an improved drag and drop UI and mobile responsiveness.&lt;/li&gt;   &lt;li&gt;4 - An email created using the fourth generation email editor UI.&lt;/li&gt;   &lt;li&gt;5 - A custom code email created using the V3 API or the new UI HTML editor.&lt;/li&gt; &lt;/ul&gt; </value>
        /// <example>5</example>
        [DataMember(Name = "format_type", EmitDefaultValue = false)]
        public int FormatType { get; private set; }

        /// <summary>
        /// Returns false as FormatType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFormatType()
        {
            return false;
        }
        /// <summary>
        /// The email \&quot;From Email\&quot; field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status.
        /// </summary>
        /// <value>The email \&quot;From Email\&quot; field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status.</value>
        /// <example>jdodge@constantcontact.com</example>
        [DataMember(Name = "from_email", IsRequired = true, EmitDefaultValue = true)]
        public string FromEmail { get; set; }

        /// <summary>
        /// The email \&quot;From Name\&quot; field for the email campaign activity.
        /// </summary>
        /// <value>The email \&quot;From Name\&quot; field for the email campaign activity.</value>
        /// <example>Jake Dodge</example>
        [DataMember(Name = "from_name", IsRequired = true, EmitDefaultValue = true)]
        public string FromName { get; set; }

        /// <summary>
        /// The email \&quot;Reply To Email\&quot; field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status.
        /// </summary>
        /// <value>The email \&quot;Reply To Email\&quot; field for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status.</value>
        /// <example>jdodge@constantcontact.com</example>
        [DataMember(Name = "reply_to_email", IsRequired = true, EmitDefaultValue = true)]
        public string ReplyToEmail { get; set; }

        /// <summary>
        /// The email \&quot;Subject\&quot; field for the email campaign activity.
        /// </summary>
        /// <value>The email \&quot;Subject\&quot; field for the email campaign activity.</value>
        /// <example>Holiday Special Newsletter</example>
        [DataMember(Name = "subject", IsRequired = true, EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// The HTML or XHTML content for the email campaign activity. Only &lt;code&gt;format_type&lt;/code&gt; 1 and 5 (legacy custom code emails or modern custom code emails) can contain &lt;code&gt;html_content&lt;/code&gt;.
        /// </summary>
        /// <value>The HTML or XHTML content for the email campaign activity. Only &lt;code&gt;format_type&lt;/code&gt; 1 and 5 (legacy custom code emails or modern custom code emails) can contain &lt;code&gt;html_content&lt;/code&gt;.</value>
        /// <example>&lt;html&gt;&lt;body&gt;[[trackingImage]] &lt;a href&#x3D;&quot;http://www.constantcontact.com&quot;&gt;Visit ConstantContact.com!&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;</example>
        [DataMember(Name = "html_content", EmitDefaultValue = false)]
        public string HtmlContent { get; set; }

        /// <summary>
        /// Identifies the email layout and design template that the email campaign activity is using as a base.
        /// </summary>
        /// <value>Identifies the email layout and design template that the email campaign activity is using as a base.</value>
        /// <example>1000755366001</example>
        [DataMember(Name = "template_id", EmitDefaultValue = false)]
        public string TemplateId { get; private set; }

        /// <summary>
        /// Returns false as TemplateId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTemplateId()
        {
            return false;
        }
        /// <summary>
        /// The permanent link to a web accessible version of the email campaign content without any personalized email information. The permalink URL becomes accessible after you send an email campaign to contacts.
        /// </summary>
        /// <value>The permanent link to a web accessible version of the email campaign content without any personalized email information. The permalink URL becomes accessible after you send an email campaign to contacts.</value>
        /// <example>https://conta.cc/2GaQ8AY</example>
        [DataMember(Name = "permalink_url", EmitDefaultValue = false)]
        public string PermalinkUrl { get; private set; }

        /// <summary>
        /// Returns false as PermalinkUrl should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePermalinkUrl()
        {
            return false;
        }
        /// <summary>
        /// The email preheader for the email campaign activity. Only &lt;code&gt;format_type&lt;/code&gt; 3, 4, and 5 email campaign activities use the preheader property.
        /// </summary>
        /// <value>The email preheader for the email campaign activity. Only &lt;code&gt;format_type&lt;/code&gt; 3, 4, and 5 email campaign activities use the preheader property.</value>
        /// <example>You don&#39;t want to miss this.</example>
        [DataMember(Name = "preheader", EmitDefaultValue = false)]
        public string Preheader { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalAddressInFooter
        /// </summary>
        [DataMember(Name = "physical_address_in_footer", EmitDefaultValue = false)]
        public GetEmailCampaignActivity200ResponsePhysicalAddressInFooter PhysicalAddressInFooter { get; set; }

        /// <summary>
        /// Gets or Sets DocumentProperties
        /// </summary>
        [DataMember(Name = "document_properties", EmitDefaultValue = false)]
        public GetEmailCampaignActivity200ResponseDocumentProperties DocumentProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailCampaignActivity {\n");
            sb.Append("  CampaignActivityId: ").Append(CampaignActivityId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  ContactListIds: ").Append(ContactListIds).Append("\n");
            sb.Append("  SegmentIds: ").Append(SegmentIds).Append("\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  FormatType: ").Append(FormatType).Append("\n");
            sb.Append("  FromEmail: ").Append(FromEmail).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("  ReplyToEmail: ").Append(ReplyToEmail).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("  PermalinkUrl: ").Append(PermalinkUrl).Append("\n");
            sb.Append("  Preheader: ").Append(Preheader).Append("\n");
            sb.Append("  PhysicalAddressInFooter: ").Append(PhysicalAddressInFooter).Append("\n");
            sb.Append("  DocumentProperties: ").Append(DocumentProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
