/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// A note about the contact.
    /// </summary>
    [DataContract(Name = "getContactById_200_response_notes_inner")]
    public partial class GetContactById200ResponseNotesInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContactById200ResponseNotesInner" /> class.
        /// </summary>
        /// <param name="noteId">The ID that uniquely identifies the note (UUID format)..</param>
        /// <param name="createdAt">The date that the note was created..</param>
        /// <param name="content">The content for the note..</param>
        public GetContactById200ResponseNotesInner(Guid noteId = default(Guid), DateTime createdAt = default(DateTime), string content = default(string))
        {
            this.NoteId = noteId;
            this.CreatedAt = createdAt;
            this.Content = content;
        }

        /// <summary>
        /// The ID that uniquely identifies the note (UUID format).
        /// </summary>
        /// <value>The ID that uniquely identifies the note (UUID format).</value>
        /// <example>3fa85f64-5717-4562-b3fc-2c963f66afa6</example>
        [DataMember(Name = "note_id", EmitDefaultValue = false)]
        public Guid NoteId { get; set; }

        /// <summary>
        /// The date that the note was created.
        /// </summary>
        /// <value>The date that the note was created.</value>
        /// <example>2021-05-12T13:48:44.108Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// The content for the note.
        /// </summary>
        /// <value>The content for the note.</value>
        /// <example>This contact resubscribed on 2021-05-12.</example>
        [DataMember(Name = "content", EmitDefaultValue = false)]
        public string Content { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetContactById200ResponseNotesInner {\n");
            sb.Append("  NoteId: ").Append(NoteId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Content (string) maxLength
            if (this.Content != null && this.Content.Length > 2000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Content, length must be less than 2000.", new [] { "Content" });
            }

            yield break;
        }
    }

}
