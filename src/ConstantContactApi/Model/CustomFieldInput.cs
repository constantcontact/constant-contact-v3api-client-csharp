/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// CustomFieldInput
    /// </summary>
    [DataContract(Name = "CustomFieldInput")]
    public partial class CustomFieldInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFieldInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldInput" /> class.
        /// </summary>
        /// <param name="label">The display name for the custom_field shown in the UI as free-form text (required).</param>
        /// <param name="type">Specifies the type of value the custom_field field accepts: string or date. (required).</param>
        public CustomFieldInput(string label = default(string), string type = default(string))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for CustomFieldInput and cannot be null");
            }
            this.Label = label;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for CustomFieldInput and cannot be null");
            }
            this.Type = type;
        }

        /// <summary>
        /// The display name for the custom_field shown in the UI as free-form text
        /// </summary>
        /// <value>The display name for the custom_field shown in the UI as free-form text</value>
        /// <example>Vehicle make and model year</example>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// Specifies the type of value the custom_field field accepts: string or date.
        /// </summary>
        /// <value>Specifies the type of value the custom_field field accepts: string or date.</value>
        /// <example>string</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFieldInput {\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Label (string) maxLength
            if (this.Label != null && this.Label.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be less than 50.", new [] { "Label" });
            }

            yield break;
        }
    }

}
