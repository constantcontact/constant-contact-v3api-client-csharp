/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// ListInput
    /// </summary>
    [DataContract(Name = "ListInput")]
    public partial class ListInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListInput" /> class.
        /// </summary>
        /// <param name="name">The name given to the contact list (required).</param>
        /// <param name="favorite">Identifies whether or not the account has favorited the contact list. (default to false).</param>
        /// <param name="description">Text describing the list..</param>
        public ListInput(string name = default(string), bool favorite = false, string description = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ListInput and cannot be null");
            }
            this.Name = name;
            this.Favorite = favorite;
            this.Description = description;
        }

        /// <summary>
        /// The name given to the contact list
        /// </summary>
        /// <value>The name given to the contact list</value>
        /// <example>Multiple purchases</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Identifies whether or not the account has favorited the contact list.
        /// </summary>
        /// <value>Identifies whether or not the account has favorited the contact list.</value>
        /// <example>true</example>
        [DataMember(Name = "favorite", EmitDefaultValue = true)]
        public bool Favorite { get; set; }

        /// <summary>
        /// Text describing the list.
        /// </summary>
        /// <value>Text describing the list.</value>
        /// <example>List of repeat customers</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ListInput {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Favorite: ").Append(Favorite).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            yield break;
        }
    }

}
