/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Customer
    /// </summary>
    [DataContract(Name = "Customer")]
    public partial class Customer : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Customer" /> class.
        /// </summary>
        /// <param name="contactEmail">Email addresses that are associated with the Constant Contact account owner..</param>
        /// <param name="contactPhone">The account owner&#39;s contact phone number (up to 25 characters in length)..</param>
        /// <param name="countryCode">The uppercase two-letter &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-1&#39; target&#x3D;&#39;_blank&#39;&gt;ISO 3166-1 code&lt;/a&gt; representing the organization&#39;s country..</param>
        /// <param name="firstName">The account owner&#39;s first name..</param>
        /// <param name="lastName">The account owner&#39;s last name..</param>
        /// <param name="organizationName">The name of the organization that is associated with this account..</param>
        /// <param name="organizationPhone">The phone number of the organization that is associated with this account..</param>
        /// <param name="stateCode">The uppercase two letter &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-1&#39; target&#x3D;&#39;_blank&#39;&gt;ISO 3166-1 code&lt;/a&gt; for the organization&#39;s state. This property is required if the &lt;code&gt;country_code&lt;/code&gt; is US (United States)..</param>
        /// <param name="timeZoneId">The time zone that is automatically set based on the &lt;code&gt;state_code&lt;/code&gt; setting; as defined in the IANA time-zone database (see http://www.iana.org/time-zones)..</param>
        /// <param name="website">The organization&#39;s website URL..</param>
        /// <param name="physicalAddress">physicalAddress.</param>
        /// <param name="companyLogo">companyLogo.</param>
        public Customer(string contactEmail = default(string), string contactPhone = default(string), string countryCode = default(string), string firstName = default(string), string lastName = default(string), string organizationName = default(string), string organizationPhone = default(string), string stateCode = default(string), string timeZoneId = default(string), string website = default(string), GetAccountDetails200ResponsePhysicalAddress physicalAddress = default(GetAccountDetails200ResponsePhysicalAddress), GetAccountDetails200ResponseCompanyLogo companyLogo = default(GetAccountDetails200ResponseCompanyLogo))
        {
            this.ContactEmail = contactEmail;
            this.ContactPhone = contactPhone;
            this.CountryCode = countryCode;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.OrganizationName = organizationName;
            this.OrganizationPhone = organizationPhone;
            this.StateCode = stateCode;
            this.TimeZoneId = timeZoneId;
            this.Website = website;
            this.PhysicalAddress = physicalAddress;
            this.CompanyLogo = companyLogo;
        }

        /// <summary>
        /// Email addresses that are associated with the Constant Contact account owner.
        /// </summary>
        /// <value>Email addresses that are associated with the Constant Contact account owner.</value>
        /// <example>InstaPrinz@gmail.com</example>
        [DataMember(Name = "contact_email", EmitDefaultValue = false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// The account owner&#39;s contact phone number (up to 25 characters in length).
        /// </summary>
        /// <value>The account owner&#39;s contact phone number (up to 25 characters in length).</value>
        /// <example>5081111212</example>
        [DataMember(Name = "contact_phone", EmitDefaultValue = false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// The uppercase two-letter &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-1&#39; target&#x3D;&#39;_blank&#39;&gt;ISO 3166-1 code&lt;/a&gt; representing the organization&#39;s country.
        /// </summary>
        /// <value>The uppercase two-letter &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-1&#39; target&#x3D;&#39;_blank&#39;&gt;ISO 3166-1 code&lt;/a&gt; representing the organization&#39;s country.</value>
        /// <example>US</example>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The readOnly encoded account ID that uniquely identifies the account.
        /// </summary>
        /// <value>The readOnly encoded account ID that uniquely identifies the account.</value>
        /// <example>p07e1l8cdif9dl</example>
        [DataMember(Name = "encoded_account_id", EmitDefaultValue = false)]
        public string EncodedAccountId { get; private set; }

        /// <summary>
        /// Returns false as EncodedAccountId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEncodedAccountId()
        {
            return false;
        }
        /// <summary>
        /// The account owner&#39;s first name.
        /// </summary>
        /// <value>The account owner&#39;s first name.</value>
        /// <example>Lola</example>
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The account owner&#39;s last name.
        /// </summary>
        /// <value>The account owner&#39;s last name.</value>
        /// <example>Zang</example>
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The name of the organization that is associated with this account.
        /// </summary>
        /// <value>The name of the organization that is associated with this account.</value>
        /// <example>InstaPrinz</example>
        [DataMember(Name = "organization_name", EmitDefaultValue = false)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// The phone number of the organization that is associated with this account.
        /// </summary>
        /// <value>The phone number of the organization that is associated with this account.</value>
        /// <example>333-333-3335</example>
        [DataMember(Name = "organization_phone", EmitDefaultValue = false)]
        public string OrganizationPhone { get; set; }

        /// <summary>
        /// The uppercase two letter &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-1&#39; target&#x3D;&#39;_blank&#39;&gt;ISO 3166-1 code&lt;/a&gt; for the organization&#39;s state. This property is required if the &lt;code&gt;country_code&lt;/code&gt; is US (United States).
        /// </summary>
        /// <value>The uppercase two letter &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-1&#39; target&#x3D;&#39;_blank&#39;&gt;ISO 3166-1 code&lt;/a&gt; for the organization&#39;s state. This property is required if the &lt;code&gt;country_code&lt;/code&gt; is US (United States).</value>
        /// <example>MA</example>
        [DataMember(Name = "state_code", EmitDefaultValue = false)]
        public string StateCode { get; set; }

        /// <summary>
        /// The time zone that is automatically set based on the &lt;code&gt;state_code&lt;/code&gt; setting; as defined in the IANA time-zone database (see http://www.iana.org/time-zones).
        /// </summary>
        /// <value>The time zone that is automatically set based on the &lt;code&gt;state_code&lt;/code&gt; setting; as defined in the IANA time-zone database (see http://www.iana.org/time-zones).</value>
        /// <example>US/Eastern</example>
        [DataMember(Name = "time_zone_id", EmitDefaultValue = false)]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// The organization&#39;s website URL.
        /// </summary>
        /// <value>The organization&#39;s website URL.</value>
        /// <example>http://InstaPriz4me.com</example>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalAddress
        /// </summary>
        [DataMember(Name = "physical_address", EmitDefaultValue = false)]
        public GetAccountDetails200ResponsePhysicalAddress PhysicalAddress { get; set; }

        /// <summary>
        /// Gets or Sets CompanyLogo
        /// </summary>
        [DataMember(Name = "company_logo", EmitDefaultValue = false)]
        public GetAccountDetails200ResponseCompanyLogo CompanyLogo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Customer {\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  EncodedAccountId: ").Append(EncodedAccountId).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  OrganizationPhone: ").Append(OrganizationPhone).Append("\n");
            sb.Append("  StateCode: ").Append(StateCode).Append("\n");
            sb.Append("  TimeZoneId: ").Append(TimeZoneId).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  PhysicalAddress: ").Append(PhysicalAddress).Append("\n");
            sb.Append("  CompanyLogo: ").Append(CompanyLogo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactPhone (string) maxLength
            if (this.ContactPhone != null && this.ContactPhone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactPhone, length must be less than 25.", new [] { "ContactPhone" });
            }

            yield break;
        }
    }

}
