/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Select the source used to identify contacts to which a tag is added or removed. Source types are mutually exclusive.
    /// </summary>
    [DataContract(Name = "createTagRemoveActivity_request_source")]
    public partial class CreateTagRemoveActivityRequestSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTagRemoveActivityRequestSource" /> class.
        /// </summary>
        /// <param name="contactIds">An array of contacts IDs..</param>
        /// <param name="listIds">An array of list IDs ( &lt;code&gt;list_id&lt;/code&gt; )..</param>
        /// <param name="tagIds">An array of tags ( &lt;code&gt;tag_id&lt;/code&gt; )..</param>
        /// <param name="allActiveContacts">Use to identify contacts with an active (billable) status..</param>
        /// <param name="newSubscriber">Use to identify newly subscribed contacts..</param>
        public CreateTagRemoveActivityRequestSource(List<Guid> contactIds = default(List<Guid>), List<Guid> listIds = default(List<Guid>), List<Guid> tagIds = default(List<Guid>), bool allActiveContacts = default(bool), bool newSubscriber = default(bool))
        {
            this.ContactIds = contactIds;
            this.ListIds = listIds;
            this.TagIds = tagIds;
            this.AllActiveContacts = allActiveContacts;
            this.NewSubscriber = newSubscriber;
        }

        /// <summary>
        /// An array of contacts IDs.
        /// </summary>
        /// <value>An array of contacts IDs.</value>
        [DataMember(Name = "contact_ids", EmitDefaultValue = false)]
        public List<Guid> ContactIds { get; set; }

        /// <summary>
        /// An array of list IDs ( &lt;code&gt;list_id&lt;/code&gt; ).
        /// </summary>
        /// <value>An array of list IDs ( &lt;code&gt;list_id&lt;/code&gt; ).</value>
        [DataMember(Name = "list_ids", EmitDefaultValue = false)]
        public List<Guid> ListIds { get; set; }

        /// <summary>
        /// An array of tags ( &lt;code&gt;tag_id&lt;/code&gt; ).
        /// </summary>
        /// <value>An array of tags ( &lt;code&gt;tag_id&lt;/code&gt; ).</value>
        [DataMember(Name = "tag_ids", EmitDefaultValue = false)]
        public List<Guid> TagIds { get; set; }

        /// <summary>
        /// Use to identify contacts with an active (billable) status.
        /// </summary>
        /// <value>Use to identify contacts with an active (billable) status.</value>
        /// <example>false</example>
        [DataMember(Name = "all_active_contacts", EmitDefaultValue = true)]
        public bool AllActiveContacts { get; set; }

        /// <summary>
        /// Use to identify newly subscribed contacts.
        /// </summary>
        /// <value>Use to identify newly subscribed contacts.</value>
        /// <example>true</example>
        [DataMember(Name = "new_subscriber", EmitDefaultValue = true)]
        public bool NewSubscriber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTagRemoveActivityRequestSource {\n");
            sb.Append("  ContactIds: ").Append(ContactIds).Append("\n");
            sb.Append("  ListIds: ").Append(ListIds).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  AllActiveContacts: ").Append(AllActiveContacts).Append("\n");
            sb.Append("  NewSubscriber: ").Append(NewSubscriber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
