/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// An object that contains optional properties for legacy format type emails (&lt;code&gt;format_type&lt;/code&gt; 1 and 2). If you attempt to add a property that does apply to the email &lt;code&gt;format_type&lt;/code&gt;, the API will ignore the property.
    /// </summary>
    [DataContract(Name = "getEmailCampaignActivity_200_response_document_properties")]
    public partial class GetEmailCampaignActivity200ResponseDocumentProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEmailCampaignActivity200ResponseDocumentProperties" /> class.
        /// </summary>
        /// <param name="styleContent">Contains style sheet elements for XHTML letter format emails. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1..</param>
        /// <param name="greetingSalutation">The greeting used in the email message. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1..</param>
        /// <param name="greetingNameType">The type of name the campaign uses to greet the contact. Valid values are &lt;code&gt;F&lt;/code&gt; (First Name), &lt;code&gt;L&lt;/code&gt; (Last Name), &lt;code&gt;B&lt;/code&gt; (First and Last Name), or &lt;code&gt;N&lt;/code&gt; (No greeting). By default, the value is &lt;code&gt;N&lt;/code&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1. (default to &quot;N&quot;).</param>
        /// <param name="greetingSecondary">A fallback text string the campaign uses to greet the contact when the &lt;code&gt;greeting_name_type&lt;/code&gt; is not available or set to &lt;code&gt;N&lt;/code&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1..</param>
        /// <param name="subscribeLinkEnabled">If &lt;code&gt;true&lt;/code&gt;, the email footer includes a link for subscribing to the list. If &lt;code&gt;false&lt;/code&gt;, the message footer does not include a link for subscribing to the list. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.  (default to &quot;false&quot;).</param>
        /// <param name="subscribeLinkName">The text displayed as the name for the subscribe link in the email footer. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1..</param>
        /// <param name="textContent">Contains the text content that Constant Contact displays to contacts when their email client cannot display HTML email. If you do not specify text content, Constant Contact displays \&quot;Greetings!\&quot; as the text content. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1. .</param>
        /// <param name="permissionReminderEnabled">If &lt;code&gt;true&lt;/code&gt;, Constant Contact displays your &lt;code&gt;permission_reminder&lt;/code&gt; message to contacts at top of the email. If &lt;code&gt;false&lt;/code&gt;, Constant Contact does not display the message. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.  (default to &quot;false&quot;).</param>
        /// <param name="permissionReminder">The message text Constant Contact displays at the top of the email message to remind users that they are subscribed to an email list. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2..</param>
        /// <param name="viewAsWebpageEnabled">If &lt;code&gt;true&lt;/code&gt;, Constant Contact displays the view as web page email message. If &lt;code&gt;false&lt;/code&gt; Constant Contact does not display the message. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.  (default to &quot;false&quot;).</param>
        /// <param name="viewAsWebpageText">The text Constant Contact displays before the view as web page link at the top of the email. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2..</param>
        /// <param name="viewAsWebpageLinkName">The name of the link that users can click to view the email as a web page. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2..</param>
        /// <param name="forwardEmailLinkEnabled">If &lt;code&gt;true&lt;/code&gt;, when the user forwards an email message the footer includes a link for subscribing to the list. If &lt;code&gt;false&lt;/code&gt;, when a user forwards an email message the footer does not include a link for subscribing to the list. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.  (default to &quot;false&quot;).</param>
        /// <param name="forwardEmailLinkName">The text displayed as the name for the forward email link in the footer when a user forwards an email. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2..</param>
        public GetEmailCampaignActivity200ResponseDocumentProperties(string styleContent = default(string), string greetingSalutation = default(string), string greetingNameType = @"N", string greetingSecondary = default(string), string subscribeLinkEnabled = @"false", string subscribeLinkName = default(string), string textContent = default(string), string permissionReminderEnabled = @"false", string permissionReminder = default(string), string viewAsWebpageEnabled = @"false", string viewAsWebpageText = default(string), string viewAsWebpageLinkName = default(string), string forwardEmailLinkEnabled = @"false", string forwardEmailLinkName = default(string))
        {
            this.StyleContent = styleContent;
            this.GreetingSalutation = greetingSalutation;
            // use default value if no "greetingNameType" provided
            this.GreetingNameType = greetingNameType ?? @"N";
            this.GreetingSecondary = greetingSecondary;
            // use default value if no "subscribeLinkEnabled" provided
            this.SubscribeLinkEnabled = subscribeLinkEnabled ?? @"false";
            this.SubscribeLinkName = subscribeLinkName;
            this.TextContent = textContent;
            // use default value if no "permissionReminderEnabled" provided
            this.PermissionReminderEnabled = permissionReminderEnabled ?? @"false";
            this.PermissionReminder = permissionReminder;
            // use default value if no "viewAsWebpageEnabled" provided
            this.ViewAsWebpageEnabled = viewAsWebpageEnabled ?? @"false";
            this.ViewAsWebpageText = viewAsWebpageText;
            this.ViewAsWebpageLinkName = viewAsWebpageLinkName;
            // use default value if no "forwardEmailLinkEnabled" provided
            this.ForwardEmailLinkEnabled = forwardEmailLinkEnabled ?? @"false";
            this.ForwardEmailLinkName = forwardEmailLinkName;
        }

        /// <summary>
        /// Contains style sheet elements for XHTML letter format emails. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.
        /// </summary>
        /// <value>Contains style sheet elements for XHTML letter format emails. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.</value>
        /// <example>.white{color: #ffffff;}</example>
        [DataMember(Name = "style_content", EmitDefaultValue = false)]
        public string StyleContent { get; set; }

        /// <summary>
        /// Email message format. Valid values are &lt;code&gt;HTML&lt;/code&gt; and &lt;code&gt;XHTML&lt;/code&gt;. By default, the value is &lt;code&gt;HTML&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;http://www.constantcontact.com/display_media.jsp?id&#x3D;87\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Advanced Editor User&#39;s Guide&lt;/a&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1. You cannot change this property after you create an email. 
        /// </summary>
        /// <value>Email message format. Valid values are &lt;code&gt;HTML&lt;/code&gt; and &lt;code&gt;XHTML&lt;/code&gt;. By default, the value is &lt;code&gt;HTML&lt;/code&gt;. For more information, see the &lt;a href&#x3D;\&quot;http://www.constantcontact.com/display_media.jsp?id&#x3D;87\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Advanced Editor User&#39;s Guide&lt;/a&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1. You cannot change this property after you create an email. </value>
        /// <example>XHTML</example>
        [DataMember(Name = "letter_format", EmitDefaultValue = false)]
        public string LetterFormat { get; private set; }

        /// <summary>
        /// Returns false as LetterFormat should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLetterFormat()
        {
            return false;
        }
        /// <summary>
        /// The greeting used in the email message. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.
        /// </summary>
        /// <value>The greeting used in the email message. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.</value>
        /// <example>Dear</example>
        [DataMember(Name = "greeting_salutation", EmitDefaultValue = false)]
        public string GreetingSalutation { get; set; }

        /// <summary>
        /// The type of name the campaign uses to greet the contact. Valid values are &lt;code&gt;F&lt;/code&gt; (First Name), &lt;code&gt;L&lt;/code&gt; (Last Name), &lt;code&gt;B&lt;/code&gt; (First and Last Name), or &lt;code&gt;N&lt;/code&gt; (No greeting). By default, the value is &lt;code&gt;N&lt;/code&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.
        /// </summary>
        /// <value>The type of name the campaign uses to greet the contact. Valid values are &lt;code&gt;F&lt;/code&gt; (First Name), &lt;code&gt;L&lt;/code&gt; (Last Name), &lt;code&gt;B&lt;/code&gt; (First and Last Name), or &lt;code&gt;N&lt;/code&gt; (No greeting). By default, the value is &lt;code&gt;N&lt;/code&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.</value>
        /// <example>F</example>
        [DataMember(Name = "greeting_name_type", EmitDefaultValue = false)]
        public string GreetingNameType { get; set; }

        /// <summary>
        /// A fallback text string the campaign uses to greet the contact when the &lt;code&gt;greeting_name_type&lt;/code&gt; is not available or set to &lt;code&gt;N&lt;/code&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.
        /// </summary>
        /// <value>A fallback text string the campaign uses to greet the contact when the &lt;code&gt;greeting_name_type&lt;/code&gt; is not available or set to &lt;code&gt;N&lt;/code&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.</value>
        /// <example>Greetings!</example>
        [DataMember(Name = "greeting_secondary", EmitDefaultValue = false)]
        public string GreetingSecondary { get; set; }

        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, the email footer includes a link for subscribing to the list. If &lt;code&gt;false&lt;/code&gt;, the message footer does not include a link for subscribing to the list. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1. 
        /// </summary>
        /// <value>If &lt;code&gt;true&lt;/code&gt;, the email footer includes a link for subscribing to the list. If &lt;code&gt;false&lt;/code&gt;, the message footer does not include a link for subscribing to the list. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1. </value>
        /// <example>false</example>
        [DataMember(Name = "subscribe_link_enabled", EmitDefaultValue = false)]
        public string SubscribeLinkEnabled { get; set; }

        /// <summary>
        /// The text displayed as the name for the subscribe link in the email footer. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.
        /// </summary>
        /// <value>The text displayed as the name for the subscribe link in the email footer. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1.</value>
        /// <example>Subscribe to my email list!</example>
        [DataMember(Name = "subscribe_link_name", EmitDefaultValue = false)]
        public string SubscribeLinkName { get; set; }

        /// <summary>
        /// Contains the text content that Constant Contact displays to contacts when their email client cannot display HTML email. If you do not specify text content, Constant Contact displays \&quot;Greetings!\&quot; as the text content. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1. 
        /// </summary>
        /// <value>Contains the text content that Constant Contact displays to contacts when their email client cannot display HTML email. If you do not specify text content, Constant Contact displays \&quot;Greetings!\&quot; as the text content. This property applies only to &lt;code&gt;format_type&lt;/code&gt; 1. </value>
        /// <example>&lt;Text&gt;&lt;Greeting/&gt;&lt;/Text&gt;</example>
        [DataMember(Name = "text_content", EmitDefaultValue = false)]
        public string TextContent { get; set; }

        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, Constant Contact displays your &lt;code&gt;permission_reminder&lt;/code&gt; message to contacts at top of the email. If &lt;code&gt;false&lt;/code&gt;, Constant Contact does not display the message. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2. 
        /// </summary>
        /// <value>If &lt;code&gt;true&lt;/code&gt;, Constant Contact displays your &lt;code&gt;permission_reminder&lt;/code&gt; message to contacts at top of the email. If &lt;code&gt;false&lt;/code&gt;, Constant Contact does not display the message. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2. </value>
        /// <example>false</example>
        [DataMember(Name = "permission_reminder_enabled", EmitDefaultValue = false)]
        public string PermissionReminderEnabled { get; set; }

        /// <summary>
        /// The message text Constant Contact displays at the top of the email message to remind users that they are subscribed to an email list. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.
        /// </summary>
        /// <value>The message text Constant Contact displays at the top of the email message to remind users that they are subscribed to an email list. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.</value>
        /// <example>Hi, just a reminder that you&#39;re receiving this email because you have expressed an interest in our company.</example>
        [DataMember(Name = "permission_reminder", EmitDefaultValue = false)]
        public string PermissionReminder { get; set; }

        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, Constant Contact displays the view as web page email message. If &lt;code&gt;false&lt;/code&gt; Constant Contact does not display the message. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2. 
        /// </summary>
        /// <value>If &lt;code&gt;true&lt;/code&gt;, Constant Contact displays the view as web page email message. If &lt;code&gt;false&lt;/code&gt; Constant Contact does not display the message. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2. </value>
        /// <example>false</example>
        [DataMember(Name = "view_as_webpage_enabled", EmitDefaultValue = false)]
        public string ViewAsWebpageEnabled { get; set; }

        /// <summary>
        /// The text Constant Contact displays before the view as web page link at the top of the email. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.
        /// </summary>
        /// <value>The text Constant Contact displays before the view as web page link at the top of the email. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.</value>
        /// <example>Having trouble viewing this email?</example>
        [DataMember(Name = "view_as_webpage_text", EmitDefaultValue = false)]
        public string ViewAsWebpageText { get; set; }

        /// <summary>
        /// The name of the link that users can click to view the email as a web page. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.
        /// </summary>
        /// <value>The name of the link that users can click to view the email as a web page. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.</value>
        /// <example>Click here to view this email as a web page</example>
        [DataMember(Name = "view_as_webpage_link_name", EmitDefaultValue = false)]
        public string ViewAsWebpageLinkName { get; set; }

        /// <summary>
        /// If &lt;code&gt;true&lt;/code&gt;, when the user forwards an email message the footer includes a link for subscribing to the list. If &lt;code&gt;false&lt;/code&gt;, when a user forwards an email message the footer does not include a link for subscribing to the list. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2. 
        /// </summary>
        /// <value>If &lt;code&gt;true&lt;/code&gt;, when the user forwards an email message the footer includes a link for subscribing to the list. If &lt;code&gt;false&lt;/code&gt;, when a user forwards an email message the footer does not include a link for subscribing to the list. By default, the value is &lt;code&gt;false&lt;/code&gt;. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2. </value>
        [DataMember(Name = "forward_email_link_enabled", EmitDefaultValue = false)]
        public string ForwardEmailLinkEnabled { get; set; }

        /// <summary>
        /// The text displayed as the name for the forward email link in the footer when a user forwards an email. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.
        /// </summary>
        /// <value>The text displayed as the name for the forward email link in the footer when a user forwards an email. This property applies to &lt;code&gt;format_type&lt;/code&gt; 1 and 2.</value>
        /// <example>Forward email</example>
        [DataMember(Name = "forward_email_link_name", EmitDefaultValue = false)]
        public string ForwardEmailLinkName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEmailCampaignActivity200ResponseDocumentProperties {\n");
            sb.Append("  StyleContent: ").Append(StyleContent).Append("\n");
            sb.Append("  LetterFormat: ").Append(LetterFormat).Append("\n");
            sb.Append("  GreetingSalutation: ").Append(GreetingSalutation).Append("\n");
            sb.Append("  GreetingNameType: ").Append(GreetingNameType).Append("\n");
            sb.Append("  GreetingSecondary: ").Append(GreetingSecondary).Append("\n");
            sb.Append("  SubscribeLinkEnabled: ").Append(SubscribeLinkEnabled).Append("\n");
            sb.Append("  SubscribeLinkName: ").Append(SubscribeLinkName).Append("\n");
            sb.Append("  TextContent: ").Append(TextContent).Append("\n");
            sb.Append("  PermissionReminderEnabled: ").Append(PermissionReminderEnabled).Append("\n");
            sb.Append("  PermissionReminder: ").Append(PermissionReminder).Append("\n");
            sb.Append("  ViewAsWebpageEnabled: ").Append(ViewAsWebpageEnabled).Append("\n");
            sb.Append("  ViewAsWebpageText: ").Append(ViewAsWebpageText).Append("\n");
            sb.Append("  ViewAsWebpageLinkName: ").Append(ViewAsWebpageLinkName).Append("\n");
            sb.Append("  ForwardEmailLinkEnabled: ").Append(ForwardEmailLinkEnabled).Append("\n");
            sb.Append("  ForwardEmailLinkName: ").Append(ForwardEmailLinkName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // StyleContent (string) maxLength
            if (this.StyleContent != null && this.StyleContent.Length > 150000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StyleContent, length must be less than 150000.", new [] { "StyleContent" });
            }

            // GreetingSalutation (string) maxLength
            if (this.GreetingSalutation != null && this.GreetingSalutation.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GreetingSalutation, length must be less than 50.", new [] { "GreetingSalutation" });
            }

            // GreetingSecondary (string) maxLength
            if (this.GreetingSecondary != null && this.GreetingSecondary.Length > 1500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for GreetingSecondary, length must be less than 1500.", new [] { "GreetingSecondary" });
            }

            // SubscribeLinkName (string) maxLength
            if (this.SubscribeLinkName != null && this.SubscribeLinkName.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SubscribeLinkName, length must be less than 80.", new [] { "SubscribeLinkName" });
            }

            // TextContent (string) maxLength
            if (this.TextContent != null && this.TextContent.Length > 150000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TextContent, length must be less than 150000.", new [] { "TextContent" });
            }

            // PermissionReminder (string) maxLength
            if (this.PermissionReminder != null && this.PermissionReminder.Length > 1500)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PermissionReminder, length must be less than 1500.", new [] { "PermissionReminder" });
            }

            // ViewAsWebpageText (string) maxLength
            if (this.ViewAsWebpageText != null && this.ViewAsWebpageText.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ViewAsWebpageText, length must be less than 50.", new [] { "ViewAsWebpageText" });
            }

            // ForwardEmailLinkName (string) maxLength
            if (this.ForwardEmailLinkName != null && this.ForwardEmailLinkName.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ForwardEmailLinkName, length must be less than 80.", new [] { "ForwardEmailLinkName" });
            }

            yield break;
        }
    }

}
