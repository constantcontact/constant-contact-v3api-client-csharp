/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Activity status for contacts_json_import and contacts_file_import activities
    /// </summary>
    [DataContract(Name = "createCSVImportActivity_201_response")]
    public partial class CreateCSVImportActivity201Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateCSVImportActivity201Response" /> class.
        /// </summary>
        /// <param name="state">The state of the request:  &lt;p&gt;&lt;ul&gt;    &lt;li&gt;initialized - request has been received&lt;/li&gt;   &lt;li&gt;processing - request is being processed&lt;/li&gt;   &lt;li&gt;completed - job completed&lt;/li&gt;   &lt;li&gt;cancelled - request was cancelled&lt;/li&gt;   &lt;li&gt;failed - job failed to complete&lt;/li&gt;   &lt;li&gt;timed_out - the request timed out before completing\&quot;&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;.</param>
        /// <param name="status">status.</param>
        /// <param name="links">links.</param>
        public CreateCSVImportActivity201Response(string state = default(string), CreateCSVImportActivity201ResponseStatus status = default(CreateCSVImportActivity201ResponseStatus), CreateCSVImportActivity201ResponseLinks links = default(CreateCSVImportActivity201ResponseLinks))
        {
            this.State = state;
            this.Status = status;
            this.Links = links;
        }

        /// <summary>
        /// Unique ID for the activity.
        /// </summary>
        /// <value>Unique ID for the activity.</value>
        /// <example>86b90820-cc52-11ea-9dad-fa163e3d9194</example>
        [DataMember(Name = "activity_id", EmitDefaultValue = false)]
        public Guid ActivityId { get; private set; }

        /// <summary>
        /// Returns false as ActivityId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActivityId()
        {
            return false;
        }
        /// <summary>
        /// The state of the request:  &lt;p&gt;&lt;ul&gt;    &lt;li&gt;initialized - request has been received&lt;/li&gt;   &lt;li&gt;processing - request is being processed&lt;/li&gt;   &lt;li&gt;completed - job completed&lt;/li&gt;   &lt;li&gt;cancelled - request was cancelled&lt;/li&gt;   &lt;li&gt;failed - job failed to complete&lt;/li&gt;   &lt;li&gt;timed_out - the request timed out before completing\&quot;&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;
        /// </summary>
        /// <value>The state of the request:  &lt;p&gt;&lt;ul&gt;    &lt;li&gt;initialized - request has been received&lt;/li&gt;   &lt;li&gt;processing - request is being processed&lt;/li&gt;   &lt;li&gt;completed - job completed&lt;/li&gt;   &lt;li&gt;cancelled - request was cancelled&lt;/li&gt;   &lt;li&gt;failed - job failed to complete&lt;/li&gt;   &lt;li&gt;timed_out - the request timed out before completing\&quot;&lt;/li&gt; &lt;/ul&gt; &lt;/p&gt;</value>
        /// <example>initialized</example>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// Timestamp showing when we began processing the activity request, in ISO-8601 format.
        /// </summary>
        /// <value>Timestamp showing when we began processing the activity request, in ISO-8601 format.</value>
        /// <example>2016-01-23T13:48:40.108Z</example>
        [DataMember(Name = "started_at", EmitDefaultValue = false)]
        public DateTime StartedAt { get; private set; }

        /// <summary>
        /// Returns false as StartedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartedAt()
        {
            return false;
        }
        /// <summary>
        /// Timestamp showing when we completed processing the activity, in ISO-8601 format.
        /// </summary>
        /// <value>Timestamp showing when we completed processing the activity, in ISO-8601 format.</value>
        /// <example>2016-01-23T13:48:44.108Z</example>
        [DataMember(Name = "completed_at", EmitDefaultValue = false)]
        public DateTime CompletedAt { get; private set; }

        /// <summary>
        /// Returns false as CompletedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompletedAt()
        {
            return false;
        }
        /// <summary>
        /// Timestamp showing when we created the activity, in ISO-8601 format.
        /// </summary>
        /// <value>Timestamp showing when we created the activity, in ISO-8601 format.</value>
        /// <example>2016-01-23T13:48:44.108Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Timestamp showing when we last updated the activity, in ISO-8601 format.
        /// </summary>
        /// <value>Timestamp showing when we last updated the activity, in ISO-8601 format.</value>
        /// <example>2016-01-23T13:48:44.108Z</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Name of the file used for an file_import activity.
        /// </summary>
        /// <value>Name of the file used for an file_import activity.</value>
        /// <example>2016-21-04-contact_import.xls</example>
        [DataMember(Name = "source_file_name", EmitDefaultValue = false)]
        public string SourceFileName { get; private set; }

        /// <summary>
        /// Returns false as SourceFileName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSourceFileName()
        {
            return false;
        }
        /// <summary>
        /// Shows the percent done for an activity that we are still processing.
        /// </summary>
        /// <value>Shows the percent done for an activity that we are still processing.</value>
        /// <example>75</example>
        [DataMember(Name = "percent_done", EmitDefaultValue = false)]
        public int PercentDone { get; private set; }

        /// <summary>
        /// Returns false as PercentDone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentDone()
        {
            return false;
        }
        /// <summary>
        /// Array of messages describing the errors that occurred.
        /// </summary>
        /// <value>Array of messages describing the errors that occurred.</value>
        [DataMember(Name = "activity_errors", EmitDefaultValue = false)]
        public List<string> ActivityErrors { get; private set; }

        /// <summary>
        /// Returns false as ActivityErrors should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActivityErrors()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public CreateCSVImportActivity201ResponseStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public CreateCSVImportActivity201ResponseLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateCSVImportActivity201Response {\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  SourceFileName: ").Append(SourceFileName).Append("\n");
            sb.Append("  PercentDone: ").Append(PercentDone).Append("\n");
            sb.Append("  ActivityErrors: ").Append(ActivityErrors).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
