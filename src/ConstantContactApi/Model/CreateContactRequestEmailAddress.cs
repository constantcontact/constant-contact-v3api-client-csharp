/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// The contact&#39;s email address and related properties.
    /// </summary>
    [DataContract(Name = "createContact_request_email_address")]
    public partial class CreateContactRequestEmailAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateContactRequestEmailAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateContactRequestEmailAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateContactRequestEmailAddress" /> class.
        /// </summary>
        /// <param name="address">The contact&#39;s email address. (required).</param>
        /// <param name="permissionToSend">Identifies the type of permission that the Constant Contact account has been granted to send email to the contact. Types of permission: explicit, implicit, not_set, pending_confirmation, temp_hold, unsubscribed..</param>
        public CreateContactRequestEmailAddress(string address = default(string), string permissionToSend = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for CreateContactRequestEmailAddress and cannot be null");
            }
            this.Address = address;
            this.PermissionToSend = permissionToSend;
        }

        /// <summary>
        /// The contact&#39;s email address.
        /// </summary>
        /// <value>The contact&#39;s email address.</value>
        /// <example>dlang@example.com</example>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Identifies the type of permission that the Constant Contact account has been granted to send email to the contact. Types of permission: explicit, implicit, not_set, pending_confirmation, temp_hold, unsubscribed.
        /// </summary>
        /// <value>Identifies the type of permission that the Constant Contact account has been granted to send email to the contact. Types of permission: explicit, implicit, not_set, pending_confirmation, temp_hold, unsubscribed.</value>
        /// <example>implicit</example>
        [DataMember(Name = "permission_to_send", EmitDefaultValue = false)]
        public string PermissionToSend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateContactRequestEmailAddress {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PermissionToSend: ").Append(PermissionToSend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Address (string) maxLength
            if (this.Address != null && this.Address.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, length must be less than 80.", new [] { "Address" });
            }

            yield break;
        }
    }

}
