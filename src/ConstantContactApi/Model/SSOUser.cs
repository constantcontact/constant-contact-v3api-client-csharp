/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Specify client account user&#39;s details. All fields are required.
    /// </summary>
    [DataContract(Name = "SSOUser")]
    public partial class SSOUser : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SSOUser" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SSOUser() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SSOUser" /> class.
        /// </summary>
        /// <param name="firstName">The client account user&#39;s first name. (required).</param>
        /// <param name="lastName">The client account user&#39;s last name. (required).</param>
        /// <param name="roleName">The role (&lt;code&gt;account_manager&lt;/code&gt; or &lt;code&gt;campaign_creator&lt;/code&gt;) to assign the client account user. (required).</param>
        /// <param name="contactEmail">The unique email address to associate with the new client account user. (required).</param>
        /// <param name="loginName">The login name to associate with the new client account user. (required).</param>
        /// <param name="externalId">The unique ID used to identify the client account user to the external authenticator.  (required).</param>
        /// <param name="externalProvider">The unique name used to identify the external provider used to authenticate the client account user. For a list of external providers, contact the Constant Contact Partner Team. (required).</param>
        public SSOUser(string firstName = default(string), string lastName = default(string), string roleName = default(string), string contactEmail = default(string), string loginName = default(string), string externalId = default(string), string externalProvider = default(string))
        {
            // to ensure "firstName" is required (not null)
            if (firstName == null)
            {
                throw new ArgumentNullException("firstName is a required property for SSOUser and cannot be null");
            }
            this.FirstName = firstName;
            // to ensure "lastName" is required (not null)
            if (lastName == null)
            {
                throw new ArgumentNullException("lastName is a required property for SSOUser and cannot be null");
            }
            this.LastName = lastName;
            // to ensure "roleName" is required (not null)
            if (roleName == null)
            {
                throw new ArgumentNullException("roleName is a required property for SSOUser and cannot be null");
            }
            this.RoleName = roleName;
            // to ensure "contactEmail" is required (not null)
            if (contactEmail == null)
            {
                throw new ArgumentNullException("contactEmail is a required property for SSOUser and cannot be null");
            }
            this.ContactEmail = contactEmail;
            // to ensure "loginName" is required (not null)
            if (loginName == null)
            {
                throw new ArgumentNullException("loginName is a required property for SSOUser and cannot be null");
            }
            this.LoginName = loginName;
            // to ensure "externalId" is required (not null)
            if (externalId == null)
            {
                throw new ArgumentNullException("externalId is a required property for SSOUser and cannot be null");
            }
            this.ExternalId = externalId;
            // to ensure "externalProvider" is required (not null)
            if (externalProvider == null)
            {
                throw new ArgumentNullException("externalProvider is a required property for SSOUser and cannot be null");
            }
            this.ExternalProvider = externalProvider;
        }

        /// <summary>
        /// The client account user&#39;s first name.
        /// </summary>
        /// <value>The client account user&#39;s first name.</value>
        /// <example>Josie</example>
        [DataMember(Name = "first_name", IsRequired = true, EmitDefaultValue = true)]
        public string FirstName { get; set; }

        /// <summary>
        /// The client account user&#39;s last name.
        /// </summary>
        /// <value>The client account user&#39;s last name.</value>
        /// <example>Lang</example>
        [DataMember(Name = "last_name", IsRequired = true, EmitDefaultValue = true)]
        public string LastName { get; set; }

        /// <summary>
        /// The role (&lt;code&gt;account_manager&lt;/code&gt; or &lt;code&gt;campaign_creator&lt;/code&gt;) to assign the client account user.
        /// </summary>
        /// <value>The role (&lt;code&gt;account_manager&lt;/code&gt; or &lt;code&gt;campaign_creator&lt;/code&gt;) to assign the client account user.</value>
        /// <example>campaign_creator</example>
        [DataMember(Name = "role_name", IsRequired = true, EmitDefaultValue = true)]
        public string RoleName { get; set; }

        /// <summary>
        /// The unique email address to associate with the new client account user.
        /// </summary>
        /// <value>The unique email address to associate with the new client account user.</value>
        /// <example>josie.lang@gmail.com</example>
        [DataMember(Name = "contact_email", IsRequired = true, EmitDefaultValue = true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// The login name to associate with the new client account user.
        /// </summary>
        /// <value>The login name to associate with the new client account user.</value>
        /// <example>josie.lang</example>
        [DataMember(Name = "login_name", IsRequired = true, EmitDefaultValue = true)]
        public string LoginName { get; set; }

        /// <summary>
        /// The unique ID used to identify the client account user to the external authenticator. 
        /// </summary>
        /// <value>The unique ID used to identify the client account user to the external authenticator. </value>
        /// <example>23378234122161121</example>
        [DataMember(Name = "external_id", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The unique name used to identify the external provider used to authenticate the client account user. For a list of external providers, contact the Constant Contact Partner Team.
        /// </summary>
        /// <value>The unique name used to identify the external provider used to authenticate the client account user. For a list of external providers, contact the Constant Contact Partner Team.</value>
        /// <example>Yahoo</example>
        [DataMember(Name = "external_provider", IsRequired = true, EmitDefaultValue = true)]
        public string ExternalProvider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SSOUser {\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  RoleName: ").Append(RoleName).Append("\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ExternalProvider: ").Append(ExternalProvider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 80.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 80.", new [] { "LastName" });
            }

            // ContactEmail (string) maxLength
            if (this.ContactEmail != null && this.ContactEmail.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactEmail, length must be less than 80.", new [] { "ContactEmail" });
            }

            // LoginName (string) maxLength
            if (this.LoginName != null && this.LoginName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginName, length must be less than 50.", new [] { "LoginName" });
            }

            // ExternalId (string) maxLength
            if (this.ExternalId != null && this.ExternalId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalId, length must be less than 255.", new [] { "ExternalId" });
            }

            // ExternalProvider (string) maxLength
            if (this.ExternalProvider != null && this.ExternalProvider.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalProvider, length must be less than 80.", new [] { "ExternalProvider" });
            }

            yield break;
        }
    }

}
