/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// JsonImportContact
    /// </summary>
    [DataContract(Name = "JsonImportContact")]
    public partial class JsonImportContact : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="JsonImportContact" /> class.
        /// </summary>
        /// <param name="email">The email address of the contact. This method identifies each unique contact using their email address. Required if &#x60;sms_number&#x60; is not specified..</param>
        /// <param name="firstName">The first name of the contact..</param>
        /// <param name="lastName">The last name of the contact..</param>
        /// <param name="jobTitle">The job title of the contact..</param>
        /// <param name="companyName">The name of the company where the contact works..</param>
        /// <param name="birthdayMonth">The month value for the contact&#39;s birthday. Valid values are from 1 through 12. The &lt;code&gt;birthday_month&lt;/code&gt; property is required if you use &lt;code&gt;birthday_day&lt;/code&gt;..</param>
        /// <param name="birthdayDay">The day value for the contact&#39;s birthday. Valid values are from 1 through 31. The &lt;code&gt;birthday_day&lt;/code&gt; property is required if you use &lt;code&gt;birthday_month&lt;/code&gt;..</param>
        /// <param name="anniversary">The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY..</param>
        /// <param name="phone">The primary phone number for the contact. Use this field to add the default kind of phone number to the imported contact&#39;s phone number. Default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;other&lt;/code&gt;..</param>
        /// <param name="homePhone">The home phone number for the contact..</param>
        /// <param name="workPhone">The work phone number for the contact..</param>
        /// <param name="mobilePhone">The mobile phone number for the contact..</param>
        /// <param name="otherPhone">A phone number for the contact..</param>
        /// <param name="street">Line one of the primary street address for the contact. Use this field to add the default kind of street to the imported contact&#39;s street address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;. which maps to the &lt;code&gt;street_addresses&lt;/code&gt; array&#x60; in the response..</param>
        /// <param name="street2">Line two of the primary street address for the contact. This value is automatically appended to the &lt;code&gt;street&lt;/code&gt; value. Use this field to add the default kind for line two of the street address to the imported contact&#39;s address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;other&lt;/code&gt;..</param>
        /// <param name="city">The name of the primary city for the contact. Use this field to add the default kind of city to the imported contact&#39;s home address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;..</param>
        /// <param name="state">The name of the primary state or province for the contact. Use this field to add the default kind of state to the imported contact&#39;s home address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;..</param>
        /// <param name="zip">The zip or postal code associated with the contact&#39;s primary address. Use this field to add the default kind of zip to the imported contact&#39;s street address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;..</param>
        /// <param name="country">The name of the primary country where the contact is located. Use this field to add the default kind of country to the imported contact&#39;s street address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;..</param>
        /// <param name="homeStreet">Line one of the home street address for the contact..</param>
        /// <param name="homeStreet2">Line two of the home street address for the contact. This value is automatically appended to the &lt;code&gt;home_street&lt;/code&gt; value..</param>
        /// <param name="homeCity">The name of the city where the contact lives..</param>
        /// <param name="homeState">The name of the home state or province where the contact lives..</param>
        /// <param name="homeZip">The zip or postal code associated with the contact&#39;s home address..</param>
        /// <param name="homeCountry">The name of the country where the contact lives..</param>
        /// <param name="workStreet">Line one of the work street address for the contact..</param>
        /// <param name="workStreet2">Line two of the work street address for the contact. This value is automatically appended to the &lt;code&gt;work_street&lt;/code&gt; value..</param>
        /// <param name="workCity">The name of the city where the contact works..</param>
        /// <param name="workState">The name of the state or province where the contact works..</param>
        /// <param name="workZip">The zip or postal code associated with the contact&#39;s work address..</param>
        /// <param name="workCountry">The name of the country where the contact works..</param>
        /// <param name="otherStreet">Line one of the other street address for the contact..</param>
        /// <param name="otherStreet2">Line two of the other street address for the contact. This value is automatically appended to the &lt;code&gt;other_street&lt;/code&gt; value..</param>
        /// <param name="otherCity">The name of another city where the contact is located..</param>
        /// <param name="otherState">The name of another state or province where the contact is located..</param>
        /// <param name="otherZip">The zip or postal code associated with the contact&#39;s other address..</param>
        /// <param name="otherCountry">The name of another country where the contact is located..</param>
        /// <param name="cfcustomFieldName">The name of this property is dynamic based on the custom fields you want to import. Use a key-value pair where the key is an existing custom field name prefixed with &lt;code&gt;cf:&lt;/code&gt;, and the value is a custom field string value. For example, if you have a custom field named &lt;code&gt;first_name&lt;/code&gt; you can use &lt;code&gt;\&quot;cf:first_name\&quot;:\&quot;Joe\&quot;&lt;/code&gt;. Each contact can contain up to 25 different custom fields..</param>
        /// <param name="smsNumber">The US phone number to associate with the contact&#39;s SMS-enabled phone. The country code must be valid. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt;. Required if &#x60;email&#x60; is not specified..</param>
        /// <param name="smsConsentDate">Required if the SMS permission is set to &#x60;explicit&#x60;. The date that the contact consented to receiving SMS messages. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY..</param>
        public JsonImportContact(string email = default(string), string firstName = default(string), string lastName = default(string), string jobTitle = default(string), string companyName = default(string), int birthdayMonth = default(int), int birthdayDay = default(int), string anniversary = default(string), string phone = default(string), string homePhone = default(string), string workPhone = default(string), string mobilePhone = default(string), string otherPhone = default(string), string street = default(string), string street2 = default(string), string city = default(string), string state = default(string), string zip = default(string), string country = default(string), string homeStreet = default(string), string homeStreet2 = default(string), string homeCity = default(string), string homeState = default(string), string homeZip = default(string), string homeCountry = default(string), string workStreet = default(string), string workStreet2 = default(string), string workCity = default(string), string workState = default(string), string workZip = default(string), string workCountry = default(string), string otherStreet = default(string), string otherStreet2 = default(string), string otherCity = default(string), string otherState = default(string), string otherZip = default(string), string otherCountry = default(string), string cfcustomFieldName = default(string), string smsNumber = default(string), string smsConsentDate = default(string))
        {
            this.Email = email;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.JobTitle = jobTitle;
            this.CompanyName = companyName;
            this.BirthdayMonth = birthdayMonth;
            this.BirthdayDay = birthdayDay;
            this.Anniversary = anniversary;
            this.Phone = phone;
            this.HomePhone = homePhone;
            this.WorkPhone = workPhone;
            this.MobilePhone = mobilePhone;
            this.OtherPhone = otherPhone;
            this.Street = street;
            this.Street2 = street2;
            this.City = city;
            this.State = state;
            this.Zip = zip;
            this.Country = country;
            this.HomeStreet = homeStreet;
            this.HomeStreet2 = homeStreet2;
            this.HomeCity = homeCity;
            this.HomeState = homeState;
            this.HomeZip = homeZip;
            this.HomeCountry = homeCountry;
            this.WorkStreet = workStreet;
            this.WorkStreet2 = workStreet2;
            this.WorkCity = workCity;
            this.WorkState = workState;
            this.WorkZip = workZip;
            this.WorkCountry = workCountry;
            this.OtherStreet = otherStreet;
            this.OtherStreet2 = otherStreet2;
            this.OtherCity = otherCity;
            this.OtherState = otherState;
            this.OtherZip = otherZip;
            this.OtherCountry = otherCountry;
            this.CfcustomFieldName = cfcustomFieldName;
            this.SmsNumber = smsNumber;
            this.SmsConsentDate = smsConsentDate;
        }

        /// <summary>
        /// The email address of the contact. This method identifies each unique contact using their email address. Required if &#x60;sms_number&#x60; is not specified.
        /// </summary>
        /// <value>The email address of the contact. This method identifies each unique contact using their email address. Required if &#x60;sms_number&#x60; is not specified.</value>
        /// <example>joe.jones@example.com</example>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// The first name of the contact.
        /// </summary>
        /// <value>The first name of the contact.</value>
        /// <example>Joe</example>
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the contact.
        /// </summary>
        /// <value>The last name of the contact.</value>
        /// <example>Jones</example>
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The job title of the contact.
        /// </summary>
        /// <value>The job title of the contact.</value>
        /// <example>Chief Innovation Officer</example>
        [DataMember(Name = "job_title", EmitDefaultValue = false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// The name of the company where the contact works.
        /// </summary>
        /// <value>The name of the company where the contact works.</value>
        /// <example>RelativeGravity, Inc.</example>
        [DataMember(Name = "company_name", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The month value for the contact&#39;s birthday. Valid values are from 1 through 12. The &lt;code&gt;birthday_month&lt;/code&gt; property is required if you use &lt;code&gt;birthday_day&lt;/code&gt;.
        /// </summary>
        /// <value>The month value for the contact&#39;s birthday. Valid values are from 1 through 12. The &lt;code&gt;birthday_month&lt;/code&gt; property is required if you use &lt;code&gt;birthday_day&lt;/code&gt;.</value>
        /// <example>11</example>
        [DataMember(Name = "birthday_month", EmitDefaultValue = false)]
        public int BirthdayMonth { get; set; }

        /// <summary>
        /// The day value for the contact&#39;s birthday. Valid values are from 1 through 31. The &lt;code&gt;birthday_day&lt;/code&gt; property is required if you use &lt;code&gt;birthday_month&lt;/code&gt;.
        /// </summary>
        /// <value>The day value for the contact&#39;s birthday. Valid values are from 1 through 31. The &lt;code&gt;birthday_day&lt;/code&gt; property is required if you use &lt;code&gt;birthday_month&lt;/code&gt;.</value>
        /// <example>24</example>
        [DataMember(Name = "birthday_day", EmitDefaultValue = false)]
        public int BirthdayDay { get; set; }

        /// <summary>
        /// The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.
        /// </summary>
        /// <value>The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.</value>
        /// <example>2006-11-15</example>
        [DataMember(Name = "anniversary", EmitDefaultValue = false)]
        public string Anniversary { get; set; }

        /// <summary>
        /// The primary phone number for the contact. Use this field to add the default kind of phone number to the imported contact&#39;s phone number. Default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;other&lt;/code&gt;.
        /// </summary>
        /// <value>The primary phone number for the contact. Use this field to add the default kind of phone number to the imported contact&#39;s phone number. Default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;other&lt;/code&gt;.</value>
        /// <example>555-555-5555</example>
        [DataMember(Name = "phone", EmitDefaultValue = false)]
        public string Phone { get; set; }

        /// <summary>
        /// The home phone number for the contact.
        /// </summary>
        /// <value>The home phone number for the contact.</value>
        /// <example>555-555-5555</example>
        [DataMember(Name = "home_phone", EmitDefaultValue = false)]
        public string HomePhone { get; set; }

        /// <summary>
        /// The work phone number for the contact.
        /// </summary>
        /// <value>The work phone number for the contact.</value>
        /// <example>555-555-4444</example>
        [DataMember(Name = "work_phone", EmitDefaultValue = false)]
        public string WorkPhone { get; set; }

        /// <summary>
        /// The mobile phone number for the contact.
        /// </summary>
        /// <value>The mobile phone number for the contact.</value>
        /// <example>555-555-3333</example>
        [DataMember(Name = "mobile_phone", EmitDefaultValue = false)]
        public string MobilePhone { get; set; }

        /// <summary>
        /// A phone number for the contact.
        /// </summary>
        /// <value>A phone number for the contact.</value>
        /// <example>555-555-2222</example>
        [DataMember(Name = "other_phone", EmitDefaultValue = false)]
        public string OtherPhone { get; set; }

        /// <summary>
        /// Line one of the primary street address for the contact. Use this field to add the default kind of street to the imported contact&#39;s street address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;. which maps to the &lt;code&gt;street_addresses&lt;/code&gt; array&#x60; in the response.
        /// </summary>
        /// <value>Line one of the primary street address for the contact. Use this field to add the default kind of street to the imported contact&#39;s street address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;. which maps to the &lt;code&gt;street_addresses&lt;/code&gt; array&#x60; in the response.</value>
        /// <example>123 Maple Lane</example>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// Line two of the primary street address for the contact. This value is automatically appended to the &lt;code&gt;street&lt;/code&gt; value. Use this field to add the default kind for line two of the street address to the imported contact&#39;s address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;other&lt;/code&gt;.
        /// </summary>
        /// <value>Line two of the primary street address for the contact. This value is automatically appended to the &lt;code&gt;street&lt;/code&gt; value. Use this field to add the default kind for line two of the street address to the imported contact&#39;s address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;other&lt;/code&gt;.</value>
        /// <example>Apt. 337</example>
        [DataMember(Name = "street2", EmitDefaultValue = false)]
        public string Street2 { get; set; }

        /// <summary>
        /// The name of the primary city for the contact. Use this field to add the default kind of city to the imported contact&#39;s home address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;.
        /// </summary>
        /// <value>The name of the primary city for the contact. Use this field to add the default kind of city to the imported contact&#39;s home address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;.</value>
        /// <example>Chicago</example>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// The name of the primary state or province for the contact. Use this field to add the default kind of state to the imported contact&#39;s home address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;.
        /// </summary>
        /// <value>The name of the primary state or province for the contact. Use this field to add the default kind of state to the imported contact&#39;s home address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;.</value>
        /// <example>Illinois</example>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// The zip or postal code associated with the contact&#39;s primary address. Use this field to add the default kind of zip to the imported contact&#39;s street address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;.
        /// </summary>
        /// <value>The zip or postal code associated with the contact&#39;s primary address. Use this field to add the default kind of zip to the imported contact&#39;s street address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;.</value>
        /// <example>60609</example>
        [DataMember(Name = "zip", EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// The name of the primary country where the contact is located. Use this field to add the default kind of country to the imported contact&#39;s street address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;.
        /// </summary>
        /// <value>The name of the primary country where the contact is located. Use this field to add the default kind of country to the imported contact&#39;s street address. The default &lt;code&gt;kind&lt;/code&gt; is &lt;code&gt;home&lt;/code&gt;.</value>
        /// <example>United States</example>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Line one of the home street address for the contact.
        /// </summary>
        /// <value>Line one of the home street address for the contact.</value>
        /// <example>123 Maple Lane</example>
        [DataMember(Name = "home_street", EmitDefaultValue = false)]
        public string HomeStreet { get; set; }

        /// <summary>
        /// Line two of the home street address for the contact. This value is automatically appended to the &lt;code&gt;home_street&lt;/code&gt; value.
        /// </summary>
        /// <value>Line two of the home street address for the contact. This value is automatically appended to the &lt;code&gt;home_street&lt;/code&gt; value.</value>
        /// <example>Apt. 337</example>
        [DataMember(Name = "home_street2", EmitDefaultValue = false)]
        public string HomeStreet2 { get; set; }

        /// <summary>
        /// The name of the city where the contact lives.
        /// </summary>
        /// <value>The name of the city where the contact lives.</value>
        /// <example>Chicago</example>
        [DataMember(Name = "home_city", EmitDefaultValue = false)]
        public string HomeCity { get; set; }

        /// <summary>
        /// The name of the home state or province where the contact lives.
        /// </summary>
        /// <value>The name of the home state or province where the contact lives.</value>
        /// <example>Illinois</example>
        [DataMember(Name = "home_state", EmitDefaultValue = false)]
        public string HomeState { get; set; }

        /// <summary>
        /// The zip or postal code associated with the contact&#39;s home address.
        /// </summary>
        /// <value>The zip or postal code associated with the contact&#39;s home address.</value>
        /// <example>60609</example>
        [DataMember(Name = "home_zip", EmitDefaultValue = false)]
        public string HomeZip { get; set; }

        /// <summary>
        /// The name of the country where the contact lives.
        /// </summary>
        /// <value>The name of the country where the contact lives.</value>
        /// <example>United States</example>
        [DataMember(Name = "home country", EmitDefaultValue = false)]
        public string HomeCountry { get; set; }

        /// <summary>
        /// Line one of the work street address for the contact.
        /// </summary>
        /// <value>Line one of the work street address for the contact.</value>
        /// <example>123 Maple Lane</example>
        [DataMember(Name = "work_street", EmitDefaultValue = false)]
        public string WorkStreet { get; set; }

        /// <summary>
        /// Line two of the work street address for the contact. This value is automatically appended to the &lt;code&gt;work_street&lt;/code&gt; value.
        /// </summary>
        /// <value>Line two of the work street address for the contact. This value is automatically appended to the &lt;code&gt;work_street&lt;/code&gt; value.</value>
        /// <example>Apt. 337</example>
        [DataMember(Name = "work_street2", EmitDefaultValue = false)]
        public string WorkStreet2 { get; set; }

        /// <summary>
        /// The name of the city where the contact works.
        /// </summary>
        /// <value>The name of the city where the contact works.</value>
        /// <example>Chicago</example>
        [DataMember(Name = "work_city", EmitDefaultValue = false)]
        public string WorkCity { get; set; }

        /// <summary>
        /// The name of the state or province where the contact works.
        /// </summary>
        /// <value>The name of the state or province where the contact works.</value>
        /// <example>Illinois</example>
        [DataMember(Name = "work_state", EmitDefaultValue = false)]
        public string WorkState { get; set; }

        /// <summary>
        /// The zip or postal code associated with the contact&#39;s work address.
        /// </summary>
        /// <value>The zip or postal code associated with the contact&#39;s work address.</value>
        /// <example>60609</example>
        [DataMember(Name = "work_zip", EmitDefaultValue = false)]
        public string WorkZip { get; set; }

        /// <summary>
        /// The name of the country where the contact works.
        /// </summary>
        /// <value>The name of the country where the contact works.</value>
        /// <example>United States</example>
        [DataMember(Name = "work_country", EmitDefaultValue = false)]
        public string WorkCountry { get; set; }

        /// <summary>
        /// Line one of the other street address for the contact.
        /// </summary>
        /// <value>Line one of the other street address for the contact.</value>
        /// <example>123 Maple Lane</example>
        [DataMember(Name = "other_street", EmitDefaultValue = false)]
        public string OtherStreet { get; set; }

        /// <summary>
        /// Line two of the other street address for the contact. This value is automatically appended to the &lt;code&gt;other_street&lt;/code&gt; value.
        /// </summary>
        /// <value>Line two of the other street address for the contact. This value is automatically appended to the &lt;code&gt;other_street&lt;/code&gt; value.</value>
        /// <example>Apt. 337</example>
        [DataMember(Name = "other_street2", EmitDefaultValue = false)]
        public string OtherStreet2 { get; set; }

        /// <summary>
        /// The name of another city where the contact is located.
        /// </summary>
        /// <value>The name of another city where the contact is located.</value>
        /// <example>Chicago</example>
        [DataMember(Name = "other_city", EmitDefaultValue = false)]
        public string OtherCity { get; set; }

        /// <summary>
        /// The name of another state or province where the contact is located.
        /// </summary>
        /// <value>The name of another state or province where the contact is located.</value>
        /// <example>Illinois</example>
        [DataMember(Name = "other_state", EmitDefaultValue = false)]
        public string OtherState { get; set; }

        /// <summary>
        /// The zip or postal code associated with the contact&#39;s other address.
        /// </summary>
        /// <value>The zip or postal code associated with the contact&#39;s other address.</value>
        /// <example>60609</example>
        [DataMember(Name = "other_zip", EmitDefaultValue = false)]
        public string OtherZip { get; set; }

        /// <summary>
        /// The name of another country where the contact is located.
        /// </summary>
        /// <value>The name of another country where the contact is located.</value>
        /// <example>Canada</example>
        [DataMember(Name = "other_country", EmitDefaultValue = false)]
        public string OtherCountry { get; set; }

        /// <summary>
        /// The name of this property is dynamic based on the custom fields you want to import. Use a key-value pair where the key is an existing custom field name prefixed with &lt;code&gt;cf:&lt;/code&gt;, and the value is a custom field string value. For example, if you have a custom field named &lt;code&gt;first_name&lt;/code&gt; you can use &lt;code&gt;\&quot;cf:first_name\&quot;:\&quot;Joe\&quot;&lt;/code&gt;. Each contact can contain up to 25 different custom fields.
        /// </summary>
        /// <value>The name of this property is dynamic based on the custom fields you want to import. Use a key-value pair where the key is an existing custom field name prefixed with &lt;code&gt;cf:&lt;/code&gt;, and the value is a custom field string value. For example, if you have a custom field named &lt;code&gt;first_name&lt;/code&gt; you can use &lt;code&gt;\&quot;cf:first_name\&quot;:\&quot;Joe\&quot;&lt;/code&gt;. Each contact can contain up to 25 different custom fields.</value>
        /// <example>Tesla S 2017</example>
        [DataMember(Name = "cf:custom_field_name", EmitDefaultValue = false)]
        public string CfcustomFieldName { get; set; }

        /// <summary>
        /// The US phone number to associate with the contact&#39;s SMS-enabled phone. The country code must be valid. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt;. Required if &#x60;email&#x60; is not specified.
        /// </summary>
        /// <value>The US phone number to associate with the contact&#39;s SMS-enabled phone. The country code must be valid. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt;. Required if &#x60;email&#x60; is not specified.</value>
        /// <example>5081231235</example>
        [DataMember(Name = "sms_number", EmitDefaultValue = false)]
        public string SmsNumber { get; set; }

        /// <summary>
        /// Required if the SMS permission is set to &#x60;explicit&#x60;. The date that the contact consented to receiving SMS messages. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.
        /// </summary>
        /// <value>Required if the SMS permission is set to &#x60;explicit&#x60;. The date that the contact consented to receiving SMS messages. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.</value>
        /// <example>07-03-2024</example>
        [DataMember(Name = "sms_consent_date", EmitDefaultValue = false)]
        public string SmsConsentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class JsonImportContact {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  BirthdayMonth: ").Append(BirthdayMonth).Append("\n");
            sb.Append("  BirthdayDay: ").Append(BirthdayDay).Append("\n");
            sb.Append("  Anniversary: ").Append(Anniversary).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  HomePhone: ").Append(HomePhone).Append("\n");
            sb.Append("  WorkPhone: ").Append(WorkPhone).Append("\n");
            sb.Append("  MobilePhone: ").Append(MobilePhone).Append("\n");
            sb.Append("  OtherPhone: ").Append(OtherPhone).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Street2: ").Append(Street2).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  HomeStreet: ").Append(HomeStreet).Append("\n");
            sb.Append("  HomeStreet2: ").Append(HomeStreet2).Append("\n");
            sb.Append("  HomeCity: ").Append(HomeCity).Append("\n");
            sb.Append("  HomeState: ").Append(HomeState).Append("\n");
            sb.Append("  HomeZip: ").Append(HomeZip).Append("\n");
            sb.Append("  HomeCountry: ").Append(HomeCountry).Append("\n");
            sb.Append("  WorkStreet: ").Append(WorkStreet).Append("\n");
            sb.Append("  WorkStreet2: ").Append(WorkStreet2).Append("\n");
            sb.Append("  WorkCity: ").Append(WorkCity).Append("\n");
            sb.Append("  WorkState: ").Append(WorkState).Append("\n");
            sb.Append("  WorkZip: ").Append(WorkZip).Append("\n");
            sb.Append("  WorkCountry: ").Append(WorkCountry).Append("\n");
            sb.Append("  OtherStreet: ").Append(OtherStreet).Append("\n");
            sb.Append("  OtherStreet2: ").Append(OtherStreet2).Append("\n");
            sb.Append("  OtherCity: ").Append(OtherCity).Append("\n");
            sb.Append("  OtherState: ").Append(OtherState).Append("\n");
            sb.Append("  OtherZip: ").Append(OtherZip).Append("\n");
            sb.Append("  OtherCountry: ").Append(OtherCountry).Append("\n");
            sb.Append("  CfcustomFieldName: ").Append(CfcustomFieldName).Append("\n");
            sb.Append("  SmsNumber: ").Append(SmsNumber).Append("\n");
            sb.Append("  SmsConsentDate: ").Append(SmsConsentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Email, length must be less than 50.", new [] { "Email" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 50.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 50.", new [] { "LastName" });
            }

            // JobTitle (string) maxLength
            if (this.JobTitle != null && this.JobTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobTitle, length must be less than 50.", new [] { "JobTitle" });
            }

            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be less than 50.", new [] { "CompanyName" });
            }

            // Phone (string) maxLength
            if (this.Phone != null && this.Phone.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Phone, length must be less than 50.", new [] { "Phone" });
            }

            // HomePhone (string) maxLength
            if (this.HomePhone != null && this.HomePhone.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomePhone, length must be less than 50.", new [] { "HomePhone" });
            }

            // WorkPhone (string) maxLength
            if (this.WorkPhone != null && this.WorkPhone.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkPhone, length must be less than 50.", new [] { "WorkPhone" });
            }

            // MobilePhone (string) maxLength
            if (this.MobilePhone != null && this.MobilePhone.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for MobilePhone, length must be less than 50.", new [] { "MobilePhone" });
            }

            // OtherPhone (string) maxLength
            if (this.OtherPhone != null && this.OtherPhone.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherPhone, length must be less than 50.", new [] { "OtherPhone" });
            }

            // Street (string) maxLength
            if (this.Street != null && this.Street.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Street, length must be less than 255.", new [] { "Street" });
            }

            // Street2 (string) maxLength
            if (this.Street2 != null && this.Street2.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Street2, length must be less than 255.", new [] { "Street2" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 50.", new [] { "City" });
            }

            // State (string) maxLength
            if (this.State != null && this.State.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be less than 50.", new [] { "State" });
            }

            // Zip (string) maxLength
            if (this.Zip != null && this.Zip.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Zip, length must be less than 50.", new [] { "Zip" });
            }

            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 50.", new [] { "Country" });
            }

            // HomeStreet (string) maxLength
            if (this.HomeStreet != null && this.HomeStreet.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomeStreet, length must be less than 255.", new [] { "HomeStreet" });
            }

            // HomeStreet2 (string) maxLength
            if (this.HomeStreet2 != null && this.HomeStreet2.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomeStreet2, length must be less than 255.", new [] { "HomeStreet2" });
            }

            // HomeCity (string) maxLength
            if (this.HomeCity != null && this.HomeCity.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomeCity, length must be less than 50.", new [] { "HomeCity" });
            }

            // HomeState (string) maxLength
            if (this.HomeState != null && this.HomeState.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomeState, length must be less than 50.", new [] { "HomeState" });
            }

            // HomeZip (string) maxLength
            if (this.HomeZip != null && this.HomeZip.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomeZip, length must be less than 50.", new [] { "HomeZip" });
            }

            // HomeCountry (string) maxLength
            if (this.HomeCountry != null && this.HomeCountry.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HomeCountry, length must be less than 50.", new [] { "HomeCountry" });
            }

            // WorkStreet (string) maxLength
            if (this.WorkStreet != null && this.WorkStreet.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkStreet, length must be less than 255.", new [] { "WorkStreet" });
            }

            // WorkStreet2 (string) maxLength
            if (this.WorkStreet2 != null && this.WorkStreet2.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkStreet2, length must be less than 255.", new [] { "WorkStreet2" });
            }

            // WorkCity (string) maxLength
            if (this.WorkCity != null && this.WorkCity.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkCity, length must be less than 50.", new [] { "WorkCity" });
            }

            // WorkState (string) maxLength
            if (this.WorkState != null && this.WorkState.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkState, length must be less than 50.", new [] { "WorkState" });
            }

            // WorkZip (string) maxLength
            if (this.WorkZip != null && this.WorkZip.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkZip, length must be less than 50.", new [] { "WorkZip" });
            }

            // WorkCountry (string) maxLength
            if (this.WorkCountry != null && this.WorkCountry.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WorkCountry, length must be less than 50.", new [] { "WorkCountry" });
            }

            // OtherStreet (string) maxLength
            if (this.OtherStreet != null && this.OtherStreet.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherStreet, length must be less than 255.", new [] { "OtherStreet" });
            }

            // OtherStreet2 (string) maxLength
            if (this.OtherStreet2 != null && this.OtherStreet2.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherStreet2, length must be less than 255.", new [] { "OtherStreet2" });
            }

            // OtherCity (string) maxLength
            if (this.OtherCity != null && this.OtherCity.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherCity, length must be less than 50.", new [] { "OtherCity" });
            }

            // OtherState (string) maxLength
            if (this.OtherState != null && this.OtherState.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherState, length must be less than 50.", new [] { "OtherState" });
            }

            // OtherZip (string) maxLength
            if (this.OtherZip != null && this.OtherZip.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherZip, length must be less than 50.", new [] { "OtherZip" });
            }

            // OtherCountry (string) maxLength
            if (this.OtherCountry != null && this.OtherCountry.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OtherCountry, length must be less than 50.", new [] { "OtherCountry" });
            }

            // CfcustomFieldName (string) maxLength
            if (this.CfcustomFieldName != null && this.CfcustomFieldName.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CfcustomFieldName, length must be less than 255.", new [] { "CfcustomFieldName" });
            }

            // SmsNumber (string) maxLength
            if (this.SmsNumber != null && this.SmsNumber.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmsNumber, length must be less than 16.", new [] { "SmsNumber" });
            }

            // SmsConsentDate (string) maxLength
            if (this.SmsConsentDate != null && this.SmsConsentDate.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SmsConsentDate, length must be less than 16.", new [] { "SmsConsentDate" });
            }

            yield break;
        }
    }

}
