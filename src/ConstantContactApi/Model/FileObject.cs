/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// FileObject
    /// </summary>
    [DataContract(Name = "FileObject")]
    public partial class FileObject : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FileObject" /> class.
        /// </summary>
        /// <param name="id">Identifies the MyLibrary file..</param>
        /// <param name="name">The file name..</param>
        /// <param name="height">The image height..</param>
        /// <param name="width">The image width..</param>
        /// <param name="size">The image size..</param>
        /// <param name="url">The image URL..</param>
        /// <param name="description">The image description..</param>
        /// <param name="folder">The image folder.</param>
        /// <param name="source">The application that uploaded this image..</param>
        /// <param name="type">The image format..</param>
        /// <param name="status">THe image status..</param>
        /// <param name="thumbnail">thumbnail.</param>
        /// <param name="image">Boolean indicating if this file is an image..</param>
        /// <param name="folderId">Identifies a folder in MyLibrary..</param>
        /// <param name="externalUrl">The external url for the file..</param>
        /// <param name="modifiedDate">Identifies the time a user last modified the file..</param>
        /// <param name="addedDate">Identifies the time a user originally added the file to MyLibrary..</param>
        /// <param name="externalFileId">External identifier for the file..</param>
        public FileObject(int id = default(int), string name = default(string), int height = default(int), int width = default(int), int size = default(int), string url = default(string), string description = default(string), string folder = default(string), string source = default(string), string type = default(string), string status = default(string), MyLibraryFileCollectionInnerThumbnail thumbnail = default(MyLibraryFileCollectionInnerThumbnail), bool image = default(bool), int folderId = default(int), string externalUrl = default(string), string modifiedDate = default(string), string addedDate = default(string), string externalFileId = default(string))
        {
            this.Id = id;
            this.Name = name;
            this.Height = height;
            this.Width = width;
            this.Size = size;
            this.Url = url;
            this.Description = description;
            this.Folder = folder;
            this.Source = source;
            this.Type = type;
            this.Status = status;
            this.Thumbnail = thumbnail;
            this.Image = image;
            this.FolderId = folderId;
            this.ExternalUrl = externalUrl;
            this.ModifiedDate = modifiedDate;
            this.AddedDate = addedDate;
            this.ExternalFileId = externalFileId;
        }

        /// <summary>
        /// Identifies the MyLibrary file.
        /// </summary>
        /// <value>Identifies the MyLibrary file.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// The file name.
        /// </summary>
        /// <value>The file name.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// The image height.
        /// </summary>
        /// <value>The image height.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public int Height { get; set; }

        /// <summary>
        /// The image width.
        /// </summary>
        /// <value>The image width.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public int Width { get; set; }

        /// <summary>
        /// The image size.
        /// </summary>
        /// <value>The image size.</value>
        [DataMember(Name = "size", EmitDefaultValue = false)]
        public int Size { get; set; }

        /// <summary>
        /// The image URL.
        /// </summary>
        /// <value>The image URL.</value>
        [DataMember(Name = "url", EmitDefaultValue = false)]
        public string Url { get; set; }

        /// <summary>
        /// The image description.
        /// </summary>
        /// <value>The image description.</value>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// The image folder
        /// </summary>
        /// <value>The image folder</value>
        [DataMember(Name = "folder", EmitDefaultValue = false)]
        public string Folder { get; set; }

        /// <summary>
        /// The application that uploaded this image.
        /// </summary>
        /// <value>The application that uploaded this image.</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// The image format.
        /// </summary>
        /// <value>The image format.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// THe image status.
        /// </summary>
        /// <value>THe image status.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Thumbnail
        /// </summary>
        [DataMember(Name = "thumbnail", EmitDefaultValue = false)]
        public MyLibraryFileCollectionInnerThumbnail Thumbnail { get; set; }

        /// <summary>
        /// Boolean indicating if this file is an image.
        /// </summary>
        /// <value>Boolean indicating if this file is an image.</value>
        [DataMember(Name = "image", EmitDefaultValue = true)]
        public bool Image { get; set; }

        /// <summary>
        /// Identifies a folder in MyLibrary.
        /// </summary>
        /// <value>Identifies a folder in MyLibrary.</value>
        [DataMember(Name = "folder_id", EmitDefaultValue = false)]
        public int FolderId { get; set; }

        /// <summary>
        /// The external url for the file.
        /// </summary>
        /// <value>The external url for the file.</value>
        [DataMember(Name = "external_url", EmitDefaultValue = false)]
        public string ExternalUrl { get; set; }

        /// <summary>
        /// Identifies the time a user last modified the file.
        /// </summary>
        /// <value>Identifies the time a user last modified the file.</value>
        [DataMember(Name = "modified_date", EmitDefaultValue = false)]
        public string ModifiedDate { get; set; }

        /// <summary>
        /// Identifies the time a user originally added the file to MyLibrary.
        /// </summary>
        /// <value>Identifies the time a user originally added the file to MyLibrary.</value>
        [DataMember(Name = "added_date", EmitDefaultValue = false)]
        public string AddedDate { get; set; }

        /// <summary>
        /// External identifier for the file.
        /// </summary>
        /// <value>External identifier for the file.</value>
        [DataMember(Name = "external_file_id", EmitDefaultValue = false)]
        public string ExternalFileId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FileObject {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Folder: ").Append(Folder).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Image: ").Append(Image).Append("\n");
            sb.Append("  FolderId: ").Append(FolderId).Append("\n");
            sb.Append("  ExternalUrl: ").Append(ExternalUrl).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  AddedDate: ").Append(AddedDate).Append("\n");
            sb.Append("  ExternalFileId: ").Append(ExternalFileId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
