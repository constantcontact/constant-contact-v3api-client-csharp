/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// EmailTestSendInput
    /// </summary>
    [DataContract(Name = "EmailTestSendInput")]
    public partial class EmailTestSendInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailTestSendInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailTestSendInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailTestSendInput" /> class.
        /// </summary>
        /// <param name="emailAddresses">The recipients of the test email as an array of email address strings. You can send a test email to up to 5 different email addresses at a time. (required).</param>
        /// <param name="personalMessage">A personal message for the recipients of the test email. Constant Contact displays this message before the email campaign activity content..</param>
        public EmailTestSendInput(List<string> emailAddresses = default(List<string>), string personalMessage = default(string))
        {
            // to ensure "emailAddresses" is required (not null)
            if (emailAddresses == null)
            {
                throw new ArgumentNullException("emailAddresses is a required property for EmailTestSendInput and cannot be null");
            }
            this.EmailAddresses = emailAddresses;
            this.PersonalMessage = personalMessage;
        }

        /// <summary>
        /// The recipients of the test email as an array of email address strings. You can send a test email to up to 5 different email addresses at a time.
        /// </summary>
        /// <value>The recipients of the test email as an array of email address strings. You can send a test email to up to 5 different email addresses at a time.</value>
        [DataMember(Name = "email_addresses", IsRequired = true, EmitDefaultValue = true)]
        public List<string> EmailAddresses { get; set; }

        /// <summary>
        /// A personal message for the recipients of the test email. Constant Contact displays this message before the email campaign activity content.
        /// </summary>
        /// <value>A personal message for the recipients of the test email. Constant Contact displays this message before the email campaign activity content.</value>
        /// <example>This is a test send of the email campaign activity.</example>
        [DataMember(Name = "personal_message", EmitDefaultValue = false)]
        public string PersonalMessage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailTestSendInput {\n");
            sb.Append("  EmailAddresses: ").Append(EmailAddresses).Append("\n");
            sb.Append("  PersonalMessage: ").Append(PersonalMessage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
