/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Custom fields allow Constant Contact users to add custom content to a contact that can be used to personalize emails in addition to the standard set of variables available for email personalization.
    /// </summary>
    [DataContract(Name = "CustomFieldResource")]
    public partial class CustomFieldResource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CustomFieldResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomFieldResource" /> class.
        /// </summary>
        /// <param name="label">The display name for the custom_field shown in the UI as free-form text (required).</param>
        /// <param name="type">Specifies the type of value the custom_field field accepts: string or date. (required).</param>
        public CustomFieldResource(string label = default(string), string type = default(string))
        {
            // to ensure "label" is required (not null)
            if (label == null)
            {
                throw new ArgumentNullException("label is a required property for CustomFieldResource and cannot be null");
            }
            this.Label = label;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for CustomFieldResource and cannot be null");
            }
            this.Type = type;
        }

        /// <summary>
        /// The custom_field&#39;s unique ID
        /// </summary>
        /// <value>The custom_field&#39;s unique ID</value>
        /// <example>1618ae62-4752-11e9-9c8a-fa163e6b01c1</example>
        [DataMember(Name = "custom_field_id", EmitDefaultValue = false)]
        public Guid CustomFieldId { get; private set; }

        /// <summary>
        /// Returns false as CustomFieldId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomFieldId()
        {
            return false;
        }
        /// <summary>
        /// The display name for the custom_field shown in the UI as free-form text
        /// </summary>
        /// <value>The display name for the custom_field shown in the UI as free-form text</value>
        /// <example>Vehicle make and model year</example>
        [DataMember(Name = "label", IsRequired = true, EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// Unique name for the custom_field constructed from the label by replacing blanks with underscores.
        /// </summary>
        /// <value>Unique name for the custom_field constructed from the label by replacing blanks with underscores.</value>
        /// <example>Vehicle_make_and_model_year</example>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Returns false as Name should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeName()
        {
            return false;
        }
        /// <summary>
        /// Specifies the type of value the custom_field field accepts: string or date.
        /// </summary>
        /// <value>Specifies the type of value the custom_field field accepts: string or date.</value>
        /// <example>string</example>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type { get; set; }

        /// <summary>
        /// System generated date and time that the resource was updated, in ISO-8601 format.
        /// </summary>
        /// <value>System generated date and time that the resource was updated, in ISO-8601 format.</value>
        /// <example>2016-01-23T13:48:44.108Z</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Date and time that the resource was created, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>Date and time that the resource was created, in ISO-8601 format. System generated.</value>
        /// <example>2016-03-03T10:53:04-05:00</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomFieldResource {\n");
            sb.Append("  CustomFieldId: ").Append(CustomFieldId).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Label (string) maxLength
            if (this.Label != null && this.Label.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Label, length must be less than 50.", new [] { "Label" });
            }

            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 50.", new [] { "Name" });
            }

            yield break;
        }
    }

}
