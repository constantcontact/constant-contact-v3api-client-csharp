/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// ContactsJsonImport
    /// </summary>
    [DataContract(Name = "ContactsJsonImport")]
    public partial class ContactsJsonImport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsJsonImport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactsJsonImport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsJsonImport" /> class.
        /// </summary>
        /// <param name="importData">An array containing the contacts to import. (required).</param>
        /// <param name="listIds">Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &lt;code&gt;list_id&lt;/code&gt; string values. (required).</param>
        /// <param name="smsPermissionToSend">Specifies if the contact gave &lt;code&gt;explicit&lt;/code&gt; SMS permission or if the SMS permission was not set (&lt;code&gt;not_set&lt;/code&gt;). If &#x60;explicit, the &lt;code&gt;sms_consent_date&lt;/code&gt; must be provided..</param>
        public ContactsJsonImport(List<CreateImportJSONActivityRequestImportDataInner> importData = default(List<CreateImportJSONActivityRequestImportDataInner>), List<Guid> listIds = default(List<Guid>), string smsPermissionToSend = default(string))
        {
            // to ensure "importData" is required (not null)
            if (importData == null)
            {
                throw new ArgumentNullException("importData is a required property for ContactsJsonImport and cannot be null");
            }
            this.ImportData = importData;
            // to ensure "listIds" is required (not null)
            if (listIds == null)
            {
                throw new ArgumentNullException("listIds is a required property for ContactsJsonImport and cannot be null");
            }
            this.ListIds = listIds;
            this.SmsPermissionToSend = smsPermissionToSend;
        }

        /// <summary>
        /// An array containing the contacts to import.
        /// </summary>
        /// <value>An array containing the contacts to import.</value>
        [DataMember(Name = "import_data", IsRequired = true, EmitDefaultValue = true)]
        public List<CreateImportJSONActivityRequestImportDataInner> ImportData { get; set; }

        /// <summary>
        /// Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &lt;code&gt;list_id&lt;/code&gt; string values.
        /// </summary>
        /// <value>Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &lt;code&gt;list_id&lt;/code&gt; string values.</value>
        [DataMember(Name = "list_ids", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> ListIds { get; set; }

        /// <summary>
        /// Specifies if the contact gave &lt;code&gt;explicit&lt;/code&gt; SMS permission or if the SMS permission was not set (&lt;code&gt;not_set&lt;/code&gt;). If &#x60;explicit, the &lt;code&gt;sms_consent_date&lt;/code&gt; must be provided.
        /// </summary>
        /// <value>Specifies if the contact gave &lt;code&gt;explicit&lt;/code&gt; SMS permission or if the SMS permission was not set (&lt;code&gt;not_set&lt;/code&gt;). If &#x60;explicit, the &lt;code&gt;sms_consent_date&lt;/code&gt; must be provided.</value>
        /// <example>explicit</example>
        [DataMember(Name = "sms_permission_to_send", EmitDefaultValue = false)]
        public string SmsPermissionToSend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactsJsonImport {\n");
            sb.Append("  ImportData: ").Append(ImportData).Append("\n");
            sb.Append("  ListIds: ").Append(ListIds).Append("\n");
            sb.Append("  SmsPermissionToSend: ").Append(SmsPermissionToSend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
