/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// The total number of times each unique contact interacted with a tracked email campaign activity.
    /// </summary>
    [DataContract(Name = "getEmailCampaignReport_200_response_bulk_email_campaign_summaries_inner_unique_counts")]
    public partial class GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts" /> class.
        /// </summary>
        /// <param name="sends">The total number of unique sends. (required).</param>
        /// <param name="opens">The total number of unique opens. (required).</param>
        /// <param name="clicks">The total number of unique clicks. (required).</param>
        /// <param name="forwards">The total number of unique forwards. (required).</param>
        /// <param name="optouts">The total number of unique optouts (unsubscribes). (required).</param>
        /// <param name="abuse">The total number of unique abuse count (spam). (required).</param>
        /// <param name="bounces">The total number of unique bounce count. (required).</param>
        /// <param name="notOpened">The total number of unique non-opens (required).</param>
        public GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts(int sends = default(int), int opens = default(int), int clicks = default(int), int forwards = default(int), int optouts = default(int), int abuse = default(int), int bounces = default(int), int notOpened = default(int))
        {
            this.Sends = sends;
            this.Opens = opens;
            this.Clicks = clicks;
            this.Forwards = forwards;
            this.Optouts = optouts;
            this.Abuse = abuse;
            this.Bounces = bounces;
            this.NotOpened = notOpened;
        }

        /// <summary>
        /// The total number of unique sends.
        /// </summary>
        /// <value>The total number of unique sends.</value>
        /// <example>3129</example>
        [DataMember(Name = "sends", IsRequired = true, EmitDefaultValue = true)]
        public int Sends { get; set; }

        /// <summary>
        /// The total number of unique opens.
        /// </summary>
        /// <value>The total number of unique opens.</value>
        /// <example>1672</example>
        [DataMember(Name = "opens", IsRequired = true, EmitDefaultValue = true)]
        public int Opens { get; set; }

        /// <summary>
        /// The total number of unique clicks.
        /// </summary>
        /// <value>The total number of unique clicks.</value>
        /// <example>256</example>
        [DataMember(Name = "clicks", IsRequired = true, EmitDefaultValue = true)]
        public int Clicks { get; set; }

        /// <summary>
        /// The total number of unique forwards.
        /// </summary>
        /// <value>The total number of unique forwards.</value>
        /// <example>21</example>
        [DataMember(Name = "forwards", IsRequired = true, EmitDefaultValue = true)]
        public int Forwards { get; set; }

        /// <summary>
        /// The total number of unique optouts (unsubscribes).
        /// </summary>
        /// <value>The total number of unique optouts (unsubscribes).</value>
        /// <example>3</example>
        [DataMember(Name = "optouts", IsRequired = true, EmitDefaultValue = true)]
        public int Optouts { get; set; }

        /// <summary>
        /// The total number of unique abuse count (spam).
        /// </summary>
        /// <value>The total number of unique abuse count (spam).</value>
        /// <example>1</example>
        [DataMember(Name = "abuse", IsRequired = true, EmitDefaultValue = true)]
        public int Abuse { get; set; }

        /// <summary>
        /// The total number of unique bounce count.
        /// </summary>
        /// <value>The total number of unique bounce count.</value>
        /// <example>210</example>
        [DataMember(Name = "bounces", IsRequired = true, EmitDefaultValue = true)]
        public int Bounces { get; set; }

        /// <summary>
        /// The total number of unique non-opens
        /// </summary>
        /// <value>The total number of unique non-opens</value>
        /// <example>1211</example>
        [DataMember(Name = "not_opened", IsRequired = true, EmitDefaultValue = true)]
        public int NotOpened { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEmailCampaignReport200ResponseBulkEmailCampaignSummariesInnerUniqueCounts {\n");
            sb.Append("  Sends: ").Append(Sends).Append("\n");
            sb.Append("  Opens: ").Append(Opens).Append("\n");
            sb.Append("  Clicks: ").Append(Clicks).Append("\n");
            sb.Append("  Forwards: ").Append(Forwards).Append("\n");
            sb.Append("  Optouts: ").Append(Optouts).Append("\n");
            sb.Append("  Abuse: ").Append(Abuse).Append("\n");
            sb.Append("  Bounces: ").Append(Bounces).Append("\n");
            sb.Append("  NotOpened: ").Append(NotOpened).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
