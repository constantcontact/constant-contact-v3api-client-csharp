/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// PhoneNumber
    /// </summary>
    [DataContract(Name = "PhoneNumber")]
    public partial class PhoneNumber : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumber" /> class.
        /// </summary>
        /// <param name="varPhoneNumber">The contact&#39;s phone number..</param>
        /// <param name="kind">Identifies the type of phone number; valid values are home, work, mobile, or other..</param>
        /// <param name="updateSource">Identifies who last updated the phone number; valid values are Contact or Account.</param>
        /// <param name="createSource">Identifies who added the phone number; valid values are Contact or Account..</param>
        public PhoneNumber(string varPhoneNumber = default(string), string kind = default(string), string updateSource = default(string), string createSource = default(string))
        {
            this.VarPhoneNumber = varPhoneNumber;
            this.Kind = kind;
            this.UpdateSource = updateSource;
            this.CreateSource = createSource;
        }

        /// <summary>
        /// Unique ID for the phone number
        /// </summary>
        /// <value>Unique ID for the phone number</value>
        /// <example>6eec28a6-1cf5-11ea-859f-fa163e56c9b0</example>
        [DataMember(Name = "phone_number_id", EmitDefaultValue = false)]
        public Guid PhoneNumberId { get; private set; }

        /// <summary>
        /// Returns false as PhoneNumberId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePhoneNumberId()
        {
            return false;
        }
        /// <summary>
        /// The contact&#39;s phone number.
        /// </summary>
        /// <value>The contact&#39;s phone number.</value>
        /// <example>+1-555-555-5555</example>
        [DataMember(Name = "phone_number", EmitDefaultValue = false)]
        public string VarPhoneNumber { get; set; }

        /// <summary>
        /// Identifies the type of phone number; valid values are home, work, mobile, or other.
        /// </summary>
        /// <value>Identifies the type of phone number; valid values are home, work, mobile, or other.</value>
        /// <example>home</example>
        [DataMember(Name = "kind", EmitDefaultValue = false)]
        public string Kind { get; set; }

        /// <summary>
        /// Date and time that the street address was created, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>Date and time that the street address was created, in ISO-8601 format. System generated.</value>
        /// <example>2016-03-03T10:53:04-05:00</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Date and time that the phone number was last updated, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>Date and time that the phone number was last updated, in ISO-8601 format. System generated.</value>
        /// <example>2016-03-03T10:56:29-05:00</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Identifies who last updated the phone number; valid values are Contact or Account
        /// </summary>
        /// <value>Identifies who last updated the phone number; valid values are Contact or Account</value>
        /// <example>Account</example>
        [DataMember(Name = "update_source", EmitDefaultValue = false)]
        public string UpdateSource { get; set; }

        /// <summary>
        /// Identifies who added the phone number; valid values are Contact or Account.
        /// </summary>
        /// <value>Identifies who added the phone number; valid values are Contact or Account.</value>
        /// <example>Account</example>
        [DataMember(Name = "create_source", EmitDefaultValue = false)]
        public string CreateSource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneNumber {\n");
            sb.Append("  PhoneNumberId: ").Append(PhoneNumberId).Append("\n");
            sb.Append("  VarPhoneNumber: ").Append(VarPhoneNumber).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UpdateSource: ").Append(UpdateSource).Append("\n");
            sb.Append("  CreateSource: ").Append(CreateSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // VarPhoneNumber (string) maxLength
            if (this.VarPhoneNumber != null && this.VarPhoneNumber.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for VarPhoneNumber, length must be less than 25.", new [] { "VarPhoneNumber" });
            }

            yield break;
        }
    }

}
