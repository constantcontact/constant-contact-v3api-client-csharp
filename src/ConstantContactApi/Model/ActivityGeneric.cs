/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// ActivityGeneric
    /// </summary>
    [DataContract(Name = "ActivityGeneric")]
    public partial class ActivityGeneric : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityGeneric" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ActivityGeneric() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityGeneric" /> class.
        /// </summary>
        /// <param name="activityId">The ID that uniquely identifies the activity. (required).</param>
        /// <param name="state">The processing state for the activity. (required).</param>
        /// <param name="status">status.</param>
        /// <param name="links">links.</param>
        public ActivityGeneric(string activityId = default(string), string state = default(string), DeleteTag202ResponseStatus status = default(DeleteTag202ResponseStatus), DeleteTag202ResponseLinks links = default(DeleteTag202ResponseLinks))
        {
            // to ensure "activityId" is required (not null)
            if (activityId == null)
            {
                throw new ArgumentNullException("activityId is a required property for ActivityGeneric and cannot be null");
            }
            this.ActivityId = activityId;
            // to ensure "state" is required (not null)
            if (state == null)
            {
                throw new ArgumentNullException("state is a required property for ActivityGeneric and cannot be null");
            }
            this.State = state;
            this.Status = status;
            this.Links = links;
        }

        /// <summary>
        /// The ID that uniquely identifies the activity.
        /// </summary>
        /// <value>The ID that uniquely identifies the activity.</value>
        /// <example>d44ac96c-24f3-11eb-8ae8-fa163e595123</example>
        [DataMember(Name = "activity_id", IsRequired = true, EmitDefaultValue = true)]
        public string ActivityId { get; set; }

        /// <summary>
        /// The processing state for the activity.
        /// </summary>
        /// <value>The processing state for the activity.</value>
        /// <example>completed</example>
        [DataMember(Name = "state", IsRequired = true, EmitDefaultValue = true)]
        public string State { get; set; }

        /// <summary>
        /// The system generated date and time that the resource was created, in ISO-8601 format.
        /// </summary>
        /// <value>The system generated date and time that the resource was created, in ISO-8601 format.</value>
        /// <example>2016-01-23T13:48:44.108Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// The system generated date and time that the resource was last updated, in ISO-8601 format.
        /// </summary>
        /// <value>The system generated date and time that the resource was last updated, in ISO-8601 format.</value>
        /// <example>2016-01-23T13:48:44.108Z</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// The percentage complete for the specified activity.
        /// </summary>
        /// <value>The percentage complete for the specified activity.</value>
        /// <example>25</example>
        [DataMember(Name = "percent_done", EmitDefaultValue = false)]
        public int PercentDone { get; private set; }

        /// <summary>
        /// Returns false as PercentDone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePercentDone()
        {
            return false;
        }
        /// <summary>
        /// An array of error messages if errors occurred for a specified activity. The system returns an empty array if no errors occur.
        /// </summary>
        /// <value>An array of error messages if errors occurred for a specified activity. The system returns an empty array if no errors occur.</value>
        [DataMember(Name = "activity_errors", EmitDefaultValue = false)]
        public List<DeleteTag202ResponseActivityErrorsInner> ActivityErrors { get; private set; }

        /// <summary>
        /// Returns false as ActivityErrors should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeActivityErrors()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public DeleteTag202ResponseStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public DeleteTag202ResponseLinks Links { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityGeneric {\n");
            sb.Append("  ActivityId: ").Append(ActivityId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  PercentDone: ").Append(PercentDone).Append("\n");
            sb.Append("  ActivityErrors: ").Append(ActivityErrors).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
