/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// GetAccountDetails200ResponsePhysicalAddress
    /// </summary>
    [DataContract(Name = "getAccountDetails_200_response_physical_address")]
    public partial class GetAccountDetails200ResponsePhysicalAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountDetails200ResponsePhysicalAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetAccountDetails200ResponsePhysicalAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetAccountDetails200ResponsePhysicalAddress" /> class.
        /// </summary>
        /// <param name="addressLine1">Line 1 of the organization&#39;s street address. (required).</param>
        /// <param name="addressLine2">Line 2 of the organization&#39;s street address..</param>
        /// <param name="addressLine3">Line 3 of the organization&#39;s street address..</param>
        /// <param name="city">The city where the organization is located. (required).</param>
        /// <param name="stateCode">The two letter ISO 3166-1 code for the organization&#39;s state and only used if the &lt;code&gt;country_code&lt;/code&gt; is &lt;code&gt;US&lt;/code&gt; or &lt;code&gt;CA&lt;/code&gt;. If not, exclude this property from the request body..</param>
        /// <param name="stateName">Use if the state where the organization is physically located is not in the United States or Canada. If  &lt;code&gt;country_code&lt;/code&gt; is  &lt;code&gt;US&lt;/code&gt; or &lt;code&gt;CA&lt;/code&gt;, exclude this property from the request body..</param>
        /// <param name="postalCode">The postal code address (ZIP code) of the organization. This property is required if the &lt;code&gt;state_code&lt;/code&gt; is &lt;code&gt;US&lt;/code&gt; or &lt;code&gt;CA&lt;/code&gt;, otherwise exclude this property from the request body..</param>
        /// <param name="countryCode">The two letter &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-1&#39; target&#x3D;&#39;_blank&#39;&gt;ISO 3166-1 code&lt;/a&gt; for the organization&#39;s country. (required).</param>
        public GetAccountDetails200ResponsePhysicalAddress(string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string city = default(string), string stateCode = default(string), string stateName = default(string), string postalCode = default(string), string countryCode = default(string))
        {
            // to ensure "addressLine1" is required (not null)
            if (addressLine1 == null)
            {
                throw new ArgumentNullException("addressLine1 is a required property for GetAccountDetails200ResponsePhysicalAddress and cannot be null");
            }
            this.AddressLine1 = addressLine1;
            // to ensure "city" is required (not null)
            if (city == null)
            {
                throw new ArgumentNullException("city is a required property for GetAccountDetails200ResponsePhysicalAddress and cannot be null");
            }
            this.City = city;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for GetAccountDetails200ResponsePhysicalAddress and cannot be null");
            }
            this.CountryCode = countryCode;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.StateCode = stateCode;
            this.StateName = stateName;
            this.PostalCode = postalCode;
        }

        /// <summary>
        /// Line 1 of the organization&#39;s street address.
        /// </summary>
        /// <value>Line 1 of the organization&#39;s street address.</value>
        /// <example>123 Maple Street</example>
        [DataMember(Name = "address_line1", IsRequired = true, EmitDefaultValue = true)]
        public string AddressLine1 { get; set; }

        /// <summary>
        /// Line 2 of the organization&#39;s street address.
        /// </summary>
        /// <value>Line 2 of the organization&#39;s street address.</value>
        /// <example>Unit 1</example>
        [DataMember(Name = "address_line2", EmitDefaultValue = false)]
        public string AddressLine2 { get; set; }

        /// <summary>
        /// Line 3 of the organization&#39;s street address.
        /// </summary>
        /// <value>Line 3 of the organization&#39;s street address.</value>
        /// <example>Apartment 234</example>
        [DataMember(Name = "address_line3", EmitDefaultValue = false)]
        public string AddressLine3 { get; set; }

        /// <summary>
        /// The city where the organization is located.
        /// </summary>
        /// <value>The city where the organization is located.</value>
        /// <example>Boston</example>
        [DataMember(Name = "city", IsRequired = true, EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// The two letter ISO 3166-1 code for the organization&#39;s state and only used if the &lt;code&gt;country_code&lt;/code&gt; is &lt;code&gt;US&lt;/code&gt; or &lt;code&gt;CA&lt;/code&gt;. If not, exclude this property from the request body.
        /// </summary>
        /// <value>The two letter ISO 3166-1 code for the organization&#39;s state and only used if the &lt;code&gt;country_code&lt;/code&gt; is &lt;code&gt;US&lt;/code&gt; or &lt;code&gt;CA&lt;/code&gt;. If not, exclude this property from the request body.</value>
        /// <example>MA</example>
        [DataMember(Name = "state_code", EmitDefaultValue = false)]
        public string StateCode { get; set; }

        /// <summary>
        /// Use if the state where the organization is physically located is not in the United States or Canada. If  &lt;code&gt;country_code&lt;/code&gt; is  &lt;code&gt;US&lt;/code&gt; or &lt;code&gt;CA&lt;/code&gt;, exclude this property from the request body.
        /// </summary>
        /// <value>Use if the state where the organization is physically located is not in the United States or Canada. If  &lt;code&gt;country_code&lt;/code&gt; is  &lt;code&gt;US&lt;/code&gt; or &lt;code&gt;CA&lt;/code&gt;, exclude this property from the request body.</value>
        /// <example>EXCLUDE if country_code is US.</example>
        [DataMember(Name = "state_name", EmitDefaultValue = false)]
        public string StateName { get; set; }

        /// <summary>
        /// The postal code address (ZIP code) of the organization. This property is required if the &lt;code&gt;state_code&lt;/code&gt; is &lt;code&gt;US&lt;/code&gt; or &lt;code&gt;CA&lt;/code&gt;, otherwise exclude this property from the request body.
        /// </summary>
        /// <value>The postal code address (ZIP code) of the organization. This property is required if the &lt;code&gt;state_code&lt;/code&gt; is &lt;code&gt;US&lt;/code&gt; or &lt;code&gt;CA&lt;/code&gt;, otherwise exclude this property from the request body.</value>
        /// <example>02451</example>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The two letter &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-1&#39; target&#x3D;&#39;_blank&#39;&gt;ISO 3166-1 code&lt;/a&gt; for the organization&#39;s country.
        /// </summary>
        /// <value>The two letter &lt;a href&#x3D;&#39;https://en.wikipedia.org/wiki/ISO_3166-1&#39; target&#x3D;&#39;_blank&#39;&gt;ISO 3166-1 code&lt;/a&gt; for the organization&#39;s country.</value>
        /// <example>US</example>
        [DataMember(Name = "country_code", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetAccountDetails200ResponsePhysicalAddress {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  StateCode: ").Append(StateCode).Append("\n");
            sb.Append("  StateName: ").Append(StateName).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AddressLine1 (string) maxLength
            if (this.AddressLine1 != null && this.AddressLine1.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine1, length must be less than 80.", new [] { "AddressLine1" });
            }

            // AddressLine1 (string) minLength
            if (this.AddressLine1 != null && this.AddressLine1.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine1, length must be greater than 1.", new [] { "AddressLine1" });
            }

            // AddressLine2 (string) maxLength
            if (this.AddressLine2 != null && this.AddressLine2.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine2, length must be less than 80.", new [] { "AddressLine2" });
            }

            // AddressLine2 (string) minLength
            if (this.AddressLine2 != null && this.AddressLine2.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine2, length must be greater than 1.", new [] { "AddressLine2" });
            }

            // AddressLine3 (string) maxLength
            if (this.AddressLine3 != null && this.AddressLine3.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine3, length must be less than 80.", new [] { "AddressLine3" });
            }

            // AddressLine3 (string) minLength
            if (this.AddressLine3 != null && this.AddressLine3.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for AddressLine3, length must be greater than 1.", new [] { "AddressLine3" });
            }

            // StateCode (string) maxLength
            if (this.StateCode != null && this.StateCode.Length > 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StateCode, length must be less than 2.", new [] { "StateCode" });
            }

            yield break;
        }
    }

}
