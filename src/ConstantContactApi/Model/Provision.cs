/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Provision
    /// </summary>
    [DataContract(Name = "Provision")]
    public partial class Provision : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Provision" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Provision() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Provision" /> class.
        /// </summary>
        /// <param name="contactEmail">A valid email address to associate with the client account. (required).</param>
        /// <param name="contactPhone">The contact phone number to associate with the client account..</param>
        /// <param name="countryCode">The two-letter country code (ISO 3166-1 code) that specifies the country in which the client resides. (required).</param>
        /// <param name="organizationName">The name of organization that identifies the client account..</param>
        /// <param name="organizationPhone">The organization phone number. To set the organization phone number using the user interface, select &lt;b&gt;My Settings&lt;/b&gt; and in the &lt;b&gt;Organization Information&lt;/b&gt; section, select &lt;b&gt;Edit Organization Information&lt;/b&gt;..</param>
        /// <param name="stateCode">The two-letter state code that represents the US state (&lt;code&gt;country_code&lt;/code&gt; is &lt;code&gt;US&lt;/code&gt; ) or Canadian province (&lt;code&gt;country_code&lt;/code&gt; is &lt;code&gt;CA&lt;/code&gt;) where the client&#39;s organization is physically located. Leave the &lt;code&gt;state_code&lt;/code&gt; blank for non-US states and Canadian provinces. (required).</param>
        /// <param name="timeZoneId">The offical time zone to use to represent the physical location associated with the client account..</param>
        /// <param name="website">The client&#39;s website URL. Specifying the website URL eliminates the need for clients to provide that information. Requires a valid URL starting with http:// or https://..</param>
        /// <param name="loginName">A unique login name to associate with the client account. The name must only contain alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39;@&#39;,&#39;.&#39;,&#39;+&#39;.  (required).</param>
        /// <param name="password">Required if not using Single Sign On (SSO) or external authenticator. The password to associate with the client account. Passwords must be at least 8 characters and no more than 80 characters in length. Passwords can contain alphabetical letters (A-Z) and (a-z), numbers (0-9), special characters (! @ # $ etc.) and spaces. Passwords should not contain any part of your username and cannot be the same as your last password, or be listed on an industry database; we check for easily guessed or compromised passwords. Your new password is not returned in the response payload for security reasons. If using SSO authentication, use &lt;code&gt;idp_provider&lt;/code&gt; and &lt;code&gt;idp_provider_id&lt;/code&gt; instead of &lt;code&gt;password&lt;/code&gt;..</param>
        /// <param name="firstName">The client account owner&#39;s first name..</param>
        /// <param name="lastName">The client account owner&#39;s last name..</param>
        /// <param name="partnerAccountId">The unique client account identifier that partners define and use for billing and reporting purposes..</param>
        /// <param name="billingLocale">The currency to use when billing the client account. Valid values are: &lt;code&gt;en_US&lt;/code&gt; (default, US Dollars) or &lt;code&gt;en_GB&lt;/code&gt; (British Pounds)..</param>
        /// <param name="managedSiteOwner">By default, if the client account is setup as a managed account &lt;code&gt;managed_site_owner&lt;/code&gt; is automatically set to &lt;code&gt;true&lt;/code&gt; and attempting to override the setting with &lt;code&gt;false&lt;/code&gt; is ignored. This helps to avoid getting an account into an unknown state..</param>
        /// <param name="enableSingleBilling">If a partner account is setup to allow for single billing and the &lt;code&gt;managed_site_owner&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, use this property to enable the single billing feature for the client account. See your account manager for more information..</param>
        /// <param name="gdprOptOut">When creating accounts for users who have opted-out of any marketing communications, set  the &lt;code&gt; gdpr_opt_out&lt;/code&gt;  to &lt;code&gt;true&lt;/code&gt;  so that Constant Contact does not send any marketing communications to the account..</param>
        /// <param name="externalId">The ID used to uniquely identify the client account for the external authenticator. Do not use the &lt;code&gt;password&lt;/code&gt; property when using an external authenticator..</param>
        /// <param name="externalProvider">The name of the provider who externally authenticates this customer. For example, PayPal or Yahoo. Do not use the &lt;code&gt;password&lt;/code&gt; property when using an external authenticator..</param>
        public Provision(string contactEmail = default(string), string contactPhone = default(string), string countryCode = default(string), string organizationName = default(string), string organizationPhone = default(string), string stateCode = default(string), string timeZoneId = default(string), string website = default(string), string loginName = default(string), string password = default(string), string firstName = default(string), string lastName = default(string), string partnerAccountId = default(string), string billingLocale = default(string), bool managedSiteOwner = default(bool), bool enableSingleBilling = default(bool), bool gdprOptOut = default(bool), string externalId = default(string), string externalProvider = default(string))
        {
            // to ensure "contactEmail" is required (not null)
            if (contactEmail == null)
            {
                throw new ArgumentNullException("contactEmail is a required property for Provision and cannot be null");
            }
            this.ContactEmail = contactEmail;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for Provision and cannot be null");
            }
            this.CountryCode = countryCode;
            // to ensure "stateCode" is required (not null)
            if (stateCode == null)
            {
                throw new ArgumentNullException("stateCode is a required property for Provision and cannot be null");
            }
            this.StateCode = stateCode;
            // to ensure "loginName" is required (not null)
            if (loginName == null)
            {
                throw new ArgumentNullException("loginName is a required property for Provision and cannot be null");
            }
            this.LoginName = loginName;
            this.ContactPhone = contactPhone;
            this.OrganizationName = organizationName;
            this.OrganizationPhone = organizationPhone;
            this.TimeZoneId = timeZoneId;
            this.Website = website;
            this.Password = password;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.PartnerAccountId = partnerAccountId;
            this.BillingLocale = billingLocale;
            this.ManagedSiteOwner = managedSiteOwner;
            this.EnableSingleBilling = enableSingleBilling;
            this.GdprOptOut = gdprOptOut;
            this.ExternalId = externalId;
            this.ExternalProvider = externalProvider;
        }

        /// <summary>
        /// A valid email address to associate with the client account.
        /// </summary>
        /// <value>A valid email address to associate with the client account.</value>
        /// <example>clients_email@gmail.com</example>
        [DataMember(Name = "contact_email", IsRequired = true, EmitDefaultValue = true)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// The contact phone number to associate with the client account.
        /// </summary>
        /// <value>The contact phone number to associate with the client account.</value>
        /// <example>588-768-6868</example>
        [DataMember(Name = "contact_phone", EmitDefaultValue = false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// The two-letter country code (ISO 3166-1 code) that specifies the country in which the client resides.
        /// </summary>
        /// <value>The two-letter country code (ISO 3166-1 code) that specifies the country in which the client resides.</value>
        /// <example>US</example>
        [DataMember(Name = "country_code", IsRequired = true, EmitDefaultValue = true)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The name of organization that identifies the client account.
        /// </summary>
        /// <value>The name of organization that identifies the client account.</value>
        /// <example>Hanks Fresh Fruit Delivery</example>
        [DataMember(Name = "organization_name", EmitDefaultValue = false)]
        public string OrganizationName { get; set; }

        /// <summary>
        /// The organization phone number. To set the organization phone number using the user interface, select &lt;b&gt;My Settings&lt;/b&gt; and in the &lt;b&gt;Organization Information&lt;/b&gt; section, select &lt;b&gt;Edit Organization Information&lt;/b&gt;.
        /// </summary>
        /// <value>The organization phone number. To set the organization phone number using the user interface, select &lt;b&gt;My Settings&lt;/b&gt; and in the &lt;b&gt;Organization Information&lt;/b&gt; section, select &lt;b&gt;Edit Organization Information&lt;/b&gt;.</value>
        /// <example>401-244-1000</example>
        [DataMember(Name = "organization_phone", EmitDefaultValue = false)]
        public string OrganizationPhone { get; set; }

        /// <summary>
        /// The two-letter state code that represents the US state (&lt;code&gt;country_code&lt;/code&gt; is &lt;code&gt;US&lt;/code&gt; ) or Canadian province (&lt;code&gt;country_code&lt;/code&gt; is &lt;code&gt;CA&lt;/code&gt;) where the client&#39;s organization is physically located. Leave the &lt;code&gt;state_code&lt;/code&gt; blank for non-US states and Canadian provinces.
        /// </summary>
        /// <value>The two-letter state code that represents the US state (&lt;code&gt;country_code&lt;/code&gt; is &lt;code&gt;US&lt;/code&gt; ) or Canadian province (&lt;code&gt;country_code&lt;/code&gt; is &lt;code&gt;CA&lt;/code&gt;) where the client&#39;s organization is physically located. Leave the &lt;code&gt;state_code&lt;/code&gt; blank for non-US states and Canadian provinces.</value>
        /// <example>MA</example>
        [DataMember(Name = "state_code", IsRequired = true, EmitDefaultValue = true)]
        public string StateCode { get; set; }

        /// <summary>
        /// The offical time zone to use to represent the physical location associated with the client account.
        /// </summary>
        /// <value>The offical time zone to use to represent the physical location associated with the client account.</value>
        /// <example>US/Eastern</example>
        [DataMember(Name = "time_zone_id", EmitDefaultValue = false)]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// The client&#39;s website URL. Specifying the website URL eliminates the need for clients to provide that information. Requires a valid URL starting with http:// or https://.
        /// </summary>
        /// <value>The client&#39;s website URL. Specifying the website URL eliminates the need for clients to provide that information. Requires a valid URL starting with http:// or https://.</value>
        /// <example>http://your.company.website</example>
        [DataMember(Name = "website", EmitDefaultValue = false)]
        public string Website { get; set; }

        /// <summary>
        /// A unique login name to associate with the client account. The name must only contain alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39;@&#39;,&#39;.&#39;,&#39;+&#39;. 
        /// </summary>
        /// <value>A unique login name to associate with the client account. The name must only contain alphanumeric characters and &#39;-&#39;, &#39;_&#39;, &#39;@&#39;,&#39;.&#39;,&#39;+&#39;. </value>
        /// <example>hank_smith</example>
        [DataMember(Name = "login_name", IsRequired = true, EmitDefaultValue = true)]
        public string LoginName { get; set; }

        /// <summary>
        /// Required if not using Single Sign On (SSO) or external authenticator. The password to associate with the client account. Passwords must be at least 8 characters and no more than 80 characters in length. Passwords can contain alphabetical letters (A-Z) and (a-z), numbers (0-9), special characters (! @ # $ etc.) and spaces. Passwords should not contain any part of your username and cannot be the same as your last password, or be listed on an industry database; we check for easily guessed or compromised passwords. Your new password is not returned in the response payload for security reasons. If using SSO authentication, use &lt;code&gt;idp_provider&lt;/code&gt; and &lt;code&gt;idp_provider_id&lt;/code&gt; instead of &lt;code&gt;password&lt;/code&gt;.
        /// </summary>
        /// <value>Required if not using Single Sign On (SSO) or external authenticator. The password to associate with the client account. Passwords must be at least 8 characters and no more than 80 characters in length. Passwords can contain alphabetical letters (A-Z) and (a-z), numbers (0-9), special characters (! @ # $ etc.) and spaces. Passwords should not contain any part of your username and cannot be the same as your last password, or be listed on an industry database; we check for easily guessed or compromised passwords. Your new password is not returned in the response payload for security reasons. If using SSO authentication, use &lt;code&gt;idp_provider&lt;/code&gt; and &lt;code&gt;idp_provider_id&lt;/code&gt; instead of &lt;code&gt;password&lt;/code&gt;.</value>
        /// <example>123456789</example>
        [DataMember(Name = "password", EmitDefaultValue = false)]
        public string Password { get; set; }

        /// <summary>
        /// The client account owner&#39;s first name.
        /// </summary>
        /// <value>The client account owner&#39;s first name.</value>
        /// <example>Hank</example>
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The client account owner&#39;s last name.
        /// </summary>
        /// <value>The client account owner&#39;s last name.</value>
        /// <example>Smith</example>
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The unique client account identifier that partners define and use for billing and reporting purposes.
        /// </summary>
        /// <value>The unique client account identifier that partners define and use for billing and reporting purposes.</value>
        /// <example>partner1234</example>
        [DataMember(Name = "partner_account_id", EmitDefaultValue = false)]
        public string PartnerAccountId { get; set; }

        /// <summary>
        /// The currency to use when billing the client account. Valid values are: &lt;code&gt;en_US&lt;/code&gt; (default, US Dollars) or &lt;code&gt;en_GB&lt;/code&gt; (British Pounds).
        /// </summary>
        /// <value>The currency to use when billing the client account. Valid values are: &lt;code&gt;en_US&lt;/code&gt; (default, US Dollars) or &lt;code&gt;en_GB&lt;/code&gt; (British Pounds).</value>
        /// <example>en_US.</example>
        [DataMember(Name = "billing_locale", EmitDefaultValue = false)]
        public string BillingLocale { get; set; }

        /// <summary>
        /// By default, if the client account is setup as a managed account &lt;code&gt;managed_site_owner&lt;/code&gt; is automatically set to &lt;code&gt;true&lt;/code&gt; and attempting to override the setting with &lt;code&gt;false&lt;/code&gt; is ignored. This helps to avoid getting an account into an unknown state.
        /// </summary>
        /// <value>By default, if the client account is setup as a managed account &lt;code&gt;managed_site_owner&lt;/code&gt; is automatically set to &lt;code&gt;true&lt;/code&gt; and attempting to override the setting with &lt;code&gt;false&lt;/code&gt; is ignored. This helps to avoid getting an account into an unknown state.</value>
        /// <example>true</example>
        [DataMember(Name = "managed_site_owner", EmitDefaultValue = true)]
        public bool ManagedSiteOwner { get; set; }

        /// <summary>
        /// If a partner account is setup to allow for single billing and the &lt;code&gt;managed_site_owner&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, use this property to enable the single billing feature for the client account. See your account manager for more information.
        /// </summary>
        /// <value>If a partner account is setup to allow for single billing and the &lt;code&gt;managed_site_owner&lt;/code&gt; property is set to &lt;code&gt;true&lt;/code&gt;, use this property to enable the single billing feature for the client account. See your account manager for more information.</value>
        /// <example>true</example>
        [DataMember(Name = "enable_single_billing", EmitDefaultValue = true)]
        public bool EnableSingleBilling { get; set; }

        /// <summary>
        /// When creating accounts for users who have opted-out of any marketing communications, set  the &lt;code&gt; gdpr_opt_out&lt;/code&gt;  to &lt;code&gt;true&lt;/code&gt;  so that Constant Contact does not send any marketing communications to the account.
        /// </summary>
        /// <value>When creating accounts for users who have opted-out of any marketing communications, set  the &lt;code&gt; gdpr_opt_out&lt;/code&gt;  to &lt;code&gt;true&lt;/code&gt;  so that Constant Contact does not send any marketing communications to the account.</value>
        /// <example>true</example>
        [DataMember(Name = "gdpr_opt_out", EmitDefaultValue = true)]
        public bool GdprOptOut { get; set; }

        /// <summary>
        /// The ID used to uniquely identify the client account for the external authenticator. Do not use the &lt;code&gt;password&lt;/code&gt; property when using an external authenticator.
        /// </summary>
        /// <value>The ID used to uniquely identify the client account for the external authenticator. Do not use the &lt;code&gt;password&lt;/code&gt; property when using an external authenticator.</value>
        /// <example>123456789123456789</example>
        [DataMember(Name = "external_id", EmitDefaultValue = false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The name of the provider who externally authenticates this customer. For example, PayPal or Yahoo. Do not use the &lt;code&gt;password&lt;/code&gt; property when using an external authenticator.
        /// </summary>
        /// <value>The name of the provider who externally authenticates this customer. For example, PayPal or Yahoo. Do not use the &lt;code&gt;password&lt;/code&gt; property when using an external authenticator.</value>
        /// <example>Yahoo</example>
        [DataMember(Name = "external_provider", EmitDefaultValue = false)]
        public string ExternalProvider { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Provision {\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  OrganizationName: ").Append(OrganizationName).Append("\n");
            sb.Append("  OrganizationPhone: ").Append(OrganizationPhone).Append("\n");
            sb.Append("  StateCode: ").Append(StateCode).Append("\n");
            sb.Append("  TimeZoneId: ").Append(TimeZoneId).Append("\n");
            sb.Append("  Website: ").Append(Website).Append("\n");
            sb.Append("  LoginName: ").Append(LoginName).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  PartnerAccountId: ").Append(PartnerAccountId).Append("\n");
            sb.Append("  BillingLocale: ").Append(BillingLocale).Append("\n");
            sb.Append("  ManagedSiteOwner: ").Append(ManagedSiteOwner).Append("\n");
            sb.Append("  EnableSingleBilling: ").Append(EnableSingleBilling).Append("\n");
            sb.Append("  GdprOptOut: ").Append(GdprOptOut).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ExternalProvider: ").Append(ExternalProvider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // ContactEmail (string) maxLength
            if (this.ContactEmail != null && this.ContactEmail.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactEmail, length must be less than 80.", new [] { "ContactEmail" });
            }

            // ContactPhone (string) maxLength
            if (this.ContactPhone != null && this.ContactPhone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactPhone, length must be less than 25.", new [] { "ContactPhone" });
            }

            // ContactPhone (string) minLength
            if (this.ContactPhone != null && this.ContactPhone.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ContactPhone, length must be greater than 5.", new [] { "ContactPhone" });
            }

            // CountryCode (string) maxLength
            if (this.CountryCode != null && this.CountryCode.Length > 3)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be less than 3.", new [] { "CountryCode" });
            }

            // CountryCode (string) minLength
            if (this.CountryCode != null && this.CountryCode.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CountryCode, length must be greater than 2.", new [] { "CountryCode" });
            }

            // OrganizationName (string) maxLength
            if (this.OrganizationName != null && this.OrganizationName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrganizationName, length must be less than 50.", new [] { "OrganizationName" });
            }

            // OrganizationName (string) minLength
            if (this.OrganizationName != null && this.OrganizationName.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrganizationName, length must be greater than 1.", new [] { "OrganizationName" });
            }

            // OrganizationPhone (string) maxLength
            if (this.OrganizationPhone != null && this.OrganizationPhone.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrganizationPhone, length must be less than 25.", new [] { "OrganizationPhone" });
            }

            // OrganizationPhone (string) minLength
            if (this.OrganizationPhone != null && this.OrganizationPhone.Length < 5)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrganizationPhone, length must be greater than 5.", new [] { "OrganizationPhone" });
            }

            // LoginName (string) maxLength
            if (this.LoginName != null && this.LoginName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginName, length must be less than 50.", new [] { "LoginName" });
            }

            // LoginName (string) minLength
            if (this.LoginName != null && this.LoginName.Length < 6)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LoginName, length must be greater than 6.", new [] { "LoginName" });
            }

            // Password (string) maxLength
            if (this.Password != null && this.Password.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be less than 80.", new [] { "Password" });
            }

            // Password (string) minLength
            if (this.Password != null && this.Password.Length < 8)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Password, length must be greater than 8.", new [] { "Password" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 80.", new [] { "FirstName" });
            }

            // FirstName (string) minLength
            if (this.FirstName != null && this.FirstName.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be greater than 2.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 80.", new [] { "LastName" });
            }

            // LastName (string) minLength
            if (this.LastName != null && this.LastName.Length < 2)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be greater than 2.", new [] { "LastName" });
            }

            // PartnerAccountId (string) maxLength
            if (this.PartnerAccountId != null && this.PartnerAccountId.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PartnerAccountId, length must be less than 80.", new [] { "PartnerAccountId" });
            }

            // ExternalId (string) maxLength
            if (this.ExternalId != null && this.ExternalId.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalId, length must be less than 255.", new [] { "ExternalId" });
            }

            // ExternalProvider (string) maxLength
            if (this.ExternalProvider != null && this.ExternalProvider.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ExternalProvider, length must be less than 80.", new [] { "ExternalProvider" });
            }

            yield break;
        }
    }

}
