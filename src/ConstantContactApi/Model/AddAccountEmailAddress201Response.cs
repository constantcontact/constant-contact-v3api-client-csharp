/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// AddAccountEmailAddress201Response
    /// </summary>
    [DataContract(Name = "addAccountEmailAddress_201_response")]
    public partial class AddAccountEmailAddress201Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddAccountEmailAddress201Response" /> class.
        /// </summary>
        /// <param name="emailAddress">An email address associated with a Constant Contact account owner..</param>
        /// <param name="emailId">The unique ID for an email address in a Constant Contact account..</param>
        /// <param name="confirmStatus">The confirmation status of the account email address. When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. You can use any account email address with a &lt;code&gt;CONFIRMED&lt;/code&gt; status to create an email campaign. .</param>
        public AddAccountEmailAddress201Response(string emailAddress = default(string), long emailId = default(long), string confirmStatus = default(string))
        {
            this.EmailAddress = emailAddress;
            this.EmailId = emailId;
            this.ConfirmStatus = confirmStatus;
        }

        /// <summary>
        /// An email address associated with a Constant Contact account owner.
        /// </summary>
        /// <value>An email address associated with a Constant Contact account owner.</value>
        /// <example>dlang@example.com</example>
        [DataMember(Name = "email_address", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The unique ID for an email address in a Constant Contact account.
        /// </summary>
        /// <value>The unique ID for an email address in a Constant Contact account.</value>
        /// <example>2</example>
        [DataMember(Name = "email_id", EmitDefaultValue = false)]
        public long EmailId { get; set; }

        /// <summary>
        /// The confirmation status of the account email address. When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. You can use any account email address with a &lt;code&gt;CONFIRMED&lt;/code&gt; status to create an email campaign. 
        /// </summary>
        /// <value>The confirmation status of the account email address. When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. You can use any account email address with a &lt;code&gt;CONFIRMED&lt;/code&gt; status to create an email campaign. </value>
        /// <example>UNCONFIRMED</example>
        [DataMember(Name = "confirm_status", EmitDefaultValue = false)]
        public string ConfirmStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddAccountEmailAddress201Response {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  EmailId: ").Append(EmailId).Append("\n");
            sb.Append("  ConfirmStatus: ").Append(ConfirmStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmailAddress (string) maxLength
            if (this.EmailAddress != null && this.EmailAddress.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be less than 80.", new [] { "EmailAddress" });
            }

            // EmailId (long) minimum
            if (this.EmailId < (long)1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailId, must be a value greater than or equal to 1.", new [] { "EmailId" });
            }

            yield break;
        }
    }

}
