/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// GetABTestEmailCampaign200Response
    /// </summary>
    [DataContract(Name = "getABTestEmailCampaign_200_response")]
    public partial class GetABTestEmailCampaign200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetABTestEmailCampaign200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetABTestEmailCampaign200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetABTestEmailCampaign200Response" /> class.
        /// </summary>
        /// <param name="alternativeSubject">The alternate email subject line to use for A/B testing. (required).</param>
        /// <param name="testSize">The percentage of contact recipients to participate in the A/B Test. For example, if the value is 30, then 30% of contacts will receive the email campaign with subject line A, and 30% of contacts will receive the email campaign with subject line B. Valid values include &lt;code&gt;5&lt;/code&gt; to &lt;code&gt;50&lt;/code&gt; percent. Currently, A/B tests support subject line only. (required).</param>
        /// <param name="winnerWaitDuration">The number of hours Constant Contact waits after the A/B test is sent before determining the winning subject line. The winner is the subject line with the highest number of contact opens. Valid values include &lt;code&gt;6&lt;/code&gt;, &lt;code&gt;12&lt;/code&gt;, &lt;code&gt;24&lt;/code&gt;, and &lt;code&gt;48&lt;/code&gt;. After the winner is determined, Constant Contact automatically sends the email campaign with the winning subject line to all the remaining contacts, which did not participate in the A/B test. (required).</param>
        public GetABTestEmailCampaign200Response(string alternativeSubject = default(string), int testSize = default(int), int winnerWaitDuration = default(int))
        {
            // to ensure "alternativeSubject" is required (not null)
            if (alternativeSubject == null)
            {
                throw new ArgumentNullException("alternativeSubject is a required property for GetABTestEmailCampaign200Response and cannot be null");
            }
            this.AlternativeSubject = alternativeSubject;
            this.TestSize = testSize;
            this.WinnerWaitDuration = winnerWaitDuration;
        }

        /// <summary>
        /// The alternate email subject line to use for A/B testing.
        /// </summary>
        /// <value>The alternate email subject line to use for A/B testing.</value>
        /// <example>Reminder: Our Biggest Sale of the Year is Coming Soon!</example>
        [DataMember(Name = "alternative_subject", IsRequired = true, EmitDefaultValue = true)]
        public string AlternativeSubject { get; set; }

        /// <summary>
        /// The percentage of contact recipients to participate in the A/B Test. For example, if the value is 30, then 30% of contacts will receive the email campaign with subject line A, and 30% of contacts will receive the email campaign with subject line B. Valid values include &lt;code&gt;5&lt;/code&gt; to &lt;code&gt;50&lt;/code&gt; percent. Currently, A/B tests support subject line only.
        /// </summary>
        /// <value>The percentage of contact recipients to participate in the A/B Test. For example, if the value is 30, then 30% of contacts will receive the email campaign with subject line A, and 30% of contacts will receive the email campaign with subject line B. Valid values include &lt;code&gt;5&lt;/code&gt; to &lt;code&gt;50&lt;/code&gt; percent. Currently, A/B tests support subject line only.</value>
        /// <example>30</example>
        [DataMember(Name = "test_size", IsRequired = true, EmitDefaultValue = true)]
        public int TestSize { get; set; }

        /// <summary>
        /// The number of hours Constant Contact waits after the A/B test is sent before determining the winning subject line. The winner is the subject line with the highest number of contact opens. Valid values include &lt;code&gt;6&lt;/code&gt;, &lt;code&gt;12&lt;/code&gt;, &lt;code&gt;24&lt;/code&gt;, and &lt;code&gt;48&lt;/code&gt;. After the winner is determined, Constant Contact automatically sends the email campaign with the winning subject line to all the remaining contacts, which did not participate in the A/B test.
        /// </summary>
        /// <value>The number of hours Constant Contact waits after the A/B test is sent before determining the winning subject line. The winner is the subject line with the highest number of contact opens. Valid values include &lt;code&gt;6&lt;/code&gt;, &lt;code&gt;12&lt;/code&gt;, &lt;code&gt;24&lt;/code&gt;, and &lt;code&gt;48&lt;/code&gt;. After the winner is determined, Constant Contact automatically sends the email campaign with the winning subject line to all the remaining contacts, which did not participate in the A/B test.</value>
        /// <example>24</example>
        [DataMember(Name = "winner_wait_duration", IsRequired = true, EmitDefaultValue = true)]
        public int WinnerWaitDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetABTestEmailCampaign200Response {\n");
            sb.Append("  AlternativeSubject: ").Append(AlternativeSubject).Append("\n");
            sb.Append("  TestSize: ").Append(TestSize).Append("\n");
            sb.Append("  WinnerWaitDuration: ").Append(WinnerWaitDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
