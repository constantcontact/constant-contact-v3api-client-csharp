/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// DeviceFlowResponse
    /// </summary>
    [DataContract(Name = "DeviceFlowResponse")]
    public partial class DeviceFlowResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceFlowResponse" /> class.
        /// </summary>
        /// <param name="deviceCode">Code you can exchange for an access token..</param>
        /// <param name="userCode">Code assigned to the Constant Contact user granting access to your application..</param>
        /// <param name="verificationUri">URL used by the Constant Contact user to grant access to your application..</param>
        /// <param name="verificationUriComplete">Verification url with the user code already appended..</param>
        /// <param name="expiresIn">Time in seconds before the device and user codes expire..</param>
        /// <param name="interval">Polling interval used when identifying if the Constant Contact user has granted access to your application..</param>
        public DeviceFlowResponse(string deviceCode = default(string), string userCode = default(string), string verificationUri = default(string), string verificationUriComplete = default(string), int expiresIn = default(int), int interval = default(int))
        {
            this.DeviceCode = deviceCode;
            this.UserCode = userCode;
            this.VerificationUri = verificationUri;
            this.VerificationUriComplete = verificationUriComplete;
            this.ExpiresIn = expiresIn;
            this.Interval = interval;
        }

        /// <summary>
        /// Code you can exchange for an access token.
        /// </summary>
        /// <value>Code you can exchange for an access token.</value>
        [DataMember(Name = "device_code", EmitDefaultValue = false)]
        public string DeviceCode { get; set; }

        /// <summary>
        /// Code assigned to the Constant Contact user granting access to your application.
        /// </summary>
        /// <value>Code assigned to the Constant Contact user granting access to your application.</value>
        [DataMember(Name = "user_code", EmitDefaultValue = false)]
        public string UserCode { get; set; }

        /// <summary>
        /// URL used by the Constant Contact user to grant access to your application.
        /// </summary>
        /// <value>URL used by the Constant Contact user to grant access to your application.</value>
        [DataMember(Name = "verification_uri", EmitDefaultValue = false)]
        public string VerificationUri { get; set; }

        /// <summary>
        /// Verification url with the user code already appended.
        /// </summary>
        /// <value>Verification url with the user code already appended.</value>
        [DataMember(Name = "verification_uri_complete", EmitDefaultValue = false)]
        public string VerificationUriComplete { get; set; }

        /// <summary>
        /// Time in seconds before the device and user codes expire.
        /// </summary>
        /// <value>Time in seconds before the device and user codes expire.</value>
        [DataMember(Name = "expires_in", EmitDefaultValue = false)]
        public int ExpiresIn { get; set; }

        /// <summary>
        /// Polling interval used when identifying if the Constant Contact user has granted access to your application.
        /// </summary>
        /// <value>Polling interval used when identifying if the Constant Contact user has granted access to your application.</value>
        [DataMember(Name = "interval", EmitDefaultValue = false)]
        public int Interval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceFlowResponse {\n");
            sb.Append("  DeviceCode: ").Append(DeviceCode).Append("\n");
            sb.Append("  UserCode: ").Append(UserCode).Append("\n");
            sb.Append("  VerificationUri: ").Append(VerificationUri).Append("\n");
            sb.Append("  VerificationUriComplete: ").Append(VerificationUriComplete).Append("\n");
            sb.Append("  ExpiresIn: ").Append(ExpiresIn).Append("\n");
            sb.Append("  Interval: ").Append(Interval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
