/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner
    /// </summary>
    [DataContract(Name = "createOrUpdateContact_request_sms_channel_sms_channel_consents_inner")]
    public partial class CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner" /> class.
        /// </summary>
        /// <param name="smsConsentPermission">The current consent status of the SMS Channel. (required).</param>
        /// <param name="consentType">The type of consent provided. (required).</param>
        /// <param name="consentMediumType">A code representing where the consent was retrieved. (required).</param>
        /// <param name="consentMediumUrl">The URL for which the consent was gathered, such as a landing page. (required).</param>
        /// <param name="consentMediumDetails">Additional information for the consent (required).</param>
        /// <param name="advertisedFrequency">The numeric component used to indicate how often to send advertising. For example, &lt;code&gt;1&lt;/code&gt; indicates once. Use with &lt;code&gt;advertised_internal&lt;/code&gt; property to indicate when on the calender to send it. For example, to send once (&lt;code&gt;1&lt;/code&gt;) daily, weekly, or monthly..</param>
        /// <param name="advertisedInterval">The calender interval used to indicate when advertising is sent. For example &lt;code&gt;weekly&lt;/code&gt;..</param>
        public CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner(string smsConsentPermission = default(string), string consentType = default(string), string consentMediumType = default(string), string consentMediumUrl = default(string), string consentMediumDetails = default(string), int advertisedFrequency = default(int), string advertisedInterval = default(string))
        {
            // to ensure "smsConsentPermission" is required (not null)
            if (smsConsentPermission == null)
            {
                throw new ArgumentNullException("smsConsentPermission is a required property for CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner and cannot be null");
            }
            this.SmsConsentPermission = smsConsentPermission;
            // to ensure "consentType" is required (not null)
            if (consentType == null)
            {
                throw new ArgumentNullException("consentType is a required property for CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner and cannot be null");
            }
            this.ConsentType = consentType;
            // to ensure "consentMediumType" is required (not null)
            if (consentMediumType == null)
            {
                throw new ArgumentNullException("consentMediumType is a required property for CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner and cannot be null");
            }
            this.ConsentMediumType = consentMediumType;
            // to ensure "consentMediumUrl" is required (not null)
            if (consentMediumUrl == null)
            {
                throw new ArgumentNullException("consentMediumUrl is a required property for CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner and cannot be null");
            }
            this.ConsentMediumUrl = consentMediumUrl;
            // to ensure "consentMediumDetails" is required (not null)
            if (consentMediumDetails == null)
            {
                throw new ArgumentNullException("consentMediumDetails is a required property for CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner and cannot be null");
            }
            this.ConsentMediumDetails = consentMediumDetails;
            this.AdvertisedFrequency = advertisedFrequency;
            this.AdvertisedInterval = advertisedInterval;
        }

        /// <summary>
        /// The current consent status of the SMS Channel.
        /// </summary>
        /// <value>The current consent status of the SMS Channel.</value>
        /// <example>pending_confirmation</example>
        [DataMember(Name = "sms_consent_permission", IsRequired = true, EmitDefaultValue = true)]
        public string SmsConsentPermission { get; set; }

        /// <summary>
        /// The type of consent provided.
        /// </summary>
        /// <value>The type of consent provided.</value>
        /// <example>promotional_sms</example>
        [DataMember(Name = "consent_type", IsRequired = true, EmitDefaultValue = true)]
        public string ConsentType { get; set; }

        /// <summary>
        /// A code representing where the consent was retrieved.
        /// </summary>
        /// <value>A code representing where the consent was retrieved.</value>
        /// <example>LF</example>
        [DataMember(Name = "consent_medium_type", IsRequired = true, EmitDefaultValue = true)]
        public string ConsentMediumType { get; set; }

        /// <summary>
        /// The URL for which the consent was gathered, such as a landing page.
        /// </summary>
        /// <value>The URL for which the consent was gathered, such as a landing page.</value>
        /// <example>https://lp.constantcontactpages.com/su/iPtuMuh</example>
        [DataMember(Name = "consent_medium_url", IsRequired = true, EmitDefaultValue = true)]
        public string ConsentMediumUrl { get; set; }

        /// <summary>
        /// Additional information for the consent
        /// </summary>
        /// <value>Additional information for the consent</value>
        /// <example>Contact used our landing page to consent to SMS.</example>
        [DataMember(Name = "consent_medium_details", IsRequired = true, EmitDefaultValue = true)]
        public string ConsentMediumDetails { get; set; }

        /// <summary>
        /// The numeric component used to indicate how often to send advertising. For example, &lt;code&gt;1&lt;/code&gt; indicates once. Use with &lt;code&gt;advertised_internal&lt;/code&gt; property to indicate when on the calender to send it. For example, to send once (&lt;code&gt;1&lt;/code&gt;) daily, weekly, or monthly.
        /// </summary>
        /// <value>The numeric component used to indicate how often to send advertising. For example, &lt;code&gt;1&lt;/code&gt; indicates once. Use with &lt;code&gt;advertised_internal&lt;/code&gt; property to indicate when on the calender to send it. For example, to send once (&lt;code&gt;1&lt;/code&gt;) daily, weekly, or monthly.</value>
        /// <example>1</example>
        [DataMember(Name = "advertised_frequency", EmitDefaultValue = false)]
        public int AdvertisedFrequency { get; set; }

        /// <summary>
        /// The calender interval used to indicate when advertising is sent. For example &lt;code&gt;weekly&lt;/code&gt;.
        /// </summary>
        /// <value>The calender interval used to indicate when advertising is sent. For example &lt;code&gt;weekly&lt;/code&gt;.</value>
        /// <example>weekly</example>
        [DataMember(Name = "advertised_interval", EmitDefaultValue = false)]
        public string AdvertisedInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateOrUpdateContactRequestSmsChannelSmsChannelConsentsInner {\n");
            sb.Append("  SmsConsentPermission: ").Append(SmsConsentPermission).Append("\n");
            sb.Append("  ConsentType: ").Append(ConsentType).Append("\n");
            sb.Append("  ConsentMediumType: ").Append(ConsentMediumType).Append("\n");
            sb.Append("  ConsentMediumUrl: ").Append(ConsentMediumUrl).Append("\n");
            sb.Append("  ConsentMediumDetails: ").Append(ConsentMediumDetails).Append("\n");
            sb.Append("  AdvertisedFrequency: ").Append(AdvertisedFrequency).Append("\n");
            sb.Append("  AdvertisedInterval: ").Append(AdvertisedInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
