/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// ContactCreateOrUpdateInput
    /// </summary>
    [DataContract(Name = "ContactCreateOrUpdateInput")]
    public partial class ContactCreateOrUpdateInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactCreateOrUpdateInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactCreateOrUpdateInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactCreateOrUpdateInput" /> class.
        /// </summary>
        /// <param name="emailAddress">The email address for the contact. This method identifies each unique contact using their email address. If the email address exists in the account, this method updates the contact. If the email address is new, this method creates a new contact..</param>
        /// <param name="firstName">The first name of the contact..</param>
        /// <param name="lastName">The last name of the contact..</param>
        /// <param name="jobTitle">The job title of the contact..</param>
        /// <param name="companyName">The name of the company where the contact works..</param>
        /// <param name="phoneNumber">The phone number for the contact..</param>
        /// <param name="listMemberships">The contact lists you want to add the contact to as an array of up to 50 contact &lt;code&gt;list_id&lt;/code&gt; values. You must include at least one &lt;code&gt;list_id&lt;/code&gt;. (required).</param>
        /// <param name="customFields">The custom fields you want to add to the contact as an array of up to 50 custom field objects..</param>
        /// <param name="anniversary">The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY. .</param>
        /// <param name="birthdayMonth">The month value for the contact&#39;s birthday. Valid values are from 1 through 12. The &lt;code&gt;birthday_month&lt;/code&gt; property is required if you use &lt;code&gt;birthday_day&lt;/code&gt;..</param>
        /// <param name="birthdayDay">The day value for the contact&#39;s birthday. Valid values are from 1 through 31. The &lt;code&gt;birthday_day&lt;/code&gt; property is required if you use &lt;code&gt;birthday_month&lt;/code&gt;..</param>
        /// <param name="streetAddress">streetAddress.</param>
        /// <param name="smsChannel">smsChannel.</param>
        public ContactCreateOrUpdateInput(string emailAddress = default(string), string firstName = default(string), string lastName = default(string), string jobTitle = default(string), string companyName = default(string), string phoneNumber = default(string), List<Guid> listMemberships = default(List<Guid>), List<CreateOrUpdateContactRequestCustomFieldsInner> customFields = default(List<CreateOrUpdateContactRequestCustomFieldsInner>), string anniversary = default(string), int birthdayMonth = default(int), int birthdayDay = default(int), CreateOrUpdateContactRequestStreetAddress streetAddress = default(CreateOrUpdateContactRequestStreetAddress), CreateOrUpdateContactRequestSmsChannel smsChannel = default(CreateOrUpdateContactRequestSmsChannel))
        {
            // to ensure "listMemberships" is required (not null)
            if (listMemberships == null)
            {
                throw new ArgumentNullException("listMemberships is a required property for ContactCreateOrUpdateInput and cannot be null");
            }
            this.ListMemberships = listMemberships;
            this.EmailAddress = emailAddress;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.JobTitle = jobTitle;
            this.CompanyName = companyName;
            this.PhoneNumber = phoneNumber;
            this.CustomFields = customFields;
            this.Anniversary = anniversary;
            this.BirthdayMonth = birthdayMonth;
            this.BirthdayDay = birthdayDay;
            this.StreetAddress = streetAddress;
            this.SmsChannel = smsChannel;
        }

        /// <summary>
        /// The email address for the contact. This method identifies each unique contact using their email address. If the email address exists in the account, this method updates the contact. If the email address is new, this method creates a new contact.
        /// </summary>
        /// <value>The email address for the contact. This method identifies each unique contact using their email address. If the email address exists in the account, this method updates the contact. If the email address is new, this method creates a new contact.</value>
        /// <example>jdodge@example.com</example>
        [DataMember(Name = "email_address", EmitDefaultValue = false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// The first name of the contact.
        /// </summary>
        /// <value>The first name of the contact.</value>
        /// <example>Jake</example>
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The last name of the contact.
        /// </summary>
        /// <value>The last name of the contact.</value>
        /// <example>Dodge</example>
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The job title of the contact.
        /// </summary>
        /// <value>The job title of the contact.</value>
        /// <example>Musician</example>
        [DataMember(Name = "job_title", EmitDefaultValue = false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// The name of the company where the contact works.
        /// </summary>
        /// <value>The name of the company where the contact works.</value>
        /// <example>Acme Corp.</example>
        [DataMember(Name = "company_name", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// The phone number for the contact.
        /// </summary>
        /// <value>The phone number for the contact.</value>
        /// <example>(555) 555-1212</example>
        [DataMember(Name = "phone_number", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// The contact lists you want to add the contact to as an array of up to 50 contact &lt;code&gt;list_id&lt;/code&gt; values. You must include at least one &lt;code&gt;list_id&lt;/code&gt;.
        /// </summary>
        /// <value>The contact lists you want to add the contact to as an array of up to 50 contact &lt;code&gt;list_id&lt;/code&gt; values. You must include at least one &lt;code&gt;list_id&lt;/code&gt;.</value>
        [DataMember(Name = "list_memberships", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> ListMemberships { get; set; }

        /// <summary>
        /// The custom fields you want to add to the contact as an array of up to 50 custom field objects.
        /// </summary>
        /// <value>The custom fields you want to add to the contact as an array of up to 50 custom field objects.</value>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public List<CreateOrUpdateContactRequestCustomFieldsInner> CustomFields { get; set; }

        /// <summary>
        /// The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY. 
        /// </summary>
        /// <value>The anniversary date for the contact. For example, this value could be the date when the contact first became a customer of an organization in Constant Contact. Valid date formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY. </value>
        /// <example>11-15-2006</example>
        [DataMember(Name = "anniversary", EmitDefaultValue = false)]
        public string Anniversary { get; set; }

        /// <summary>
        /// The month value for the contact&#39;s birthday. Valid values are from 1 through 12. The &lt;code&gt;birthday_month&lt;/code&gt; property is required if you use &lt;code&gt;birthday_day&lt;/code&gt;.
        /// </summary>
        /// <value>The month value for the contact&#39;s birthday. Valid values are from 1 through 12. The &lt;code&gt;birthday_month&lt;/code&gt; property is required if you use &lt;code&gt;birthday_day&lt;/code&gt;.</value>
        /// <example>11</example>
        [DataMember(Name = "birthday_month", EmitDefaultValue = false)]
        public int BirthdayMonth { get; set; }

        /// <summary>
        /// The day value for the contact&#39;s birthday. Valid values are from 1 through 31. The &lt;code&gt;birthday_day&lt;/code&gt; property is required if you use &lt;code&gt;birthday_month&lt;/code&gt;.
        /// </summary>
        /// <value>The day value for the contact&#39;s birthday. Valid values are from 1 through 31. The &lt;code&gt;birthday_day&lt;/code&gt; property is required if you use &lt;code&gt;birthday_month&lt;/code&gt;.</value>
        /// <example>24</example>
        [DataMember(Name = "birthday_day", EmitDefaultValue = false)]
        public int BirthdayDay { get; set; }

        /// <summary>
        /// Gets or Sets StreetAddress
        /// </summary>
        [DataMember(Name = "street_address", EmitDefaultValue = false)]
        public CreateOrUpdateContactRequestStreetAddress StreetAddress { get; set; }

        /// <summary>
        /// Gets or Sets SmsChannel
        /// </summary>
        [DataMember(Name = "sms_channel", EmitDefaultValue = false)]
        public CreateOrUpdateContactRequestSmsChannel SmsChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactCreateOrUpdateInput {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  ListMemberships: ").Append(ListMemberships).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Anniversary: ").Append(Anniversary).Append("\n");
            sb.Append("  BirthdayMonth: ").Append(BirthdayMonth).Append("\n");
            sb.Append("  BirthdayDay: ").Append(BirthdayDay).Append("\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  SmsChannel: ").Append(SmsChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // EmailAddress (string) maxLength
            if (this.EmailAddress != null && this.EmailAddress.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for EmailAddress, length must be less than 50.", new [] { "EmailAddress" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 50.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 50.", new [] { "LastName" });
            }

            // JobTitle (string) maxLength
            if (this.JobTitle != null && this.JobTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobTitle, length must be less than 50.", new [] { "JobTitle" });
            }

            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be less than 50.", new [] { "CompanyName" });
            }

            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be less than 25.", new [] { "PhoneNumber" });
            }

            yield break;
        }
    }

}
