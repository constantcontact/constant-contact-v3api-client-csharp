/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Key-value pairs of campaign activity statistics.
    /// </summary>
    [DataContract(Name = "getEmailCampaignActivityReport_200_response_results_inner_stats")]
    public partial class GetEmailCampaignActivityReport200ResponseResultsInnerStats : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEmailCampaignActivityReport200ResponseResultsInnerStats" /> class.
        /// </summary>
        /// <param name="emBounces">Number of unique email bounces..</param>
        /// <param name="emClicks">Number of unique recipients who clicked any link in the email..</param>
        /// <param name="emClicksAll">Total number of non-unique email clicks..</param>
        /// <param name="emClicksAllComputer">Number of non-unique email clicks on a standard desktop or laptop computer..</param>
        /// <param name="emClicksAllMobile">Number of non-unique email clicks on a mobile phone or similar small mobile device (e.g. iPhone)..</param>
        /// <param name="emClicksAllTablet">Number of non-unique email clicks on a small tablet type computer (e.g. iPad)..</param>
        /// <param name="emClicksAllOther">Number of non-unique email clicks on an unknown device (e.g. Game Console or Wearable)..</param>
        /// <param name="emClicksAllNone">Number of non-unique email clicks for which the device type was not captured. This will account for any clicks prior to when device type was collected and stored..</param>
        /// <param name="emForwards">Number of unique recipients who forwarded the email using the forward to a friend feature (not available for all types of emails)..</param>
        /// <param name="emNotOpened">Number of unique recipients who did not open the email. This is calculated as follows: &lt;code&gt;em_not_opened&lt;/code&gt; is equal to &lt;code&gt;em_sends - em_opens - em_bounces&lt;/code&gt;. This value is reported as zero if the calculation results in a negative value..</param>
        /// <param name="emOpens">Number of unique recipients who opened the email..</param>
        /// <param name="emOpensAll">Total number of non-unique email opens..</param>
        /// <param name="emOpensAllComputer">Number of non-unique email opens on a standard desktop or laptop computer..</param>
        /// <param name="emOpensAllMobile">Number of non-unique email opens on a mobile phone or similar small mobile device (e.g. iPhone)..</param>
        /// <param name="emOpensAllTablet">Number of non-unique email opens on a small tablet type computer (e.g. iPad)..</param>
        /// <param name="emOpensAllOther">Number of non-unique email opens on an unknown device (e.g. Game Console or Wearable)..</param>
        /// <param name="emOpensAllNone">Number of non-unique email opens for which the device type was not captured. This will account for any opens prior to when device type was collected and stored..</param>
        /// <param name="emOptouts">Number of unique recipients who unsubscribed due to this email..</param>
        /// <param name="emSends">Number of unique email sends..</param>
        /// <param name="emAbuse">Number of abuse (spam) complaints received..</param>
        /// <param name="emBouncesBlocked">Unique number bounced because as blocked by the receiving system..</param>
        /// <param name="emBouncesMailboxFull">Unique number that bounced back with a mailbox full message..</param>
        /// <param name="emBouncesNonexistentAddress">Unique number that bounced as a non-existent address..</param>
        /// <param name="emBouncesOther">Unique number that bounced without an identifiable cause..</param>
        /// <param name="emBouncesSuspended">Unique number that bounced as suspended. Email address bounces as suspended when multiple non-existent bounces have been received for the same address..</param>
        /// <param name="emBouncesUndeliverable">Unique number that bounced as undeliverable..</param>
        /// <param name="emBouncesVacation">Unique number that bounced back with a vacation or out of office autoreply..</param>
        public GetEmailCampaignActivityReport200ResponseResultsInnerStats(int emBounces = default(int), int emClicks = default(int), int emClicksAll = default(int), int emClicksAllComputer = default(int), int emClicksAllMobile = default(int), int emClicksAllTablet = default(int), int emClicksAllOther = default(int), int emClicksAllNone = default(int), int emForwards = default(int), int emNotOpened = default(int), int emOpens = default(int), int emOpensAll = default(int), int emOpensAllComputer = default(int), int emOpensAllMobile = default(int), int emOpensAllTablet = default(int), int emOpensAllOther = default(int), int emOpensAllNone = default(int), int emOptouts = default(int), int emSends = default(int), int emAbuse = default(int), int emBouncesBlocked = default(int), int emBouncesMailboxFull = default(int), int emBouncesNonexistentAddress = default(int), int emBouncesOther = default(int), int emBouncesSuspended = default(int), int emBouncesUndeliverable = default(int), int emBouncesVacation = default(int))
        {
            this.EmBounces = emBounces;
            this.EmClicks = emClicks;
            this.EmClicksAll = emClicksAll;
            this.EmClicksAllComputer = emClicksAllComputer;
            this.EmClicksAllMobile = emClicksAllMobile;
            this.EmClicksAllTablet = emClicksAllTablet;
            this.EmClicksAllOther = emClicksAllOther;
            this.EmClicksAllNone = emClicksAllNone;
            this.EmForwards = emForwards;
            this.EmNotOpened = emNotOpened;
            this.EmOpens = emOpens;
            this.EmOpensAll = emOpensAll;
            this.EmOpensAllComputer = emOpensAllComputer;
            this.EmOpensAllMobile = emOpensAllMobile;
            this.EmOpensAllTablet = emOpensAllTablet;
            this.EmOpensAllOther = emOpensAllOther;
            this.EmOpensAllNone = emOpensAllNone;
            this.EmOptouts = emOptouts;
            this.EmSends = emSends;
            this.EmAbuse = emAbuse;
            this.EmBouncesBlocked = emBouncesBlocked;
            this.EmBouncesMailboxFull = emBouncesMailboxFull;
            this.EmBouncesNonexistentAddress = emBouncesNonexistentAddress;
            this.EmBouncesOther = emBouncesOther;
            this.EmBouncesSuspended = emBouncesSuspended;
            this.EmBouncesUndeliverable = emBouncesUndeliverable;
            this.EmBouncesVacation = emBouncesVacation;
        }

        /// <summary>
        /// Number of unique email bounces.
        /// </summary>
        /// <value>Number of unique email bounces.</value>
        /// <example>10</example>
        [DataMember(Name = "em_bounces", EmitDefaultValue = false)]
        public int EmBounces { get; set; }

        /// <summary>
        /// Number of unique recipients who clicked any link in the email.
        /// </summary>
        /// <value>Number of unique recipients who clicked any link in the email.</value>
        /// <example>280</example>
        [DataMember(Name = "em_clicks", EmitDefaultValue = false)]
        public int EmClicks { get; set; }

        /// <summary>
        /// Total number of non-unique email clicks.
        /// </summary>
        /// <value>Total number of non-unique email clicks.</value>
        /// <example>387</example>
        [DataMember(Name = "em_clicks_all", EmitDefaultValue = false)]
        public int EmClicksAll { get; set; }

        /// <summary>
        /// Number of non-unique email clicks on a standard desktop or laptop computer.
        /// </summary>
        /// <value>Number of non-unique email clicks on a standard desktop or laptop computer.</value>
        /// <example>123</example>
        [DataMember(Name = "em_clicks_all_computer", EmitDefaultValue = false)]
        public int EmClicksAllComputer { get; set; }

        /// <summary>
        /// Number of non-unique email clicks on a mobile phone or similar small mobile device (e.g. iPhone).
        /// </summary>
        /// <value>Number of non-unique email clicks on a mobile phone or similar small mobile device (e.g. iPhone).</value>
        /// <example>211</example>
        [DataMember(Name = "em_clicks_all_mobile", EmitDefaultValue = false)]
        public int EmClicksAllMobile { get; set; }

        /// <summary>
        /// Number of non-unique email clicks on a small tablet type computer (e.g. iPad).
        /// </summary>
        /// <value>Number of non-unique email clicks on a small tablet type computer (e.g. iPad).</value>
        /// <example>85</example>
        [DataMember(Name = "em_clicks_all_tablet", EmitDefaultValue = false)]
        public int EmClicksAllTablet { get; set; }

        /// <summary>
        /// Number of non-unique email clicks on an unknown device (e.g. Game Console or Wearable).
        /// </summary>
        /// <value>Number of non-unique email clicks on an unknown device (e.g. Game Console or Wearable).</value>
        /// <example>4</example>
        [DataMember(Name = "em_clicks_all_other", EmitDefaultValue = false)]
        public int EmClicksAllOther { get; set; }

        /// <summary>
        /// Number of non-unique email clicks for which the device type was not captured. This will account for any clicks prior to when device type was collected and stored.
        /// </summary>
        /// <value>Number of non-unique email clicks for which the device type was not captured. This will account for any clicks prior to when device type was collected and stored.</value>
        /// <example>2</example>
        [DataMember(Name = "em_clicks_all_none", EmitDefaultValue = false)]
        public int EmClicksAllNone { get; set; }

        /// <summary>
        /// Number of unique recipients who forwarded the email using the forward to a friend feature (not available for all types of emails).
        /// </summary>
        /// <value>Number of unique recipients who forwarded the email using the forward to a friend feature (not available for all types of emails).</value>
        /// <example>39</example>
        [DataMember(Name = "em_forwards", EmitDefaultValue = false)]
        public int EmForwards { get; set; }

        /// <summary>
        /// Number of unique recipients who did not open the email. This is calculated as follows: &lt;code&gt;em_not_opened&lt;/code&gt; is equal to &lt;code&gt;em_sends - em_opens - em_bounces&lt;/code&gt;. This value is reported as zero if the calculation results in a negative value.
        /// </summary>
        /// <value>Number of unique recipients who did not open the email. This is calculated as follows: &lt;code&gt;em_not_opened&lt;/code&gt; is equal to &lt;code&gt;em_sends - em_opens - em_bounces&lt;/code&gt;. This value is reported as zero if the calculation results in a negative value.</value>
        /// <example>25</example>
        [DataMember(Name = "em_not_opened", EmitDefaultValue = false)]
        public int EmNotOpened { get; set; }

        /// <summary>
        /// Number of unique recipients who opened the email.
        /// </summary>
        /// <value>Number of unique recipients who opened the email.</value>
        /// <example>220</example>
        [DataMember(Name = "em_opens", EmitDefaultValue = false)]
        public int EmOpens { get; set; }

        /// <summary>
        /// Total number of non-unique email opens.
        /// </summary>
        /// <value>Total number of non-unique email opens.</value>
        /// <example>399</example>
        [DataMember(Name = "em_opens_all", EmitDefaultValue = false)]
        public int EmOpensAll { get; set; }

        /// <summary>
        /// Number of non-unique email opens on a standard desktop or laptop computer.
        /// </summary>
        /// <value>Number of non-unique email opens on a standard desktop or laptop computer.</value>
        /// <example>65</example>
        [DataMember(Name = "em_opens_all_computer", EmitDefaultValue = false)]
        public int EmOpensAllComputer { get; set; }

        /// <summary>
        /// Number of non-unique email opens on a mobile phone or similar small mobile device (e.g. iPhone).
        /// </summary>
        /// <value>Number of non-unique email opens on a mobile phone or similar small mobile device (e.g. iPhone).</value>
        /// <example>270</example>
        [DataMember(Name = "em_opens_all_mobile", EmitDefaultValue = false)]
        public int EmOpensAllMobile { get; set; }

        /// <summary>
        /// Number of non-unique email opens on a small tablet type computer (e.g. iPad).
        /// </summary>
        /// <value>Number of non-unique email opens on a small tablet type computer (e.g. iPad).</value>
        /// <example>199</example>
        [DataMember(Name = "em_opens_all_tablet", EmitDefaultValue = false)]
        public int EmOpensAllTablet { get; set; }

        /// <summary>
        /// Number of non-unique email opens on an unknown device (e.g. Game Console or Wearable).
        /// </summary>
        /// <value>Number of non-unique email opens on an unknown device (e.g. Game Console or Wearable).</value>
        /// <example>10</example>
        [DataMember(Name = "em_opens_all_other", EmitDefaultValue = false)]
        public int EmOpensAllOther { get; set; }

        /// <summary>
        /// Number of non-unique email opens for which the device type was not captured. This will account for any opens prior to when device type was collected and stored.
        /// </summary>
        /// <value>Number of non-unique email opens for which the device type was not captured. This will account for any opens prior to when device type was collected and stored.</value>
        /// <example>2</example>
        [DataMember(Name = "em_opens_all_none", EmitDefaultValue = false)]
        public int EmOpensAllNone { get; set; }

        /// <summary>
        /// Number of unique recipients who unsubscribed due to this email.
        /// </summary>
        /// <value>Number of unique recipients who unsubscribed due to this email.</value>
        /// <example>2</example>
        [DataMember(Name = "em_optouts", EmitDefaultValue = false)]
        public int EmOptouts { get; set; }

        /// <summary>
        /// Number of unique email sends.
        /// </summary>
        /// <value>Number of unique email sends.</value>
        /// <example>308</example>
        [DataMember(Name = "em_sends", EmitDefaultValue = false)]
        public int EmSends { get; set; }

        /// <summary>
        /// Number of abuse (spam) complaints received.
        /// </summary>
        /// <value>Number of abuse (spam) complaints received.</value>
        /// <example>1</example>
        [DataMember(Name = "em_abuse", EmitDefaultValue = false)]
        public int EmAbuse { get; set; }

        /// <summary>
        /// Unique number bounced because as blocked by the receiving system.
        /// </summary>
        /// <value>Unique number bounced because as blocked by the receiving system.</value>
        /// <example>1</example>
        [DataMember(Name = "em_bounces_blocked", EmitDefaultValue = false)]
        public int EmBouncesBlocked { get; set; }

        /// <summary>
        /// Unique number that bounced back with a mailbox full message.
        /// </summary>
        /// <value>Unique number that bounced back with a mailbox full message.</value>
        /// <example>2</example>
        [DataMember(Name = "em_bounces_mailbox_full", EmitDefaultValue = false)]
        public int EmBouncesMailboxFull { get; set; }

        /// <summary>
        /// Unique number that bounced as a non-existent address.
        /// </summary>
        /// <value>Unique number that bounced as a non-existent address.</value>
        /// <example>3</example>
        [DataMember(Name = "em_bounces_nonexistent_address", EmitDefaultValue = false)]
        public int EmBouncesNonexistentAddress { get; set; }

        /// <summary>
        /// Unique number that bounced without an identifiable cause.
        /// </summary>
        /// <value>Unique number that bounced without an identifiable cause.</value>
        /// <example>2</example>
        [DataMember(Name = "em_bounces_other", EmitDefaultValue = false)]
        public int EmBouncesOther { get; set; }

        /// <summary>
        /// Unique number that bounced as suspended. Email address bounces as suspended when multiple non-existent bounces have been received for the same address.
        /// </summary>
        /// <value>Unique number that bounced as suspended. Email address bounces as suspended when multiple non-existent bounces have been received for the same address.</value>
        /// <example>1</example>
        [DataMember(Name = "em_bounces_suspended", EmitDefaultValue = false)]
        public int EmBouncesSuspended { get; set; }

        /// <summary>
        /// Unique number that bounced as undeliverable.
        /// </summary>
        /// <value>Unique number that bounced as undeliverable.</value>
        /// <example>19</example>
        [DataMember(Name = "em_bounces_undeliverable", EmitDefaultValue = false)]
        public int EmBouncesUndeliverable { get; set; }

        /// <summary>
        /// Unique number that bounced back with a vacation or out of office autoreply.
        /// </summary>
        /// <value>Unique number that bounced back with a vacation or out of office autoreply.</value>
        /// <example>2</example>
        [DataMember(Name = "em_bounces_vacation", EmitDefaultValue = false)]
        public int EmBouncesVacation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetEmailCampaignActivityReport200ResponseResultsInnerStats {\n");
            sb.Append("  EmBounces: ").Append(EmBounces).Append("\n");
            sb.Append("  EmClicks: ").Append(EmClicks).Append("\n");
            sb.Append("  EmClicksAll: ").Append(EmClicksAll).Append("\n");
            sb.Append("  EmClicksAllComputer: ").Append(EmClicksAllComputer).Append("\n");
            sb.Append("  EmClicksAllMobile: ").Append(EmClicksAllMobile).Append("\n");
            sb.Append("  EmClicksAllTablet: ").Append(EmClicksAllTablet).Append("\n");
            sb.Append("  EmClicksAllOther: ").Append(EmClicksAllOther).Append("\n");
            sb.Append("  EmClicksAllNone: ").Append(EmClicksAllNone).Append("\n");
            sb.Append("  EmForwards: ").Append(EmForwards).Append("\n");
            sb.Append("  EmNotOpened: ").Append(EmNotOpened).Append("\n");
            sb.Append("  EmOpens: ").Append(EmOpens).Append("\n");
            sb.Append("  EmOpensAll: ").Append(EmOpensAll).Append("\n");
            sb.Append("  EmOpensAllComputer: ").Append(EmOpensAllComputer).Append("\n");
            sb.Append("  EmOpensAllMobile: ").Append(EmOpensAllMobile).Append("\n");
            sb.Append("  EmOpensAllTablet: ").Append(EmOpensAllTablet).Append("\n");
            sb.Append("  EmOpensAllOther: ").Append(EmOpensAllOther).Append("\n");
            sb.Append("  EmOpensAllNone: ").Append(EmOpensAllNone).Append("\n");
            sb.Append("  EmOptouts: ").Append(EmOptouts).Append("\n");
            sb.Append("  EmSends: ").Append(EmSends).Append("\n");
            sb.Append("  EmAbuse: ").Append(EmAbuse).Append("\n");
            sb.Append("  EmBouncesBlocked: ").Append(EmBouncesBlocked).Append("\n");
            sb.Append("  EmBouncesMailboxFull: ").Append(EmBouncesMailboxFull).Append("\n");
            sb.Append("  EmBouncesNonexistentAddress: ").Append(EmBouncesNonexistentAddress).Append("\n");
            sb.Append("  EmBouncesOther: ").Append(EmBouncesOther).Append("\n");
            sb.Append("  EmBouncesSuspended: ").Append(EmBouncesSuspended).Append("\n");
            sb.Append("  EmBouncesUndeliverable: ").Append(EmBouncesUndeliverable).Append("\n");
            sb.Append("  EmBouncesVacation: ").Append(EmBouncesVacation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
