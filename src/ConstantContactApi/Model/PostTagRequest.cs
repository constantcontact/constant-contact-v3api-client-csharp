/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// PostTagRequest
    /// </summary>
    [DataContract(Name = "postTag_request")]
    public partial class PostTagRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostTagRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PostTagRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PostTagRequest" /> class.
        /// </summary>
        /// <param name="name">Specify a unique name to use to identify the tag. Tag names must be at least one character in length and not more than 255 characters. (required).</param>
        /// <param name="tagSource">The source used to identify the contacts to tag..</param>
        public PostTagRequest(string name = default(string), string tagSource = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for PostTagRequest and cannot be null");
            }
            this.Name = name;
            this.TagSource = tagSource;
        }

        /// <summary>
        /// Specify a unique name to use to identify the tag. Tag names must be at least one character in length and not more than 255 characters.
        /// </summary>
        /// <value>Specify a unique name to use to identify the tag. Tag names must be at least one character in length and not more than 255 characters.</value>
        /// <example>Silver card member</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The source used to identify the contacts to tag.
        /// </summary>
        /// <value>The source used to identify the contacts to tag.</value>
        /// <example>ESTY</example>
        [DataMember(Name = "tag_source", EmitDefaultValue = false)]
        public string TagSource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PostTagRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TagSource: ").Append(TagSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 255.", new [] { "Name" });
            }

            // Name (string) minLength
            if (this.Name != null && this.Name.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be greater than 1.", new [] { "Name" });
            }

            yield break;
        }
    }

}
