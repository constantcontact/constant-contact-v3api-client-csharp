/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// AccountSuspension
    /// </summary>
    [DataContract(Name = "AccountSuspension")]
    public partial class AccountSuspension : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountSuspension" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountSuspension() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountSuspension" /> class.
        /// </summary>
        /// <param name="suspendPlanId">Suspended plan group id. (required).</param>
        /// <param name="suspendPlanGroupId">The suspended plan group id. (required).</param>
        /// <param name="suspendDate">The date when the customer will start being suspended. If omitted defaults to the current date and time and suspends the account at the next billing cycle..</param>
        /// <param name="suspendReasonId">The reason the customer is suspended..</param>
        /// <param name="suspendSubreasonId">The subreason why the customer is suspended..</param>
        /// <param name="suspendComment">Comment field for user suspension..</param>
        /// <param name="suspendEstimatedReactivationDate">Estimated date when the customer will be reactivated..</param>
        public AccountSuspension(int suspendPlanId = default(int), int suspendPlanGroupId = default(int), DateTime suspendDate = default(DateTime), int suspendReasonId = default(int), int suspendSubreasonId = default(int), string suspendComment = default(string), DateTime suspendEstimatedReactivationDate = default(DateTime))
        {
            this.SuspendPlanId = suspendPlanId;
            this.SuspendPlanGroupId = suspendPlanGroupId;
            this.SuspendDate = suspendDate;
            this.SuspendReasonId = suspendReasonId;
            this.SuspendSubreasonId = suspendSubreasonId;
            this.SuspendComment = suspendComment;
            this.SuspendEstimatedReactivationDate = suspendEstimatedReactivationDate;
        }

        /// <summary>
        /// Suspended plan group id.
        /// </summary>
        /// <value>Suspended plan group id.</value>
        [DataMember(Name = "suspend_plan_id", IsRequired = true, EmitDefaultValue = true)]
        public int SuspendPlanId { get; set; }

        /// <summary>
        /// The suspended plan group id.
        /// </summary>
        /// <value>The suspended plan group id.</value>
        [DataMember(Name = "suspend_plan_group_id", IsRequired = true, EmitDefaultValue = true)]
        public int SuspendPlanGroupId { get; set; }

        /// <summary>
        /// The date when the customer will start being suspended. If omitted defaults to the current date and time and suspends the account at the next billing cycle.
        /// </summary>
        /// <value>The date when the customer will start being suspended. If omitted defaults to the current date and time and suspends the account at the next billing cycle.</value>
        [DataMember(Name = "suspend_date", EmitDefaultValue = false)]
        public DateTime SuspendDate { get; set; }

        /// <summary>
        /// The reason the customer is suspended.
        /// </summary>
        /// <value>The reason the customer is suspended.</value>
        [DataMember(Name = "suspend_reason_id", EmitDefaultValue = false)]
        public int SuspendReasonId { get; set; }

        /// <summary>
        /// The subreason why the customer is suspended.
        /// </summary>
        /// <value>The subreason why the customer is suspended.</value>
        [DataMember(Name = "suspend_subreason_id", EmitDefaultValue = false)]
        public int SuspendSubreasonId { get; set; }

        /// <summary>
        /// Comment field for user suspension.
        /// </summary>
        /// <value>Comment field for user suspension.</value>
        [DataMember(Name = "suspend_comment", EmitDefaultValue = false)]
        public string SuspendComment { get; set; }

        /// <summary>
        /// Estimated date when the customer will be reactivated.
        /// </summary>
        /// <value>Estimated date when the customer will be reactivated.</value>
        [DataMember(Name = "suspend_estimated_reactivation_date", EmitDefaultValue = false)]
        public DateTime SuspendEstimatedReactivationDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountSuspension {\n");
            sb.Append("  SuspendPlanId: ").Append(SuspendPlanId).Append("\n");
            sb.Append("  SuspendPlanGroupId: ").Append(SuspendPlanGroupId).Append("\n");
            sb.Append("  SuspendDate: ").Append(SuspendDate).Append("\n");
            sb.Append("  SuspendReasonId: ").Append(SuspendReasonId).Append("\n");
            sb.Append("  SuspendSubreasonId: ").Append(SuspendSubreasonId).Append("\n");
            sb.Append("  SuspendComment: ").Append(SuspendComment).Append("\n");
            sb.Append("  SuspendEstimatedReactivationDate: ").Append(SuspendEstimatedReactivationDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
