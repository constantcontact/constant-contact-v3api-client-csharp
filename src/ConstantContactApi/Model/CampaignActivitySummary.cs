/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// CampaignActivitySummary
    /// </summary>
    [DataContract(Name = "CampaignActivitySummary")]
    public partial class CampaignActivitySummary : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignActivitySummary" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CampaignActivitySummary() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CampaignActivitySummary" /> class.
        /// </summary>
        /// <param name="campaignActivityId">The unique id of the activity for an e-mail campaign. (required).</param>
        /// <param name="startOn">The last date at which the email was sent to this contact. (required).</param>
        /// <param name="emBounces">The number of times the email has bounced for this contact. (required).</param>
        /// <param name="emClicks">The number of times this contact has clicked a link in this email. (required).</param>
        /// <param name="emForwards">The number of times this contact has forwarded this email. (required).</param>
        /// <param name="emOpens">The number of times this contact has opened this email. (required).</param>
        /// <param name="emSends">The number of times the email was sent to this contact. (required).</param>
        /// <param name="emUnsubscribes">The number of times this contact has opted out. (required).</param>
        public CampaignActivitySummary(Guid campaignActivityId = default(Guid), DateTime startOn = default(DateTime), int emBounces = default(int), int emClicks = default(int), int emForwards = default(int), int emOpens = default(int), int emSends = default(int), int emUnsubscribes = default(int))
        {
            this.CampaignActivityId = campaignActivityId;
            this.StartOn = startOn;
            this.EmBounces = emBounces;
            this.EmClicks = emClicks;
            this.EmForwards = emForwards;
            this.EmOpens = emOpens;
            this.EmSends = emSends;
            this.EmUnsubscribes = emUnsubscribes;
        }

        /// <summary>
        /// The unique id of the activity for an e-mail campaign.
        /// </summary>
        /// <value>The unique id of the activity for an e-mail campaign.</value>
        [DataMember(Name = "campaign_activity_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid CampaignActivityId { get; set; }

        /// <summary>
        /// The last date at which the email was sent to this contact.
        /// </summary>
        /// <value>The last date at which the email was sent to this contact.</value>
        [DataMember(Name = "start_on", IsRequired = true, EmitDefaultValue = true)]
        public DateTime StartOn { get; set; }

        /// <summary>
        /// The number of times the email has bounced for this contact.
        /// </summary>
        /// <value>The number of times the email has bounced for this contact.</value>
        [DataMember(Name = "em_bounces", IsRequired = true, EmitDefaultValue = true)]
        public int EmBounces { get; set; }

        /// <summary>
        /// The number of times this contact has clicked a link in this email.
        /// </summary>
        /// <value>The number of times this contact has clicked a link in this email.</value>
        [DataMember(Name = "em_clicks", IsRequired = true, EmitDefaultValue = true)]
        public int EmClicks { get; set; }

        /// <summary>
        /// The number of times this contact has forwarded this email.
        /// </summary>
        /// <value>The number of times this contact has forwarded this email.</value>
        [DataMember(Name = "em_forwards", IsRequired = true, EmitDefaultValue = true)]
        public int EmForwards { get; set; }

        /// <summary>
        /// The number of times this contact has opened this email.
        /// </summary>
        /// <value>The number of times this contact has opened this email.</value>
        [DataMember(Name = "em_opens", IsRequired = true, EmitDefaultValue = true)]
        public int EmOpens { get; set; }

        /// <summary>
        /// The number of times the email was sent to this contact.
        /// </summary>
        /// <value>The number of times the email was sent to this contact.</value>
        [DataMember(Name = "em_sends", IsRequired = true, EmitDefaultValue = true)]
        public int EmSends { get; set; }

        /// <summary>
        /// The number of times this contact has opted out.
        /// </summary>
        /// <value>The number of times this contact has opted out.</value>
        [DataMember(Name = "em_unsubscribes", IsRequired = true, EmitDefaultValue = true)]
        public int EmUnsubscribes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CampaignActivitySummary {\n");
            sb.Append("  CampaignActivityId: ").Append(CampaignActivityId).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  EmBounces: ").Append(EmBounces).Append("\n");
            sb.Append("  EmClicks: ").Append(EmClicks).Append("\n");
            sb.Append("  EmForwards: ").Append(EmForwards).Append("\n");
            sb.Append("  EmOpens: ").Append(EmOpens).Append("\n");
            sb.Append("  EmSends: ").Append(EmSends).Append("\n");
            sb.Append("  EmUnsubscribes: ").Append(EmUnsubscribes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
