/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// TrackingActivitySmsChannelDTO
    /// </summary>
    [DataContract(Name = "TrackingActivitySmsChannelDTO")]
    public partial class TrackingActivitySmsChannelDTO : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackingActivitySmsChannelDTO" /> class.
        /// </summary>
        /// <param name="countryCode">The ISO country code that is associated with SMS address..</param>
        /// <param name="state">The SMS channel status:   &lt;ul&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;: not_set&lt;li&gt;      &lt;li&gt;&lt;code&gt;T&lt;/code&gt;: temp_hold&lt;li&gt;      &lt;li&gt;&lt;code&gt;P&lt;/code&gt;: pending_confirmation&lt;li&gt;      &lt;li&gt;&lt;code&gt;I&lt;/code&gt;: implicit&lt;li&gt;      &lt;li&gt;&lt;code&gt;E&lt;/code&gt;: explicit&lt;li&gt;      &lt;li&gt;&lt;code&gt;O&lt;/code&gt;: unsubscribed&lt;li&gt;      &lt;li&gt;&lt;code&gt;D&lt;/code&gt;:deprecated&lt;li&gt;&lt;/ul&gt;.</param>
        /// <param name="formattedInternational">The formatted SMS number returned if the SMS &lt;code&gt;country_code&lt;/code&gt; does not match the contacts &lt;code&gt;country_code&lt;/code&gt;. .</param>
        /// <param name="formattedNational">The formatted SMS number returned if the SMS &lt;code&gt;country_code&lt;/code&gt; matches the contacts &lt;code&gt;country_code&lt;/code&gt;. .</param>
        public TrackingActivitySmsChannelDTO(string countryCode = default(string), string state = default(string), string formattedInternational = default(string), string formattedNational = default(string))
        {
            this.CountryCode = countryCode;
            this.State = state;
            this.FormattedInternational = formattedInternational;
            this.FormattedNational = formattedNational;
        }

        /// <summary>
        /// The ISO country code that is associated with SMS address.
        /// </summary>
        /// <value>The ISO country code that is associated with SMS address.</value>
        /// <example>US</example>
        [DataMember(Name = "country_code", EmitDefaultValue = false)]
        public string CountryCode { get; set; }

        /// <summary>
        /// The SMS channel status:   &lt;ul&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;: not_set&lt;li&gt;      &lt;li&gt;&lt;code&gt;T&lt;/code&gt;: temp_hold&lt;li&gt;      &lt;li&gt;&lt;code&gt;P&lt;/code&gt;: pending_confirmation&lt;li&gt;      &lt;li&gt;&lt;code&gt;I&lt;/code&gt;: implicit&lt;li&gt;      &lt;li&gt;&lt;code&gt;E&lt;/code&gt;: explicit&lt;li&gt;      &lt;li&gt;&lt;code&gt;O&lt;/code&gt;: unsubscribed&lt;li&gt;      &lt;li&gt;&lt;code&gt;D&lt;/code&gt;:deprecated&lt;li&gt;&lt;/ul&gt;
        /// </summary>
        /// <value>The SMS channel status:   &lt;ul&gt;&lt;li&gt;&lt;code&gt;N&lt;/code&gt;: not_set&lt;li&gt;      &lt;li&gt;&lt;code&gt;T&lt;/code&gt;: temp_hold&lt;li&gt;      &lt;li&gt;&lt;code&gt;P&lt;/code&gt;: pending_confirmation&lt;li&gt;      &lt;li&gt;&lt;code&gt;I&lt;/code&gt;: implicit&lt;li&gt;      &lt;li&gt;&lt;code&gt;E&lt;/code&gt;: explicit&lt;li&gt;      &lt;li&gt;&lt;code&gt;O&lt;/code&gt;: unsubscribed&lt;li&gt;      &lt;li&gt;&lt;code&gt;D&lt;/code&gt;:deprecated&lt;li&gt;&lt;/ul&gt;</value>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// The formatted SMS number returned if the SMS &lt;code&gt;country_code&lt;/code&gt; does not match the contacts &lt;code&gt;country_code&lt;/code&gt;. 
        /// </summary>
        /// <value>The formatted SMS number returned if the SMS &lt;code&gt;country_code&lt;/code&gt; does not match the contacts &lt;code&gt;country_code&lt;/code&gt;. </value>
        /// <example>+1 234-555-6789</example>
        [DataMember(Name = "formatted_international", EmitDefaultValue = false)]
        public string FormattedInternational { get; set; }

        /// <summary>
        /// The formatted SMS number returned if the SMS &lt;code&gt;country_code&lt;/code&gt; matches the contacts &lt;code&gt;country_code&lt;/code&gt;. 
        /// </summary>
        /// <value>The formatted SMS number returned if the SMS &lt;code&gt;country_code&lt;/code&gt; matches the contacts &lt;code&gt;country_code&lt;/code&gt;. </value>
        /// <example>(234) 555-6789</example>
        [DataMember(Name = "formatted_national", EmitDefaultValue = false)]
        public string FormattedNational { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackingActivitySmsChannelDTO {\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  FormattedInternational: ").Append(FormattedInternational).Append("\n");
            sb.Append("  FormattedNational: ").Append(FormattedNational).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
