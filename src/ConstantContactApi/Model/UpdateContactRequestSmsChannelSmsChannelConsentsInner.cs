/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// UpdateContactRequestSmsChannelSmsChannelConsentsInner
    /// </summary>
    [DataContract(Name = "updateContact_request_sms_channel_sms_channel_consents_inner")]
    public partial class UpdateContactRequestSmsChannelSmsChannelConsentsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateContactRequestSmsChannelSmsChannelConsentsInner" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateContactRequestSmsChannelSmsChannelConsentsInner() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateContactRequestSmsChannelSmsChannelConsentsInner" /> class.
        /// </summary>
        /// <param name="smsConsentPermission">The current status of the SMS channel. (required).</param>
        /// <param name="consentType">The type of consent provided. (required).</param>
        /// <param name="consentMediumDetails">Additional information about the consent such as the type of device used..</param>
        public UpdateContactRequestSmsChannelSmsChannelConsentsInner(string smsConsentPermission = default(string), string consentType = default(string), string consentMediumDetails = default(string))
        {
            // to ensure "smsConsentPermission" is required (not null)
            if (smsConsentPermission == null)
            {
                throw new ArgumentNullException("smsConsentPermission is a required property for UpdateContactRequestSmsChannelSmsChannelConsentsInner and cannot be null");
            }
            this.SmsConsentPermission = smsConsentPermission;
            // to ensure "consentType" is required (not null)
            if (consentType == null)
            {
                throw new ArgumentNullException("consentType is a required property for UpdateContactRequestSmsChannelSmsChannelConsentsInner and cannot be null");
            }
            this.ConsentType = consentType;
            this.ConsentMediumDetails = consentMediumDetails;
        }

        /// <summary>
        /// The current status of the SMS channel.
        /// </summary>
        /// <value>The current status of the SMS channel.</value>
        /// <example>explicit</example>
        [DataMember(Name = "sms_consent_permission", IsRequired = true, EmitDefaultValue = true)]
        public string SmsConsentPermission { get; set; }

        /// <summary>
        /// The type of consent provided.
        /// </summary>
        /// <value>The type of consent provided.</value>
        /// <example>promotional_sms</example>
        [DataMember(Name = "consent_type", IsRequired = true, EmitDefaultValue = true)]
        public string ConsentType { get; set; }

        /// <summary>
        /// Additional information about the consent such as the type of device used.
        /// </summary>
        /// <value>Additional information about the consent such as the type of device used.</value>
        /// <example>IPhone 13 device used to provide consent.</example>
        [DataMember(Name = "consent_medium_details", EmitDefaultValue = false)]
        public string ConsentMediumDetails { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateContactRequestSmsChannelSmsChannelConsentsInner {\n");
            sb.Append("  SmsConsentPermission: ").Append(SmsConsentPermission).Append("\n");
            sb.Append("  ConsentType: ").Append(ConsentType).Append("\n");
            sb.Append("  ConsentMediumDetails: ").Append(ConsentMediumDetails).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
