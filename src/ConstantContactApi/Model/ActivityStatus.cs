/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// ActivityStatus
    /// </summary>
    [DataContract(Name = "ActivityStatus")]
    public partial class ActivityStatus : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActivityStatus" /> class.
        /// </summary>
        /// <param name="correctableCount">The number of correctable errors. Correctable errors include invalid email address format, birthday or anniversary format error, or does not have minimal contact information (no name or email address). Correctable errors are available in the product UI to correct..</param>
        /// <param name="cannotAddToListCount">The number of contacts that cannot be added to a list because they were previously unsubscribed, valid for contacts_file_ or json_import requests..</param>
        public ActivityStatus(int correctableCount = default(int), int cannotAddToListCount = default(int))
        {
            this.CorrectableCount = correctableCount;
            this.CannotAddToListCount = cannotAddToListCount;
        }

        /// <summary>
        /// The total number of items to be processed.
        /// </summary>
        /// <value>The total number of items to be processed.</value>
        /// <example>2200</example>
        [DataMember(Name = "items_total_count", EmitDefaultValue = false)]
        public int ItemsTotalCount { get; private set; }

        /// <summary>
        /// Returns false as ItemsTotalCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsTotalCount()
        {
            return false;
        }
        /// <summary>
        /// The number of items processed in the activity request.
        /// </summary>
        /// <value>The number of items processed in the activity request.</value>
        /// <example>2100</example>
        [DataMember(Name = "items_completed_count", EmitDefaultValue = false)]
        public int ItemsCompletedCount { get; private set; }

        /// <summary>
        /// Returns false as ItemsCompletedCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeItemsCompletedCount()
        {
            return false;
        }
        /// <summary>
        /// The total number of contacts in an import contacts request.
        /// </summary>
        /// <value>The total number of contacts in an import contacts request.</value>
        /// <example>8750</example>
        [DataMember(Name = "person_count", EmitDefaultValue = false)]
        public int PersonCount { get; private set; }

        /// <summary>
        /// Returns false as PersonCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePersonCount()
        {
            return false;
        }
        /// <summary>
        /// The number of non-correctable errors encountered during an import contacts request.
        /// </summary>
        /// <value>The number of non-correctable errors encountered during an import contacts request.</value>
        /// <example>1</example>
        [DataMember(Name = "error_count", EmitDefaultValue = false)]
        public int ErrorCount { get; private set; }

        /// <summary>
        /// Returns false as ErrorCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeErrorCount()
        {
            return false;
        }
        /// <summary>
        /// The number of correctable errors. Correctable errors include invalid email address format, birthday or anniversary format error, or does not have minimal contact information (no name or email address). Correctable errors are available in the product UI to correct.
        /// </summary>
        /// <value>The number of correctable errors. Correctable errors include invalid email address format, birthday or anniversary format error, or does not have minimal contact information (no name or email address). Correctable errors are available in the product UI to correct.</value>
        /// <example>1</example>
        [DataMember(Name = "correctable_count", EmitDefaultValue = false)]
        public int CorrectableCount { get; set; }

        /// <summary>
        /// The number of contacts that cannot be added to a list because they were previously unsubscribed, valid for contacts_file_ or json_import requests.
        /// </summary>
        /// <value>The number of contacts that cannot be added to a list because they were previously unsubscribed, valid for contacts_file_ or json_import requests.</value>
        /// <example>1</example>
        [DataMember(Name = "cannot_add_to_list_count", EmitDefaultValue = false)]
        public int CannotAddToListCount { get; set; }

        /// <summary>
        /// The number of lists processed in an add or remove list membership activity request.
        /// </summary>
        /// <value>The number of lists processed in an add or remove list membership activity request.</value>
        /// <example>3</example>
        [DataMember(Name = "list_count", EmitDefaultValue = false)]
        public int ListCount { get; private set; }

        /// <summary>
        /// Returns false as ListCount should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeListCount()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActivityStatus {\n");
            sb.Append("  ItemsTotalCount: ").Append(ItemsTotalCount).Append("\n");
            sb.Append("  ItemsCompletedCount: ").Append(ItemsCompletedCount).Append("\n");
            sb.Append("  PersonCount: ").Append(PersonCount).Append("\n");
            sb.Append("  ErrorCount: ").Append(ErrorCount).Append("\n");
            sb.Append("  CorrectableCount: ").Append(CorrectableCount).Append("\n");
            sb.Append("  CannotAddToListCount: ").Append(CannotAddToListCount).Append("\n");
            sb.Append("  ListCount: ").Append(ListCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
