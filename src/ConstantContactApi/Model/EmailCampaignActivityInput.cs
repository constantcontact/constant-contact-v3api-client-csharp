/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// EmailCampaignActivityInput
    /// </summary>
    [DataContract(Name = "EmailCampaignActivityInput")]
    public partial class EmailCampaignActivityInput : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignActivityInput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailCampaignActivityInput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignActivityInput" /> class.
        /// </summary>
        /// <param name="formatType">The email format you are using to create the email campaign activity. The V3 API supports creating emails using &lt;code&gt;format_type&lt;/code&gt; 5 (custom code emails).  (required).</param>
        /// <param name="fromName">The email sender&#39;s name to display for the email campaign activity. (required).</param>
        /// <param name="fromEmail">The sender&#39;s email address to use for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status. (required).</param>
        /// <param name="replyToEmail">The sender&#39;s email address to use if the contact replies to the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status. (required).</param>
        /// <param name="subject">The text to display in the subject line that describes the email campaign activity. (required).</param>
        /// <param name="preheader">The email preheader for the email campaign activity. Contacts will view your preheader as a short summary that follows the subject line in their email client. Only &lt;code&gt;format_type&lt;/code&gt; 3, 4, and 5 email campaign activities use the preheader property..</param>
        /// <param name="htmlContent">The HTML content for the email campaign activity. Only &lt;code&gt;format_type&lt;/code&gt; 5 (custom code emails) can contain &lt;code&gt;html_content&lt;/code&gt;. When creating a &lt;code&gt;format_type&lt;/code&gt; 5 custom code email, make sure that you include &lt;code&gt;[[trackingImage]]&lt;/code&gt; in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element of your HTML.  (required).</param>
        /// <param name="physicalAddressInFooter">physicalAddressInFooter.</param>
        public EmailCampaignActivityInput(int formatType = default(int), string fromName = default(string), string fromEmail = default(string), string replyToEmail = default(string), string subject = default(string), string preheader = default(string), string htmlContent = default(string), CreateEmailCampaignRequestEmailCampaignActivitiesInnerPhysicalAddressInFooter physicalAddressInFooter = default(CreateEmailCampaignRequestEmailCampaignActivitiesInnerPhysicalAddressInFooter))
        {
            this.FormatType = formatType;
            // to ensure "fromName" is required (not null)
            if (fromName == null)
            {
                throw new ArgumentNullException("fromName is a required property for EmailCampaignActivityInput and cannot be null");
            }
            this.FromName = fromName;
            // to ensure "fromEmail" is required (not null)
            if (fromEmail == null)
            {
                throw new ArgumentNullException("fromEmail is a required property for EmailCampaignActivityInput and cannot be null");
            }
            this.FromEmail = fromEmail;
            // to ensure "replyToEmail" is required (not null)
            if (replyToEmail == null)
            {
                throw new ArgumentNullException("replyToEmail is a required property for EmailCampaignActivityInput and cannot be null");
            }
            this.ReplyToEmail = replyToEmail;
            // to ensure "subject" is required (not null)
            if (subject == null)
            {
                throw new ArgumentNullException("subject is a required property for EmailCampaignActivityInput and cannot be null");
            }
            this.Subject = subject;
            // to ensure "htmlContent" is required (not null)
            if (htmlContent == null)
            {
                throw new ArgumentNullException("htmlContent is a required property for EmailCampaignActivityInput and cannot be null");
            }
            this.HtmlContent = htmlContent;
            this.Preheader = preheader;
            this.PhysicalAddressInFooter = physicalAddressInFooter;
        }

        /// <summary>
        /// The email format you are using to create the email campaign activity. The V3 API supports creating emails using &lt;code&gt;format_type&lt;/code&gt; 5 (custom code emails). 
        /// </summary>
        /// <value>The email format you are using to create the email campaign activity. The V3 API supports creating emails using &lt;code&gt;format_type&lt;/code&gt; 5 (custom code emails). </value>
        /// <example>5</example>
        [DataMember(Name = "format_type", IsRequired = true, EmitDefaultValue = true)]
        public int FormatType { get; set; }

        /// <summary>
        /// The email sender&#39;s name to display for the email campaign activity.
        /// </summary>
        /// <value>The email sender&#39;s name to display for the email campaign activity.</value>
        /// <example>Jake Dodge</example>
        [DataMember(Name = "from_name", IsRequired = true, EmitDefaultValue = true)]
        public string FromName { get; set; }

        /// <summary>
        /// The sender&#39;s email address to use for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status.
        /// </summary>
        /// <value>The sender&#39;s email address to use for the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status.</value>
        /// <example>jdodge@constantcontact.com</example>
        [DataMember(Name = "from_email", IsRequired = true, EmitDefaultValue = true)]
        public string FromEmail { get; set; }

        /// <summary>
        /// The sender&#39;s email address to use if the contact replies to the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status.
        /// </summary>
        /// <value>The sender&#39;s email address to use if the contact replies to the email campaign activity. You must use a confirmed Constant Contact account email address. Make a GET call to &lt;code&gt;/account/emails&lt;/code&gt; to return a collection of account emails and their confirmation status.</value>
        /// <example>jdodge@constantconatct.com</example>
        [DataMember(Name = "reply_to_email", IsRequired = true, EmitDefaultValue = true)]
        public string ReplyToEmail { get; set; }

        /// <summary>
        /// The text to display in the subject line that describes the email campaign activity.
        /// </summary>
        /// <value>The text to display in the subject line that describes the email campaign activity.</value>
        /// <example>Informed Daily Digest</example>
        [DataMember(Name = "subject", IsRequired = true, EmitDefaultValue = true)]
        public string Subject { get; set; }

        /// <summary>
        /// The email preheader for the email campaign activity. Contacts will view your preheader as a short summary that follows the subject line in their email client. Only &lt;code&gt;format_type&lt;/code&gt; 3, 4, and 5 email campaign activities use the preheader property.
        /// </summary>
        /// <value>The email preheader for the email campaign activity. Contacts will view your preheader as a short summary that follows the subject line in their email client. Only &lt;code&gt;format_type&lt;/code&gt; 3, 4, and 5 email campaign activities use the preheader property.</value>
        /// <example>You don&#39;t want to miss this.</example>
        [DataMember(Name = "preheader", EmitDefaultValue = false)]
        public string Preheader { get; set; }

        /// <summary>
        /// The HTML content for the email campaign activity. Only &lt;code&gt;format_type&lt;/code&gt; 5 (custom code emails) can contain &lt;code&gt;html_content&lt;/code&gt;. When creating a &lt;code&gt;format_type&lt;/code&gt; 5 custom code email, make sure that you include &lt;code&gt;[[trackingImage]]&lt;/code&gt; in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element of your HTML. 
        /// </summary>
        /// <value>The HTML content for the email campaign activity. Only &lt;code&gt;format_type&lt;/code&gt; 5 (custom code emails) can contain &lt;code&gt;html_content&lt;/code&gt;. When creating a &lt;code&gt;format_type&lt;/code&gt; 5 custom code email, make sure that you include &lt;code&gt;[[trackingImage]]&lt;/code&gt; in the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; element of your HTML. </value>
        /// <example>&lt;html&gt;&lt;body&gt;[[trackingImage]] &lt;a href&#x3D;&quot;http://www.constantcontact.com&quot;&gt;Visit ConstantContact.com!&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;</example>
        [DataMember(Name = "html_content", IsRequired = true, EmitDefaultValue = true)]
        public string HtmlContent { get; set; }

        /// <summary>
        /// Gets or Sets PhysicalAddressInFooter
        /// </summary>
        [DataMember(Name = "physical_address_in_footer", EmitDefaultValue = false)]
        public CreateEmailCampaignRequestEmailCampaignActivitiesInnerPhysicalAddressInFooter PhysicalAddressInFooter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailCampaignActivityInput {\n");
            sb.Append("  FormatType: ").Append(FormatType).Append("\n");
            sb.Append("  FromName: ").Append(FromName).Append("\n");
            sb.Append("  FromEmail: ").Append(FromEmail).Append("\n");
            sb.Append("  ReplyToEmail: ").Append(ReplyToEmail).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Preheader: ").Append(Preheader).Append("\n");
            sb.Append("  HtmlContent: ").Append(HtmlContent).Append("\n");
            sb.Append("  PhysicalAddressInFooter: ").Append(PhysicalAddressInFooter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FromName (string) maxLength
            if (this.FromName != null && this.FromName.Length > 100)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromName, length must be less than 100.", new [] { "FromName" });
            }

            // FromEmail (string) maxLength
            if (this.FromEmail != null && this.FromEmail.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FromEmail, length must be less than 80.", new [] { "FromEmail" });
            }

            // ReplyToEmail (string) maxLength
            if (this.ReplyToEmail != null && this.ReplyToEmail.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ReplyToEmail, length must be less than 80.", new [] { "ReplyToEmail" });
            }

            // HtmlContent (string) maxLength
            if (this.HtmlContent != null && this.HtmlContent.Length > 150000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for HtmlContent, length must be less than 150000.", new [] { "HtmlContent" });
            }

            yield break;
        }
    }

}
