/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Use this endpoint to retrieve (GET) a collection of existing contacts, or to create (POST) a new contact.
    /// </summary>
    [DataContract(Name = "Contacts")]
    public partial class Contacts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Contacts" /> class.
        /// </summary>
        /// <param name="varContacts">varContacts.</param>
        /// <param name="contactsCount">Total number of contacts in the response..</param>
        /// <param name="links">links.</param>
        /// <param name="status">If you use the &lt;code&gt;segment_id&lt;/code&gt; query parameter to filter results based on a segment, this property indicates that the V3 API accepted your request and is still processing it..</param>
        public Contacts(List<GetContactById200Response> varContacts = default(List<GetContactById200Response>), int contactsCount = default(int), GetAllActivities200ResponseLinks links = default(GetAllActivities200ResponseLinks), string status = default(string))
        {
            this.VarContacts = varContacts;
            this.ContactsCount = contactsCount;
            this.Links = links;
            this.Status = status;
        }

        /// <summary>
        /// Gets or Sets VarContacts
        /// </summary>
        [DataMember(Name = "contacts", EmitDefaultValue = false)]
        public List<GetContactById200Response> VarContacts { get; set; }

        /// <summary>
        /// Total number of contacts in the response.
        /// </summary>
        /// <value>Total number of contacts in the response.</value>
        /// <example>3249</example>
        [DataMember(Name = "contacts_count", EmitDefaultValue = false)]
        public int ContactsCount { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name = "_links", EmitDefaultValue = false)]
        public GetAllActivities200ResponseLinks Links { get; set; }

        /// <summary>
        /// If you use the &lt;code&gt;segment_id&lt;/code&gt; query parameter to filter results based on a segment, this property indicates that the V3 API accepted your request and is still processing it.
        /// </summary>
        /// <value>If you use the &lt;code&gt;segment_id&lt;/code&gt; query parameter to filter results based on a segment, this property indicates that the V3 API accepted your request and is still processing it.</value>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Contacts {\n");
            sb.Append("  VarContacts: ").Append(VarContacts).Append("\n");
            sb.Append("  ContactsCount: ").Append(ContactsCount).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
