/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Specifies the date and time a client requests to cancel their Constant Contact account and changes the account &#x60;billing_status&#x60; to &#x60;Canceled&#x60;. By default, this is the current date and time in ISO format. In the request body, you can optionally specify a future cancellation date (in ISO format) and a reason (&#x60;reason_code&#x60;) that the client wants to cancel their account.
    /// </summary>
    [DataContract(Name = "AccountCancellation")]
    public partial class AccountCancellation : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountCancellation" /> class.
        /// </summary>
        /// <param name="reasonId">Specifies the reason that the client is canceling their Constant Contact account as follows:   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;1&lt;/code&gt;  Cost Too High&lt;/li&gt;     &lt;li&gt;&lt;code&gt;2&lt;/code&gt;  Using A Competitive Service&lt;/li&gt;     &lt;li&gt;&lt;code&gt;3&lt;/code&gt;  Not Doing Email Marketing&lt;/li&gt;     &lt;li&gt;&lt;code&gt;11&lt;/code&gt; Something Missing Or Not Working &lt;/li&gt;     &lt;li&gt;&lt;code&gt;12&lt;/code&gt; Doing It In-House&lt;/li&gt;     &lt;li&gt;&lt;code&gt;14&lt;/code&gt; Poor Results&lt;/li&gt;     &lt;li&gt;&lt;code&gt;21&lt;/code&gt; Too Difficult To Use&lt;/li&gt;     &lt;li&gt;&lt;code&gt;27&lt;/code&gt; Canceled Online by Customer&lt;/li&gt;     &lt;li&gt;&lt;code&gt;30&lt;/code&gt; Dissatisfied With Billing Policies&lt;/li&gt;   &lt;/ul&gt;.</param>
        /// <param name="effectiveDate">The client account cancellation date and time in ISO-8601 format..</param>
        public AccountCancellation(int reasonId = default(int), DateTime effectiveDate = default(DateTime))
        {
            this.ReasonId = reasonId;
            this.EffectiveDate = effectiveDate;
        }

        /// <summary>
        /// Specifies the reason that the client is canceling their Constant Contact account as follows:   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;1&lt;/code&gt;  Cost Too High&lt;/li&gt;     &lt;li&gt;&lt;code&gt;2&lt;/code&gt;  Using A Competitive Service&lt;/li&gt;     &lt;li&gt;&lt;code&gt;3&lt;/code&gt;  Not Doing Email Marketing&lt;/li&gt;     &lt;li&gt;&lt;code&gt;11&lt;/code&gt; Something Missing Or Not Working &lt;/li&gt;     &lt;li&gt;&lt;code&gt;12&lt;/code&gt; Doing It In-House&lt;/li&gt;     &lt;li&gt;&lt;code&gt;14&lt;/code&gt; Poor Results&lt;/li&gt;     &lt;li&gt;&lt;code&gt;21&lt;/code&gt; Too Difficult To Use&lt;/li&gt;     &lt;li&gt;&lt;code&gt;27&lt;/code&gt; Canceled Online by Customer&lt;/li&gt;     &lt;li&gt;&lt;code&gt;30&lt;/code&gt; Dissatisfied With Billing Policies&lt;/li&gt;   &lt;/ul&gt;
        /// </summary>
        /// <value>Specifies the reason that the client is canceling their Constant Contact account as follows:   &lt;ul&gt;     &lt;li&gt;&lt;code&gt;1&lt;/code&gt;  Cost Too High&lt;/li&gt;     &lt;li&gt;&lt;code&gt;2&lt;/code&gt;  Using A Competitive Service&lt;/li&gt;     &lt;li&gt;&lt;code&gt;3&lt;/code&gt;  Not Doing Email Marketing&lt;/li&gt;     &lt;li&gt;&lt;code&gt;11&lt;/code&gt; Something Missing Or Not Working &lt;/li&gt;     &lt;li&gt;&lt;code&gt;12&lt;/code&gt; Doing It In-House&lt;/li&gt;     &lt;li&gt;&lt;code&gt;14&lt;/code&gt; Poor Results&lt;/li&gt;     &lt;li&gt;&lt;code&gt;21&lt;/code&gt; Too Difficult To Use&lt;/li&gt;     &lt;li&gt;&lt;code&gt;27&lt;/code&gt; Canceled Online by Customer&lt;/li&gt;     &lt;li&gt;&lt;code&gt;30&lt;/code&gt; Dissatisfied With Billing Policies&lt;/li&gt;   &lt;/ul&gt;</value>
        /// <example>1</example>
        [DataMember(Name = "reason_id", EmitDefaultValue = false)]
        public int ReasonId { get; set; }

        /// <summary>
        /// The client account cancellation date and time in ISO-8601 format.
        /// </summary>
        /// <value>The client account cancellation date and time in ISO-8601 format.</value>
        /// <example>2020-02-06T22:09:15Z</example>
        [DataMember(Name = "effective_date", EmitDefaultValue = false)]
        public DateTime EffectiveDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountCancellation {\n");
            sb.Append("  ReasonId: ").Append(ReasonId).Append("\n");
            sb.Append("  EffectiveDate: ").Append(EffectiveDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
