/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// SegmentData
    /// </summary>
    [DataContract(Name = "SegmentData")]
    public partial class SegmentData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SegmentData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentData" /> class.
        /// </summary>
        /// <param name="name">The segment&#39;s unique descriptive name. (required).</param>
        /// <param name="segmentCriteria">The &lt;code&gt;segment_criteria&lt;/code&gt; specifies the contact data that Constant Contact uses to evaluate and identify contacts that meet your criteria. The &lt;code&gt;segment_criteria&lt;/code&gt; must be formatted as single-string escaped JSON. The top-level &lt;code&gt;group&lt;/code&gt; &lt;code&gt;type&lt;/code&gt; must be &lt;code&gt;add&lt;/code&gt;. (required).</param>
        public SegmentData(string name = default(string), string segmentCriteria = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for SegmentData and cannot be null");
            }
            this.Name = name;
            // to ensure "segmentCriteria" is required (not null)
            if (segmentCriteria == null)
            {
                throw new ArgumentNullException("segmentCriteria is a required property for SegmentData and cannot be null");
            }
            this.SegmentCriteria = segmentCriteria;
        }

        /// <summary>
        /// The segment&#39;s unique descriptive name.
        /// </summary>
        /// <value>The segment&#39;s unique descriptive name.</value>
        /// <example>Re-engage contacts who did not open the last 5 email campaign activities.</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The &lt;code&gt;segment_criteria&lt;/code&gt; specifies the contact data that Constant Contact uses to evaluate and identify contacts that meet your criteria. The &lt;code&gt;segment_criteria&lt;/code&gt; must be formatted as single-string escaped JSON. The top-level &lt;code&gt;group&lt;/code&gt; &lt;code&gt;type&lt;/code&gt; must be &lt;code&gt;add&lt;/code&gt;.
        /// </summary>
        /// <value>The &lt;code&gt;segment_criteria&lt;/code&gt; specifies the contact data that Constant Contact uses to evaluate and identify contacts that meet your criteria. The &lt;code&gt;segment_criteria&lt;/code&gt; must be formatted as single-string escaped JSON. The top-level &lt;code&gt;group&lt;/code&gt; &lt;code&gt;type&lt;/code&gt; must be &lt;code&gt;add&lt;/code&gt;.</value>
        /// <example>{&quot;version&quot;:&quot;1.0.0&quot;,&quot;criteria&quot;:{&quot;type&quot;:&quot;and&quot;,&quot;group&quot;:[{&quot;source&quot;:&quot;tracking&quot;,&quot;field&quot;:&quot;not_opened&quot;,&quot;op&quot;:&quot;contains-any&quot;,&quot;const_value&quot;:&quot;last-n-campaigns&quot;,&quot;param&quot;:&quot;5&quot;}]}}</example>
        [DataMember(Name = "segment_criteria", IsRequired = true, EmitDefaultValue = true)]
        public string SegmentCriteria { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SegmentData {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SegmentCriteria: ").Append(SegmentCriteria).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // SegmentCriteria (string) maxLength
            if (this.SegmentCriteria != null && this.SegmentCriteria.Length > 20000)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for SegmentCriteria, length must be less than 20000.", new [] { "SegmentCriteria" });
            }

            yield break;
        }
    }

}
