/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// StreetAddress
    /// </summary>
    [DataContract(Name = "StreetAddress")]
    public partial class StreetAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected StreetAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="StreetAddress" /> class.
        /// </summary>
        /// <param name="kind">Describes the type of address; valid values are home, work, or other. (required).</param>
        /// <param name="street">Number and street of the address..</param>
        /// <param name="city">The name of the city where the contact lives..</param>
        /// <param name="state">The name of the state or province where the contact lives..</param>
        /// <param name="postalCode">The zip or postal code of the contact..</param>
        /// <param name="country">The name of the country where the contact lives..</param>
        public StreetAddress(string kind = default(string), string street = default(string), string city = default(string), string state = default(string), string postalCode = default(string), string country = default(string))
        {
            // to ensure "kind" is required (not null)
            if (kind == null)
            {
                throw new ArgumentNullException("kind is a required property for StreetAddress and cannot be null");
            }
            this.Kind = kind;
            this.Street = street;
            this.City = city;
            this.State = state;
            this.PostalCode = postalCode;
            this.Country = country;
        }

        /// <summary>
        /// Unique ID for the street address
        /// </summary>
        /// <value>Unique ID for the street address</value>
        /// <example>977a9a2e-3e00-11ea-804b-fa163e56c9b0</example>
        [DataMember(Name = "street_address_id", EmitDefaultValue = false)]
        public Guid StreetAddressId { get; private set; }

        /// <summary>
        /// Returns false as StreetAddressId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStreetAddressId()
        {
            return false;
        }
        /// <summary>
        /// Describes the type of address; valid values are home, work, or other.
        /// </summary>
        /// <value>Describes the type of address; valid values are home, work, or other.</value>
        /// <example>home</example>
        [DataMember(Name = "kind", IsRequired = true, EmitDefaultValue = true)]
        public string Kind { get; set; }

        /// <summary>
        /// Number and street of the address.
        /// </summary>
        /// <value>Number and street of the address.</value>
        /// <example>123 Kashmir Valley Road</example>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// The name of the city where the contact lives.
        /// </summary>
        /// <value>The name of the city where the contact lives.</value>
        /// <example>Chicago</example>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// The name of the state or province where the contact lives.
        /// </summary>
        /// <value>The name of the state or province where the contact lives.</value>
        /// <example>Illinois</example>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// The zip or postal code of the contact.
        /// </summary>
        /// <value>The zip or postal code of the contact.</value>
        /// <example>60609</example>
        [DataMember(Name = "postal_code", EmitDefaultValue = false)]
        public string PostalCode { get; set; }

        /// <summary>
        /// The name of the country where the contact lives.
        /// </summary>
        /// <value>The name of the country where the contact lives.</value>
        /// <example>United States</example>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Date and time that the street address was created, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>Date and time that the street address was created, in ISO-8601 format. System generated.</value>
        /// <example>2016-03-03T10:53:04-05:00</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Date and time that the street address was last updated, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>Date and time that the street address was last updated, in ISO-8601 format. System generated.</value>
        /// <example>2016-03-03T10:56:29-05:00</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class StreetAddress {\n");
            sb.Append("  StreetAddressId: ").Append(StreetAddressId).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Street (string) maxLength
            if (this.Street != null && this.Street.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Street, length must be less than 255.", new [] { "Street" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for City, length must be less than 50.", new [] { "City" });
            }

            // State (string) maxLength
            if (this.State != null && this.State.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for State, length must be less than 50.", new [] { "State" });
            }

            // PostalCode (string) maxLength
            if (this.PostalCode != null && this.PostalCode.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PostalCode, length must be less than 50.", new [] { "PostalCode" });
            }

            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Country, length must be less than 50.", new [] { "Country" });
            }

            yield break;
        }
    }

}
