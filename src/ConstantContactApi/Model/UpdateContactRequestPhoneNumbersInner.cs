/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// UpdateContactRequestPhoneNumbersInner
    /// </summary>
    [DataContract(Name = "updateContact_request_phone_numbers_inner")]
    public partial class UpdateContactRequestPhoneNumbersInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateContactRequestPhoneNumbersInner" /> class.
        /// </summary>
        /// <param name="phoneNumber">The contact&#39;s phone number..</param>
        /// <param name="kind">Identifies the type of phone number; valid values are home, work, mobile, or other..</param>
        public UpdateContactRequestPhoneNumbersInner(string phoneNumber = default(string), string kind = default(string))
        {
            this.PhoneNumber = phoneNumber;
            this.Kind = kind;
        }

        /// <summary>
        /// The contact&#39;s phone number.
        /// </summary>
        /// <value>The contact&#39;s phone number.</value>
        /// <example>+1-555-555-5555</example>
        [DataMember(Name = "phone_number", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Identifies the type of phone number; valid values are home, work, mobile, or other.
        /// </summary>
        /// <value>Identifies the type of phone number; valid values are home, work, mobile, or other.</value>
        /// <example>home</example>
        [DataMember(Name = "kind", EmitDefaultValue = false)]
        public string Kind { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateContactRequestPhoneNumbersInner {\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // PhoneNumber (string) maxLength
            if (this.PhoneNumber != null && this.PhoneNumber.Length > 25)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for PhoneNumber, length must be less than 25.", new [] { "PhoneNumber" });
            }

            yield break;
        }
    }

}
