/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// CreateListAddActivityRequest
    /// </summary>
    [DataContract(Name = "createListAddActivity_request")]
    public partial class CreateListAddActivityRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateListAddActivityRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CreateListAddActivityRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateListAddActivityRequest" /> class.
        /// </summary>
        /// <param name="source">source (required).</param>
        /// <param name="exclude">exclude.</param>
        /// <param name="listIds">Specifies which lists (up to 50) you are adding your source contacts to. (required).</param>
        public CreateListAddActivityRequest(CreateListAddActivityRequestSource source = default(CreateListAddActivityRequestSource), CreateListAddActivityRequestExclude exclude = default(CreateListAddActivityRequestExclude), List<Guid> listIds = default(List<Guid>))
        {
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for CreateListAddActivityRequest and cannot be null");
            }
            this.Source = source;
            // to ensure "listIds" is required (not null)
            if (listIds == null)
            {
                throw new ArgumentNullException("listIds is a required property for CreateListAddActivityRequest and cannot be null");
            }
            this.ListIds = listIds;
            this.Exclude = exclude;
        }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public CreateListAddActivityRequestSource Source { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public CreateListAddActivityRequestExclude Exclude { get; set; }

        /// <summary>
        /// Specifies which lists (up to 50) you are adding your source contacts to.
        /// </summary>
        /// <value>Specifies which lists (up to 50) you are adding your source contacts to.</value>
        [DataMember(Name = "list_ids", IsRequired = true, EmitDefaultValue = true)]
        public List<Guid> ListIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateListAddActivityRequest {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("  ListIds: ").Append(ListIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
