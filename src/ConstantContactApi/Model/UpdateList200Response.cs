/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// UpdateList200Response
    /// </summary>
    [DataContract(Name = "updateList_200_response")]
    public partial class UpdateList200Response : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateList200Response" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UpdateList200Response() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateList200Response" /> class.
        /// </summary>
        /// <param name="name">The name given to the contact list (required).</param>
        /// <param name="description">Text describing the list..</param>
        /// <param name="favorite">Identifies whether or not the account has favorited the contact list. (default to false).</param>
        public UpdateList200Response(string name = default(string), string description = default(string), bool favorite = false)
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for UpdateList200Response and cannot be null");
            }
            this.Name = name;
            this.Description = description;
            this.Favorite = favorite;
        }

        /// <summary>
        /// Unique ID for the contact list
        /// </summary>
        /// <value>Unique ID for the contact list</value>
        /// <example>06526938-56dd-11e9-932a-fa163ea075fa</example>
        [DataMember(Name = "list_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid ListId { get; private set; }

        /// <summary>
        /// Returns false as ListId should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeListId()
        {
            return false;
        }
        /// <summary>
        /// The name given to the contact list
        /// </summary>
        /// <value>The name given to the contact list</value>
        /// <example>Multiple purchases</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Text describing the list.
        /// </summary>
        /// <value>Text describing the list.</value>
        /// <example>List of repeat customers.</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Identifies whether or not the account has favorited the contact list.
        /// </summary>
        /// <value>Identifies whether or not the account has favorited the contact list.</value>
        [DataMember(Name = "favorite", EmitDefaultValue = true)]
        public bool Favorite { get; set; }

        /// <summary>
        /// System generated date and time that the resource was created, in ISO-8601 format.
        /// </summary>
        /// <value>System generated date and time that the resource was created, in ISO-8601 format.</value>
        /// <example>2016-01-23T13:48:44.108Z</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Date and time that the list was last updated, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>Date and time that the list was last updated, in ISO-8601 format. System generated.</value>
        /// <example>2016-03-03T10:56:29-05:00</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// If the list was deleted, this property shows the date and time it was deleted, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>If the list was deleted, this property shows the date and time it was deleted, in ISO-8601 format. System generated.</value>
        /// <example>2016-03-03T10:56:29-05:00</example>
        [DataMember(Name = "deleted_at", EmitDefaultValue = false)]
        public DateTime DeletedAt { get; private set; }

        /// <summary>
        /// Returns false as DeletedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDeletedAt()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UpdateList200Response {\n");
            sb.Append("  ListId: ").Append(ListId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Favorite: ").Append(Favorite).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
