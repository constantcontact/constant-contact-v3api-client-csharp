/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// ContactPutRequest
    /// </summary>
    [DataContract(Name = "ContactPutRequest")]
    public partial class ContactPutRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactPutRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactPutRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactPutRequest" /> class.
        /// </summary>
        /// <param name="emailAddress">emailAddress.</param>
        /// <param name="firstName">The contact&#39;s first name.</param>
        /// <param name="lastName">The contact&#39;s last name.</param>
        /// <param name="jobTitle">The contact&#39;s job title.</param>
        /// <param name="companyName">Name of the company the contact works for..</param>
        /// <param name="birthdayMonth">Accepts values from 1-12; must be used with &lt;code&gt;birthday_day&lt;/code&gt;.</param>
        /// <param name="birthdayDay">Accepts values from 1-31; must be used with &lt;code&gt;birthday_month&lt;/code&gt;.</param>
        /// <param name="anniversary">The anniversary date; Accepted formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D, MM-DD-YYYY, M-D-YYYY.</param>
        /// <param name="updateSource">Identifies who last updated the contact; valid values are &lt;code&gt;Contact&lt;/code&gt; or &lt;code&gt;Account&lt;/code&gt;. (required).</param>
        /// <param name="customFields">Array of up to 25 &lt;code&gt;custom_field&lt;/code&gt; subresources..</param>
        /// <param name="phoneNumbers">Array of up to 3 &lt;code&gt;phone_numbers&lt;/code&gt; subresources..</param>
        /// <param name="streetAddresses">Array of up to 3 &lt;code&gt;street_addresses&lt;/code&gt; subresources..</param>
        /// <param name="listMemberships">Array of up to 50 &lt;code&gt;list_ids&lt;/code&gt; to which the contact is subscribed..</param>
        /// <param name="taggings">Array of tags (&lt;code&gt;tag_id&lt;/code&gt;) assigned to the contact, up to a maximum of 50..</param>
        /// <param name="notes">An array of notes about the contact listed by most recent note first..</param>
        /// <param name="smsChannel">smsChannel.</param>
        public ContactPutRequest(UpdateContactRequestEmailAddress emailAddress = default(UpdateContactRequestEmailAddress), string firstName = default(string), string lastName = default(string), string jobTitle = default(string), string companyName = default(string), int birthdayMonth = default(int), int birthdayDay = default(int), string anniversary = default(string), string updateSource = default(string), List<GetContactById200ResponseCustomFieldsInner> customFields = default(List<GetContactById200ResponseCustomFieldsInner>), List<UpdateContactRequestPhoneNumbersInner> phoneNumbers = default(List<UpdateContactRequestPhoneNumbersInner>), List<UpdateContactRequestStreetAddressesInner> streetAddresses = default(List<UpdateContactRequestStreetAddressesInner>), List<Guid> listMemberships = default(List<Guid>), List<Guid> taggings = default(List<Guid>), List<GetContactById200ResponseNotesInner> notes = default(List<GetContactById200ResponseNotesInner>), UpdateContactRequestSmsChannel smsChannel = default(UpdateContactRequestSmsChannel))
        {
            // to ensure "updateSource" is required (not null)
            if (updateSource == null)
            {
                throw new ArgumentNullException("updateSource is a required property for ContactPutRequest and cannot be null");
            }
            this.UpdateSource = updateSource;
            this.EmailAddress = emailAddress;
            this.FirstName = firstName;
            this.LastName = lastName;
            this.JobTitle = jobTitle;
            this.CompanyName = companyName;
            this.BirthdayMonth = birthdayMonth;
            this.BirthdayDay = birthdayDay;
            this.Anniversary = anniversary;
            this.CustomFields = customFields;
            this.PhoneNumbers = phoneNumbers;
            this.StreetAddresses = streetAddresses;
            this.ListMemberships = listMemberships;
            this.Taggings = taggings;
            this.Notes = notes;
            this.SmsChannel = smsChannel;
        }

        /// <summary>
        /// Gets or Sets EmailAddress
        /// </summary>
        [DataMember(Name = "email_address", EmitDefaultValue = false)]
        public UpdateContactRequestEmailAddress EmailAddress { get; set; }

        /// <summary>
        /// The contact&#39;s first name
        /// </summary>
        /// <value>The contact&#39;s first name</value>
        /// <example>Debora</example>
        [DataMember(Name = "first_name", EmitDefaultValue = false)]
        public string FirstName { get; set; }

        /// <summary>
        /// The contact&#39;s last name
        /// </summary>
        /// <value>The contact&#39;s last name</value>
        /// <example>Lang</example>
        [DataMember(Name = "last_name", EmitDefaultValue = false)]
        public string LastName { get; set; }

        /// <summary>
        /// The contact&#39;s job title
        /// </summary>
        /// <value>The contact&#39;s job title</value>
        /// <example>Musician</example>
        [DataMember(Name = "job_title", EmitDefaultValue = false)]
        public string JobTitle { get; set; }

        /// <summary>
        /// Name of the company the contact works for.
        /// </summary>
        /// <value>Name of the company the contact works for.</value>
        /// <example>Acme Corp.</example>
        [DataMember(Name = "company_name", EmitDefaultValue = false)]
        public string CompanyName { get; set; }

        /// <summary>
        /// Accepts values from 1-12; must be used with &lt;code&gt;birthday_day&lt;/code&gt;
        /// </summary>
        /// <value>Accepts values from 1-12; must be used with &lt;code&gt;birthday_day&lt;/code&gt;</value>
        /// <example>11</example>
        [DataMember(Name = "birthday_month", EmitDefaultValue = false)]
        public int BirthdayMonth { get; set; }

        /// <summary>
        /// Accepts values from 1-31; must be used with &lt;code&gt;birthday_month&lt;/code&gt;
        /// </summary>
        /// <value>Accepts values from 1-31; must be used with &lt;code&gt;birthday_month&lt;/code&gt;</value>
        /// <example>24</example>
        [DataMember(Name = "birthday_day", EmitDefaultValue = false)]
        public int BirthdayDay { get; set; }

        /// <summary>
        /// The anniversary date; Accepted formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D, MM-DD-YYYY, M-D-YYYY
        /// </summary>
        /// <value>The anniversary date; Accepted formats are MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D, MM-DD-YYYY, M-D-YYYY</value>
        /// <example>2006-11-15</example>
        [DataMember(Name = "anniversary", EmitDefaultValue = false)]
        public string Anniversary { get; set; }

        /// <summary>
        /// Identifies who last updated the contact; valid values are &lt;code&gt;Contact&lt;/code&gt; or &lt;code&gt;Account&lt;/code&gt;.
        /// </summary>
        /// <value>Identifies who last updated the contact; valid values are &lt;code&gt;Contact&lt;/code&gt; or &lt;code&gt;Account&lt;/code&gt;.</value>
        /// <example>Account</example>
        [DataMember(Name = "update_source", IsRequired = true, EmitDefaultValue = true)]
        public string UpdateSource { get; set; }

        /// <summary>
        /// Array of up to 25 &lt;code&gt;custom_field&lt;/code&gt; subresources.
        /// </summary>
        /// <value>Array of up to 25 &lt;code&gt;custom_field&lt;/code&gt; subresources.</value>
        [DataMember(Name = "custom_fields", EmitDefaultValue = false)]
        public List<GetContactById200ResponseCustomFieldsInner> CustomFields { get; set; }

        /// <summary>
        /// Array of up to 3 &lt;code&gt;phone_numbers&lt;/code&gt; subresources.
        /// </summary>
        /// <value>Array of up to 3 &lt;code&gt;phone_numbers&lt;/code&gt; subresources.</value>
        [DataMember(Name = "phone_numbers", EmitDefaultValue = false)]
        public List<UpdateContactRequestPhoneNumbersInner> PhoneNumbers { get; set; }

        /// <summary>
        /// Array of up to 3 &lt;code&gt;street_addresses&lt;/code&gt; subresources.
        /// </summary>
        /// <value>Array of up to 3 &lt;code&gt;street_addresses&lt;/code&gt; subresources.</value>
        [DataMember(Name = "street_addresses", EmitDefaultValue = false)]
        public List<UpdateContactRequestStreetAddressesInner> StreetAddresses { get; set; }

        /// <summary>
        /// Array of up to 50 &lt;code&gt;list_ids&lt;/code&gt; to which the contact is subscribed.
        /// </summary>
        /// <value>Array of up to 50 &lt;code&gt;list_ids&lt;/code&gt; to which the contact is subscribed.</value>
        [DataMember(Name = "list_memberships", EmitDefaultValue = false)]
        public List<Guid> ListMemberships { get; set; }

        /// <summary>
        /// Array of tags (&lt;code&gt;tag_id&lt;/code&gt;) assigned to the contact, up to a maximum of 50.
        /// </summary>
        /// <value>Array of tags (&lt;code&gt;tag_id&lt;/code&gt;) assigned to the contact, up to a maximum of 50.</value>
        [DataMember(Name = "taggings", EmitDefaultValue = false)]
        public List<Guid> Taggings { get; set; }

        /// <summary>
        /// An array of notes about the contact listed by most recent note first.
        /// </summary>
        /// <value>An array of notes about the contact listed by most recent note first.</value>
        [DataMember(Name = "notes", EmitDefaultValue = false)]
        public List<GetContactById200ResponseNotesInner> Notes { get; set; }

        /// <summary>
        /// Gets or Sets SmsChannel
        /// </summary>
        [DataMember(Name = "sms_channel", EmitDefaultValue = false)]
        public UpdateContactRequestSmsChannel SmsChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactPutRequest {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  BirthdayMonth: ").Append(BirthdayMonth).Append("\n");
            sb.Append("  BirthdayDay: ").Append(BirthdayDay).Append("\n");
            sb.Append("  Anniversary: ").Append(Anniversary).Append("\n");
            sb.Append("  UpdateSource: ").Append(UpdateSource).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  PhoneNumbers: ").Append(PhoneNumbers).Append("\n");
            sb.Append("  StreetAddresses: ").Append(StreetAddresses).Append("\n");
            sb.Append("  ListMemberships: ").Append(ListMemberships).Append("\n");
            sb.Append("  Taggings: ").Append(Taggings).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  SmsChannel: ").Append(SmsChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FirstName, length must be less than 50.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for LastName, length must be less than 50.", new [] { "LastName" });
            }

            // JobTitle (string) maxLength
            if (this.JobTitle != null && this.JobTitle.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for JobTitle, length must be less than 50.", new [] { "JobTitle" });
            }

            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 50)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for CompanyName, length must be less than 50.", new [] { "CompanyName" });
            }

            // Anniversary (string) maxLength
            if (this.Anniversary != null && this.Anniversary.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Anniversary, length must be less than 10.", new [] { "Anniversary" });
            }

            yield break;
        }
    }

}
