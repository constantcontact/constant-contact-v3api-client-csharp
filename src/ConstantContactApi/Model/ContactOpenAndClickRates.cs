/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// The average click and open rates for a provided contact. The basic information provided is contact id, open rate, click rate, and emails included in the calculation.
    /// </summary>
    [DataContract(Name = "ContactOpenAndClickRates")]
    public partial class ContactOpenAndClickRates : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactOpenAndClickRates" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ContactOpenAndClickRates() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactOpenAndClickRates" /> class.
        /// </summary>
        /// <param name="contactId">The unique ID of the contact for which the report is being generated. (required).</param>
        /// <param name="includedActivitiesCount">The number of activities included in the calculation. (required).</param>
        /// <param name="averageOpenRate">The average rate the contact opened emails sent to them. (required).</param>
        /// <param name="averageClickRate">The average rate the contact clicked on links in emails sent to them. (required).</param>
        public ContactOpenAndClickRates(Guid contactId = default(Guid), int includedActivitiesCount = default(int), double averageOpenRate = default(double), double averageClickRate = default(double))
        {
            this.ContactId = contactId;
            this.IncludedActivitiesCount = includedActivitiesCount;
            this.AverageOpenRate = averageOpenRate;
            this.AverageClickRate = averageClickRate;
        }

        /// <summary>
        /// The unique ID of the contact for which the report is being generated.
        /// </summary>
        /// <value>The unique ID of the contact for which the report is being generated.</value>
        /// <example>71600990-908b-11e6-907f-0000166bff25</example>
        [DataMember(Name = "contact_id", IsRequired = true, EmitDefaultValue = true)]
        public Guid ContactId { get; set; }

        /// <summary>
        /// The number of activities included in the calculation.
        /// </summary>
        /// <value>The number of activities included in the calculation.</value>
        /// <example>10</example>
        [DataMember(Name = "included_activities_count", IsRequired = true, EmitDefaultValue = true)]
        public int IncludedActivitiesCount { get; set; }

        /// <summary>
        /// The average rate the contact opened emails sent to them.
        /// </summary>
        /// <value>The average rate the contact opened emails sent to them.</value>
        /// <example>0.6</example>
        [DataMember(Name = "average_open_rate", IsRequired = true, EmitDefaultValue = true)]
        public double AverageOpenRate { get; set; }

        /// <summary>
        /// The average rate the contact clicked on links in emails sent to them.
        /// </summary>
        /// <value>The average rate the contact clicked on links in emails sent to them.</value>
        /// <example>0.6</example>
        [DataMember(Name = "average_click_rate", IsRequired = true, EmitDefaultValue = true)]
        public double AverageClickRate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactOpenAndClickRates {\n");
            sb.Append("  ContactId: ").Append(ContactId).Append("\n");
            sb.Append("  IncludedActivitiesCount: ").Append(IncludedActivitiesCount).Append("\n");
            sb.Append("  AverageOpenRate: ").Append(AverageOpenRate).Append("\n");
            sb.Append("  AverageClickRate: ").Append(AverageClickRate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
