/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// EmailCampaignComplete
    /// </summary>
    [DataContract(Name = "EmailCampaignComplete")]
    public partial class EmailCampaignComplete : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignComplete" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmailCampaignComplete() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignComplete" /> class.
        /// </summary>
        /// <param name="name">The unique and descriptive name that you specify for the email campaign. (required).</param>
        /// <param name="emailCampaignActivities">The content of the email campaign as an array that contains a single email campaign activity object. (required).</param>
        public EmailCampaignComplete(string name = default(string), List<CreateEmailCampaignRequestEmailCampaignActivitiesInner> emailCampaignActivities = default(List<CreateEmailCampaignRequestEmailCampaignActivitiesInner>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for EmailCampaignComplete and cannot be null");
            }
            this.Name = name;
            // to ensure "emailCampaignActivities" is required (not null)
            if (emailCampaignActivities == null)
            {
                throw new ArgumentNullException("emailCampaignActivities is a required property for EmailCampaignComplete and cannot be null");
            }
            this.EmailCampaignActivities = emailCampaignActivities;
        }

        /// <summary>
        /// The unique and descriptive name that you specify for the email campaign.
        /// </summary>
        /// <value>The unique and descriptive name that you specify for the email campaign.</value>
        /// <example>December Newsletter for Dog Lovers</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The content of the email campaign as an array that contains a single email campaign activity object.
        /// </summary>
        /// <value>The content of the email campaign as an array that contains a single email campaign activity object.</value>
        [DataMember(Name = "email_campaign_activities", IsRequired = true, EmitDefaultValue = true)]
        public List<CreateEmailCampaignRequestEmailCampaignActivitiesInner> EmailCampaignActivities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmailCampaignComplete {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EmailCampaignActivities: ").Append(EmailCampaignActivities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Name, length must be less than 80.", new [] { "Name" });
            }

            yield break;
        }
    }

}
