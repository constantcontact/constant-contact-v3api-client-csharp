/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// The &lt;code&gt;source&lt;/code&gt; object specifies which contacts you are adding to your targeted lists using one of four mutually exclusive properties.
    /// </summary>
    [DataContract(Name = "createListAddActivity_request_source")]
    public partial class CreateListAddActivityRequestSource : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateListAddActivityRequestSource" /> class.
        /// </summary>
        /// <param name="listIds">Specifies which contacts you are adding to lists as an array of up to 50 contact &lt;code&gt;list_id&lt;/code&gt; values. This property is mutually exclusive with &lt;code&gt;contact_ids&lt;/code&gt;, &lt;code&gt;all_active_contacts&lt;/code&gt; (billable), and &lt;code&gt;segment_id&lt;/code&gt;..</param>
        /// <param name="allActiveContacts">Adds all active (billable) contacts to your targeted lists. This property is mutually exclusive with &lt;code&gt;contact_ids&lt;/code&gt;, &lt;code&gt;list_ids&lt;/code&gt;, and &lt;code&gt;segment_id&lt;/code&gt;. (default to false).</param>
        /// <param name="contactIds">Specifies which contacts (up to 500) you are adding to lists as an array of &lt;code&gt;contact_id&lt;/code&gt; values. This property is mutually exclusive with &lt;code&gt;list_ids&lt;/code&gt;, &lt;code&gt;all_active_contacts&lt;/code&gt; (billable), and &lt;code&gt;segment_id&lt;/code&gt;..</param>
        /// <param name="tagIds">Adds all contacts assigned with the specified &lt;code&gt;tag_id&lt;/code&gt;s to your target lists. This property is mutually exclusive with all other &lt;code&gt;source&lt;/code&gt; properties..</param>
        /// <param name="engagementLevel">Adds all contacts that meet the selected  &lt;code&gt;engagement_level &lt;/code&gt; to your target lists. This property is mutually exclusive with all other &lt;code&gt;source&lt;/code&gt; properties..</param>
        /// <param name="segmentId">Specifies which contacts you are adding to lists as a single &lt;code&gt;segment_id&lt;/code&gt; value. This property is mutually exclusive with &lt;code&gt;list_ids&lt;/code&gt;, &lt;code&gt;all_active_contacts&lt;/code&gt; (billable), and &lt;code&gt;contact_ids&lt;/code&gt;..</param>
        public CreateListAddActivityRequestSource(List<Guid> listIds = default(List<Guid>), bool allActiveContacts = false, List<Guid> contactIds = default(List<Guid>), List<Guid> tagIds = default(List<Guid>), string engagementLevel = default(string), int segmentId = default(int))
        {
            this.ListIds = listIds;
            this.AllActiveContacts = allActiveContacts;
            this.ContactIds = contactIds;
            this.TagIds = tagIds;
            this.EngagementLevel = engagementLevel;
            this.SegmentId = segmentId;
        }

        /// <summary>
        /// Specifies which contacts you are adding to lists as an array of up to 50 contact &lt;code&gt;list_id&lt;/code&gt; values. This property is mutually exclusive with &lt;code&gt;contact_ids&lt;/code&gt;, &lt;code&gt;all_active_contacts&lt;/code&gt; (billable), and &lt;code&gt;segment_id&lt;/code&gt;.
        /// </summary>
        /// <value>Specifies which contacts you are adding to lists as an array of up to 50 contact &lt;code&gt;list_id&lt;/code&gt; values. This property is mutually exclusive with &lt;code&gt;contact_ids&lt;/code&gt;, &lt;code&gt;all_active_contacts&lt;/code&gt; (billable), and &lt;code&gt;segment_id&lt;/code&gt;.</value>
        [DataMember(Name = "list_ids", EmitDefaultValue = false)]
        public List<Guid> ListIds { get; set; }

        /// <summary>
        /// Adds all active (billable) contacts to your targeted lists. This property is mutually exclusive with &lt;code&gt;contact_ids&lt;/code&gt;, &lt;code&gt;list_ids&lt;/code&gt;, and &lt;code&gt;segment_id&lt;/code&gt;.
        /// </summary>
        /// <value>Adds all active (billable) contacts to your targeted lists. This property is mutually exclusive with &lt;code&gt;contact_ids&lt;/code&gt;, &lt;code&gt;list_ids&lt;/code&gt;, and &lt;code&gt;segment_id&lt;/code&gt;.</value>
        /// <example>true</example>
        [DataMember(Name = "all_active_contacts", EmitDefaultValue = true)]
        public bool AllActiveContacts { get; set; }

        /// <summary>
        /// Specifies which contacts (up to 500) you are adding to lists as an array of &lt;code&gt;contact_id&lt;/code&gt; values. This property is mutually exclusive with &lt;code&gt;list_ids&lt;/code&gt;, &lt;code&gt;all_active_contacts&lt;/code&gt; (billable), and &lt;code&gt;segment_id&lt;/code&gt;.
        /// </summary>
        /// <value>Specifies which contacts (up to 500) you are adding to lists as an array of &lt;code&gt;contact_id&lt;/code&gt; values. This property is mutually exclusive with &lt;code&gt;list_ids&lt;/code&gt;, &lt;code&gt;all_active_contacts&lt;/code&gt; (billable), and &lt;code&gt;segment_id&lt;/code&gt;.</value>
        [DataMember(Name = "contact_ids", EmitDefaultValue = false)]
        public List<Guid> ContactIds { get; set; }

        /// <summary>
        /// Adds all contacts assigned with the specified &lt;code&gt;tag_id&lt;/code&gt;s to your target lists. This property is mutually exclusive with all other &lt;code&gt;source&lt;/code&gt; properties.
        /// </summary>
        /// <value>Adds all contacts assigned with the specified &lt;code&gt;tag_id&lt;/code&gt;s to your target lists. This property is mutually exclusive with all other &lt;code&gt;source&lt;/code&gt; properties.</value>
        [DataMember(Name = "tag_ids", EmitDefaultValue = false)]
        public List<Guid> TagIds { get; set; }

        /// <summary>
        /// Adds all contacts that meet the selected  &lt;code&gt;engagement_level &lt;/code&gt; to your target lists. This property is mutually exclusive with all other &lt;code&gt;source&lt;/code&gt; properties.
        /// </summary>
        /// <value>Adds all contacts that meet the selected  &lt;code&gt;engagement_level &lt;/code&gt; to your target lists. This property is mutually exclusive with all other &lt;code&gt;source&lt;/code&gt; properties.</value>
        /// <example>high</example>
        [DataMember(Name = "engagement_level", EmitDefaultValue = false)]
        public string EngagementLevel { get; set; }

        /// <summary>
        /// Specifies which contacts you are adding to lists as a single &lt;code&gt;segment_id&lt;/code&gt; value. This property is mutually exclusive with &lt;code&gt;list_ids&lt;/code&gt;, &lt;code&gt;all_active_contacts&lt;/code&gt; (billable), and &lt;code&gt;contact_ids&lt;/code&gt;.
        /// </summary>
        /// <value>Specifies which contacts you are adding to lists as a single &lt;code&gt;segment_id&lt;/code&gt; value. This property is mutually exclusive with &lt;code&gt;list_ids&lt;/code&gt;, &lt;code&gt;all_active_contacts&lt;/code&gt; (billable), and &lt;code&gt;contact_ids&lt;/code&gt;.</value>
        /// <example>12</example>
        [DataMember(Name = "segment_id", EmitDefaultValue = false)]
        public int SegmentId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateListAddActivityRequestSource {\n");
            sb.Append("  ListIds: ").Append(ListIds).Append("\n");
            sb.Append("  AllActiveContacts: ").Append(AllActiveContacts).Append("\n");
            sb.Append("  ContactIds: ").Append(ContactIds).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  EngagementLevel: ").Append(EngagementLevel).Append("\n");
            sb.Append("  SegmentId: ").Append(SegmentId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
