/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Export contact objects to a CSV file. By default, all contacts in the user&#39;s account are exported unless a filtering parameter is specified.
    /// </summary>
    [DataContract(Name = "ContactsExport")]
    public partial class ContactsExport : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsExport" /> class.
        /// </summary>
        /// <param name="contactIds">Exports up to 500 specific contacts.  This property is mutually exclusive with all other filtering criteria except with&lt;code&gt;status&lt;/code&gt;..</param>
        /// <param name="listIds">Exports all of the contacts inside of up to 50 contact lists. This property is mutually exclusive with all other filtering criteria except with either &lt;code&gt;status&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt;..</param>
        /// <param name="tagIds">Exports contacts assigned one or more of the tags (&lt;code&gt;tag_id&lt;/code&gt;) specified. This property is mutually exclusive with all other filtering criteria..</param>
        /// <param name="newSubscriber">Set to &lt;code&gt;true&lt;/code&gt; to only export contacts that subscribed within the last 30 days. Default setting is &lt;code&gt;false&lt;/code&gt;. This property is mutually exclusive with all other filtering criteria except  with either  &lt;code&gt;list_ids&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt;. .</param>
        /// <param name="segmentId">Specify the &lt;code&gt;segment_id&lt;/code&gt; from which you want to export all contacts that meet the specified &lt;code&gt;segment_criteria&lt;/code&gt;. You can only specify one &lt;code&gt;segment_id&lt;/code&gt;. This property is mutually exclusive with all other filtering criteria..</param>
        /// <param name="fields">By default , all fields are returned. Use this array to only export specific contact fields. You must export &lt;code&gt;email_address&lt;/code&gt; to successfully export &lt;code&gt;email_optin_source&lt;/code&gt;, &lt;code&gt;email_optin_date&lt;/code&gt;, &lt;code&gt;email_optout_source&lt;/code&gt;, &lt;code&gt;email_optout_date&lt;/code&gt;, or &lt;code&gt;email_optout_reason&lt;/code&gt;..</param>
        /// <param name="status">Allows you to export only contacts that have a specific status value. This property is mutually exclusive with all other filtering criteria except with either  &lt;code&gt;contact_ids&lt;/code&gt; or &lt;code&gt;list_ids&lt;/code&gt;..</param>
        /// <param name="exclude">exclude.</param>
        public ContactsExport(List<Guid> contactIds = default(List<Guid>), List<Guid> listIds = default(List<Guid>), List<Guid> tagIds = default(List<Guid>), bool newSubscriber = default(bool), int segmentId = default(int), List<string> fields = default(List<string>), string status = default(string), CreateExportActivityRequestExclude exclude = default(CreateExportActivityRequestExclude))
        {
            this.ContactIds = contactIds;
            this.ListIds = listIds;
            this.TagIds = tagIds;
            this.NewSubscriber = newSubscriber;
            this.SegmentId = segmentId;
            this.Fields = fields;
            this.Status = status;
            this.Exclude = exclude;
        }

        /// <summary>
        /// Exports up to 500 specific contacts.  This property is mutually exclusive with all other filtering criteria except with&lt;code&gt;status&lt;/code&gt;.
        /// </summary>
        /// <value>Exports up to 500 specific contacts.  This property is mutually exclusive with all other filtering criteria except with&lt;code&gt;status&lt;/code&gt;.</value>
        [DataMember(Name = "contact_ids", EmitDefaultValue = false)]
        public List<Guid> ContactIds { get; set; }

        /// <summary>
        /// Exports all of the contacts inside of up to 50 contact lists. This property is mutually exclusive with all other filtering criteria except with either &lt;code&gt;status&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt;.
        /// </summary>
        /// <value>Exports all of the contacts inside of up to 50 contact lists. This property is mutually exclusive with all other filtering criteria except with either &lt;code&gt;status&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt;.</value>
        [DataMember(Name = "list_ids", EmitDefaultValue = false)]
        public List<Guid> ListIds { get; set; }

        /// <summary>
        /// Exports contacts assigned one or more of the tags (&lt;code&gt;tag_id&lt;/code&gt;) specified. This property is mutually exclusive with all other filtering criteria.
        /// </summary>
        /// <value>Exports contacts assigned one or more of the tags (&lt;code&gt;tag_id&lt;/code&gt;) specified. This property is mutually exclusive with all other filtering criteria.</value>
        [DataMember(Name = "tag_ids", EmitDefaultValue = false)]
        public List<Guid> TagIds { get; set; }

        /// <summary>
        /// Set to &lt;code&gt;true&lt;/code&gt; to only export contacts that subscribed within the last 30 days. Default setting is &lt;code&gt;false&lt;/code&gt;. This property is mutually exclusive with all other filtering criteria except  with either  &lt;code&gt;list_ids&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt;. 
        /// </summary>
        /// <value>Set to &lt;code&gt;true&lt;/code&gt; to only export contacts that subscribed within the last 30 days. Default setting is &lt;code&gt;false&lt;/code&gt;. This property is mutually exclusive with all other filtering criteria except  with either  &lt;code&gt;list_ids&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt;. </value>
        /// <example>true</example>
        [DataMember(Name = "new_subscriber", EmitDefaultValue = true)]
        public bool NewSubscriber { get; set; }

        /// <summary>
        /// Specify the &lt;code&gt;segment_id&lt;/code&gt; from which you want to export all contacts that meet the specified &lt;code&gt;segment_criteria&lt;/code&gt;. You can only specify one &lt;code&gt;segment_id&lt;/code&gt;. This property is mutually exclusive with all other filtering criteria.
        /// </summary>
        /// <value>Specify the &lt;code&gt;segment_id&lt;/code&gt; from which you want to export all contacts that meet the specified &lt;code&gt;segment_criteria&lt;/code&gt;. You can only specify one &lt;code&gt;segment_id&lt;/code&gt;. This property is mutually exclusive with all other filtering criteria.</value>
        /// <example>12</example>
        [DataMember(Name = "segment_id", EmitDefaultValue = false)]
        public int SegmentId { get; set; }

        /// <summary>
        /// By default , all fields are returned. Use this array to only export specific contact fields. You must export &lt;code&gt;email_address&lt;/code&gt; to successfully export &lt;code&gt;email_optin_source&lt;/code&gt;, &lt;code&gt;email_optin_date&lt;/code&gt;, &lt;code&gt;email_optout_source&lt;/code&gt;, &lt;code&gt;email_optout_date&lt;/code&gt;, or &lt;code&gt;email_optout_reason&lt;/code&gt;.
        /// </summary>
        /// <value>By default , all fields are returned. Use this array to only export specific contact fields. You must export &lt;code&gt;email_address&lt;/code&gt; to successfully export &lt;code&gt;email_optin_source&lt;/code&gt;, &lt;code&gt;email_optin_date&lt;/code&gt;, &lt;code&gt;email_optout_source&lt;/code&gt;, &lt;code&gt;email_optout_date&lt;/code&gt;, or &lt;code&gt;email_optout_reason&lt;/code&gt;.</value>
        [DataMember(Name = "fields", EmitDefaultValue = false)]
        public List<string> Fields { get; set; }

        /// <summary>
        /// Allows you to export only contacts that have a specific status value. This property is mutually exclusive with all other filtering criteria except with either  &lt;code&gt;contact_ids&lt;/code&gt; or &lt;code&gt;list_ids&lt;/code&gt;.
        /// </summary>
        /// <value>Allows you to export only contacts that have a specific status value. This property is mutually exclusive with all other filtering criteria except with either  &lt;code&gt;contact_ids&lt;/code&gt; or &lt;code&gt;list_ids&lt;/code&gt;.</value>
        /// <example>unsubscribed</example>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Exclude
        /// </summary>
        [DataMember(Name = "exclude", EmitDefaultValue = false)]
        public CreateExportActivityRequestExclude Exclude { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ContactsExport {\n");
            sb.Append("  ContactIds: ").Append(ContactIds).Append("\n");
            sb.Append("  ListIds: ").Append(ListIds).Append("\n");
            sb.Append("  TagIds: ").Append(TagIds).Append("\n");
            sb.Append("  NewSubscriber: ").Append(NewSubscriber).Append("\n");
            sb.Append("  SegmentId: ").Append(SegmentId).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Exclude: ").Append(Exclude).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
