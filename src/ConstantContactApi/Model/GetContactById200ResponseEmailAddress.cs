/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// A contact subresource describing the contact&#39;s email address.
    /// </summary>
    [DataContract(Name = "getContactById_200_response_email_address")]
    public partial class GetContactById200ResponseEmailAddress : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContactById200ResponseEmailAddress" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetContactById200ResponseEmailAddress() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="GetContactById200ResponseEmailAddress" /> class.
        /// </summary>
        /// <param name="address">The email address of the contact. The email address must be unique for each contact. (required).</param>
        /// <param name="permissionToSend">Identifies the type of permission that the Constant Contact account has to send email to the contact. Types of permission: explicit, implicit, not_set, pending_confirmation, temp_hold, unsubscribed..</param>
        /// <param name="optInSource">Describes who opted-in the email_address; valid values are Contact or Account. Your integration must accurately identify &lt;code&gt;opt_in_source&lt;/code&gt; for compliance reasons; value is set on POST, and is read-only going forward..</param>
        /// <param name="optOutReason">The reason, as provided by the contact, that they unsubscribed/opted-out of receiving email campaigns..</param>
        public GetContactById200ResponseEmailAddress(string address = default(string), string permissionToSend = default(string), string optInSource = default(string), string optOutReason = default(string))
        {
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new ArgumentNullException("address is a required property for GetContactById200ResponseEmailAddress and cannot be null");
            }
            this.Address = address;
            this.PermissionToSend = permissionToSend;
            this.OptInSource = optInSource;
            this.OptOutReason = optOutReason;
        }

        /// <summary>
        /// The email address of the contact. The email address must be unique for each contact.
        /// </summary>
        /// <value>The email address of the contact. The email address must be unique for each contact.</value>
        /// <example>dlang@example.com</example>
        [DataMember(Name = "address", IsRequired = true, EmitDefaultValue = true)]
        public string Address { get; set; }

        /// <summary>
        /// Identifies the type of permission that the Constant Contact account has to send email to the contact. Types of permission: explicit, implicit, not_set, pending_confirmation, temp_hold, unsubscribed.
        /// </summary>
        /// <value>Identifies the type of permission that the Constant Contact account has to send email to the contact. Types of permission: explicit, implicit, not_set, pending_confirmation, temp_hold, unsubscribed.</value>
        /// <example>implicit</example>
        [DataMember(Name = "permission_to_send", EmitDefaultValue = false)]
        public string PermissionToSend { get; set; }

        /// <summary>
        /// Date and time that the email_address was created, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>Date and time that the email_address was created, in ISO-8601 format. System generated.</value>
        /// <example>2016-03-03T10:53:04-05:00</example>
        [DataMember(Name = "created_at", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; private set; }

        /// <summary>
        /// Returns false as CreatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreatedAt()
        {
            return false;
        }
        /// <summary>
        /// Date and time that the email_address was last updated, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>Date and time that the email_address was last updated, in ISO-8601 format. System generated.</value>
        /// <example>2016-03-03T10:56:29-05:00</example>
        [DataMember(Name = "updated_at", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; private set; }

        /// <summary>
        /// Returns false as UpdatedAt should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpdatedAt()
        {
            return false;
        }
        /// <summary>
        /// Describes who opted-in the email_address; valid values are Contact or Account. Your integration must accurately identify &lt;code&gt;opt_in_source&lt;/code&gt; for compliance reasons; value is set on POST, and is read-only going forward.
        /// </summary>
        /// <value>Describes who opted-in the email_address; valid values are Contact or Account. Your integration must accurately identify &lt;code&gt;opt_in_source&lt;/code&gt; for compliance reasons; value is set on POST, and is read-only going forward.</value>
        /// <example>Contact</example>
        [DataMember(Name = "opt_in_source", EmitDefaultValue = false)]
        public string OptInSource { get; set; }

        /// <summary>
        /// Date and time that the email_address was opted-in to receive email from the account, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>Date and time that the email_address was opted-in to receive email from the account, in ISO-8601 format. System generated.</value>
        /// <example>2016-01-23T13:48:44.108Z</example>
        [DataMember(Name = "opt_in_date", EmitDefaultValue = false)]
        public DateTime OptInDate { get; private set; }

        /// <summary>
        /// Returns false as OptInDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOptInDate()
        {
            return false;
        }
        /// <summary>
        /// Describes the source of the unsubscribed/opt-out action: either Account or Contact. If the Contact opted-out, then the account cannot send any campaigns to this contact until the contact opts back in. If the Account, then the account can add the contact back to any lists and send to them. Displayed only if contact has been unsubscribed/opt-out.
        /// </summary>
        /// <value>Describes the source of the unsubscribed/opt-out action: either Account or Contact. If the Contact opted-out, then the account cannot send any campaigns to this contact until the contact opts back in. If the Account, then the account can add the contact back to any lists and send to them. Displayed only if contact has been unsubscribed/opt-out.</value>
        /// <example>Contact</example>
        [DataMember(Name = "opt_out_source", EmitDefaultValue = false)]
        public string OptOutSource { get; private set; }

        /// <summary>
        /// Returns false as OptOutSource should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOptOutSource()
        {
            return false;
        }
        /// <summary>
        /// Date and time that the contact unsubscribed/opted-out of receiving email from the account, in ISO-8601 format. Displayed only if contact has been unsubscribed/opt-out. System generated.
        /// </summary>
        /// <value>Date and time that the contact unsubscribed/opted-out of receiving email from the account, in ISO-8601 format. Displayed only if contact has been unsubscribed/opt-out. System generated.</value>
        /// <example>2016-01-23T13:48:44.108Z</example>
        [DataMember(Name = "opt_out_date", EmitDefaultValue = false)]
        public DateTime OptOutDate { get; private set; }

        /// <summary>
        /// Returns false as OptOutDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOptOutDate()
        {
            return false;
        }
        /// <summary>
        /// The reason, as provided by the contact, that they unsubscribed/opted-out of receiving email campaigns.
        /// </summary>
        /// <value>The reason, as provided by the contact, that they unsubscribed/opted-out of receiving email campaigns.</value>
        /// <example>I am no longer interested in this service.</example>
        [DataMember(Name = "opt_out_reason", EmitDefaultValue = false)]
        public string OptOutReason { get; set; }

        /// <summary>
        /// Indicates if the contact confirmed their email address after they subscribed to receive emails. Possible values: pending, confirmed, off.
        /// </summary>
        /// <value>Indicates if the contact confirmed their email address after they subscribed to receive emails. Possible values: pending, confirmed, off.</value>
        /// <example>confirmed</example>
        [DataMember(Name = "confirm_status", EmitDefaultValue = false)]
        public string ConfirmStatus { get; private set; }

        /// <summary>
        /// Returns false as ConfirmStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConfirmStatus()
        {
            return false;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetContactById200ResponseEmailAddress {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  PermissionToSend: ").Append(PermissionToSend).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  OptInSource: ").Append(OptInSource).Append("\n");
            sb.Append("  OptInDate: ").Append(OptInDate).Append("\n");
            sb.Append("  OptOutSource: ").Append(OptOutSource).Append("\n");
            sb.Append("  OptOutDate: ").Append(OptOutDate).Append("\n");
            sb.Append("  OptOutReason: ").Append(OptOutReason).Append("\n");
            sb.Append("  ConfirmStatus: ").Append(ConfirmStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Address (string) maxLength
            if (this.Address != null && this.Address.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Address, length must be less than 80.", new [] { "Address" });
            }

            // OptOutReason (string) maxLength
            if (this.OptOutReason != null && this.OptOutReason.Length > 255)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OptOutReason, length must be less than 255.", new [] { "OptOutReason" });
            }

            yield break;
        }
    }

}
