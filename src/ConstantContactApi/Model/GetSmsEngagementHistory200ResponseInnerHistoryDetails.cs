/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = ConstantContactApi.Client.OpenAPIDateConverter;

namespace ConstantContactApi.Model
{
    /// <summary>
    /// Additional details about the SMS consent actions (opt-in, opt-out) in JSON format. The  &lt;code&gt;consent_action_type&lt;/code&gt; and the method used to add or update a contacts SMS details determines which properties are returned in the results.
    /// </summary>
    [DataContract(Name = "getSmsEngagementHistory_200_response_inner_history_details")]
    public partial class GetSmsEngagementHistory200ResponseInnerHistoryDetails : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetSmsEngagementHistory200ResponseInnerHistoryDetails" /> class.
        /// </summary>
        /// <param name="state">The code representing the consent state, including &lt;code&gt;E&lt;/code&gt; for optin and &lt;code&gt;O&lt;/code&gt; for Optin..</param>
        /// <param name="source">The code representing the consent source type, including &lt;code&gt;A&lt;/code&gt; for Account, &lt;code&gt;C&lt;/code&gt; for Contact, and &lt;code&gt;S&lt;/code&gt;&#39; for System..</param>
        /// <param name="consentType">The type of SMS consent used..</param>
        /// <param name="consentActionTime">The date and time that SMS engagement data was last updated, in ISO-8601 format. System generated..</param>
        /// <param name="consentActionType">The type of consent action provided..</param>
        /// <param name="consentMediumType">The code representing the medium used to provide consent. Medium types include mobile device (&lt;code&gt;MD&lt;/code&gt;). lead generation form(&lt;code&gt;LF&lt;/code&gt;), deactivation by carrier(&lt;code&gt;CD&lt;/code&gt;), import_file:(&lt;code&gt;FI&lt;/code&gt;), and system (&lt;code&gt;SY&lt;/code&gt;)..</param>
        /// <param name="sourceConsentTimestamp">The time that SMS consent was last updated..</param>
        /// <param name="sourceSmsNumber">If applicable, the SMS consent number associated with the source..</param>
        /// <param name="advertisedFrequency">If applicable, the advertising numeric component used to advertise to the contact.. For example, if &lt;code&gt;advertised_frequency&lt;/code&gt; is set to &lt;code&gt; 2&lt;/code&gt; , and  &lt;code&gt;advertised_interval&lt;/code&gt; is set to &lt;code&gt;M&lt;/code&gt;, the contact receives advertisements twice a month..</param>
        /// <param name="advertisedInterval">If applicable, the interval component used to advertise to the contact. For example, if &lt;code&gt;advertised_frequency&lt;/code&gt; is set to &lt;code&gt; 2&lt;/code&gt; , and  &lt;code&gt;advertised_interval&lt;/code&gt; is set to &lt;code&gt;M&lt;/code&gt;, the contact receives advertisements twice a month..</param>
        public GetSmsEngagementHistory200ResponseInnerHistoryDetails(string state = default(string), string source = default(string), string consentType = default(string), DateTime consentActionTime = default(DateTime), string consentActionType = default(string), string consentMediumType = default(string), string sourceConsentTimestamp = default(string), string sourceSmsNumber = default(string), int advertisedFrequency = default(int), string advertisedInterval = default(string))
        {
            this.State = state;
            this.Source = source;
            this.ConsentType = consentType;
            this.ConsentActionTime = consentActionTime;
            this.ConsentActionType = consentActionType;
            this.ConsentMediumType = consentMediumType;
            this.SourceConsentTimestamp = sourceConsentTimestamp;
            this.SourceSmsNumber = sourceSmsNumber;
            this.AdvertisedFrequency = advertisedFrequency;
            this.AdvertisedInterval = advertisedInterval;
        }

        /// <summary>
        /// The code representing the consent state, including &lt;code&gt;E&lt;/code&gt; for optin and &lt;code&gt;O&lt;/code&gt; for Optin.
        /// </summary>
        /// <value>The code representing the consent state, including &lt;code&gt;E&lt;/code&gt; for optin and &lt;code&gt;O&lt;/code&gt; for Optin.</value>
        /// <example>O</example>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public string State { get; set; }

        /// <summary>
        /// The code representing the consent source type, including &lt;code&gt;A&lt;/code&gt; for Account, &lt;code&gt;C&lt;/code&gt; for Contact, and &lt;code&gt;S&lt;/code&gt;&#39; for System.
        /// </summary>
        /// <value>The code representing the consent source type, including &lt;code&gt;A&lt;/code&gt; for Account, &lt;code&gt;C&lt;/code&gt; for Contact, and &lt;code&gt;S&lt;/code&gt;&#39; for System.</value>
        /// <example>A</example>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// The type of SMS consent used.
        /// </summary>
        /// <value>The type of SMS consent used.</value>
        /// <example>promotional_sms</example>
        [DataMember(Name = "consent_type", EmitDefaultValue = false)]
        public string ConsentType { get; set; }

        /// <summary>
        /// The date and time that SMS engagement data was last updated, in ISO-8601 format. System generated.
        /// </summary>
        /// <value>The date and time that SMS engagement data was last updated, in ISO-8601 format. System generated.</value>
        [DataMember(Name = "consent_action_time", EmitDefaultValue = false)]
        public DateTime ConsentActionTime { get; set; }

        /// <summary>
        /// The type of consent action provided.
        /// </summary>
        /// <value>The type of consent action provided.</value>
        /// <example>opt_out</example>
        [DataMember(Name = "consent_action_type", EmitDefaultValue = false)]
        public string ConsentActionType { get; set; }

        /// <summary>
        /// The code representing the medium used to provide consent. Medium types include mobile device (&lt;code&gt;MD&lt;/code&gt;). lead generation form(&lt;code&gt;LF&lt;/code&gt;), deactivation by carrier(&lt;code&gt;CD&lt;/code&gt;), import_file:(&lt;code&gt;FI&lt;/code&gt;), and system (&lt;code&gt;SY&lt;/code&gt;).
        /// </summary>
        /// <value>The code representing the medium used to provide consent. Medium types include mobile device (&lt;code&gt;MD&lt;/code&gt;). lead generation form(&lt;code&gt;LF&lt;/code&gt;), deactivation by carrier(&lt;code&gt;CD&lt;/code&gt;), import_file:(&lt;code&gt;FI&lt;/code&gt;), and system (&lt;code&gt;SY&lt;/code&gt;).</value>
        /// <example>MD</example>
        [DataMember(Name = "consent_medium_type", EmitDefaultValue = false)]
        public string ConsentMediumType { get; set; }

        /// <summary>
        /// The time that SMS consent was last updated.
        /// </summary>
        /// <value>The time that SMS consent was last updated.</value>
        /// <example>2016-03-03T10:53:04-05:0</example>
        [DataMember(Name = "source_consent_timestamp", EmitDefaultValue = false)]
        public string SourceConsentTimestamp { get; set; }

        /// <summary>
        /// If applicable, the SMS consent number associated with the source.
        /// </summary>
        /// <value>If applicable, the SMS consent number associated with the source.</value>
        /// <example>6035550239</example>
        [DataMember(Name = "source_sms_number", EmitDefaultValue = false)]
        public string SourceSmsNumber { get; set; }

        /// <summary>
        /// If applicable, the advertising numeric component used to advertise to the contact.. For example, if &lt;code&gt;advertised_frequency&lt;/code&gt; is set to &lt;code&gt; 2&lt;/code&gt; , and  &lt;code&gt;advertised_interval&lt;/code&gt; is set to &lt;code&gt;M&lt;/code&gt;, the contact receives advertisements twice a month.
        /// </summary>
        /// <value>If applicable, the advertising numeric component used to advertise to the contact.. For example, if &lt;code&gt;advertised_frequency&lt;/code&gt; is set to &lt;code&gt; 2&lt;/code&gt; , and  &lt;code&gt;advertised_interval&lt;/code&gt; is set to &lt;code&gt;M&lt;/code&gt;, the contact receives advertisements twice a month.</value>
        /// <example>2</example>
        [DataMember(Name = "advertised_frequency", EmitDefaultValue = false)]
        public int AdvertisedFrequency { get; set; }

        /// <summary>
        /// If applicable, the interval component used to advertise to the contact. For example, if &lt;code&gt;advertised_frequency&lt;/code&gt; is set to &lt;code&gt; 2&lt;/code&gt; , and  &lt;code&gt;advertised_interval&lt;/code&gt; is set to &lt;code&gt;M&lt;/code&gt;, the contact receives advertisements twice a month.
        /// </summary>
        /// <value>If applicable, the interval component used to advertise to the contact. For example, if &lt;code&gt;advertised_frequency&lt;/code&gt; is set to &lt;code&gt; 2&lt;/code&gt; , and  &lt;code&gt;advertised_interval&lt;/code&gt; is set to &lt;code&gt;M&lt;/code&gt;, the contact receives advertisements twice a month.</value>
        /// <example>W</example>
        [DataMember(Name = "advertised_interval", EmitDefaultValue = false)]
        public string AdvertisedInterval { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetSmsEngagementHistory200ResponseInnerHistoryDetails {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ConsentType: ").Append(ConsentType).Append("\n");
            sb.Append("  ConsentActionTime: ").Append(ConsentActionTime).Append("\n");
            sb.Append("  ConsentActionType: ").Append(ConsentActionType).Append("\n");
            sb.Append("  ConsentMediumType: ").Append(ConsentMediumType).Append("\n");
            sb.Append("  SourceConsentTimestamp: ").Append(SourceConsentTimestamp).Append("\n");
            sb.Append("  SourceSmsNumber: ").Append(SourceSmsNumber).Append("\n");
            sb.Append("  AdvertisedFrequency: ").Append(AdvertisedFrequency).Append("\n");
            sb.Append("  AdvertisedInterval: ").Append(AdvertisedInterval).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
