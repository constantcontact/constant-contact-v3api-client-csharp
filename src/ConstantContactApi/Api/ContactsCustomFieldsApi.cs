/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsCustomFieldsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// POST (create) a custom_field
        /// </summary>
        /// <remarks>
        /// This POST request adds a new &#x60;custom_field&#x60; to the user&#39;s account. A user can configure up to 100 &#x60;custom_fields&#x60; in their account.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldRequest">The JSON payload required to create a new &#x60;custom_field&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCustomField200Response</returns>
        GetCustomField200Response CreateCustomFields(UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0);

        /// <summary>
        /// POST (create) a custom_field
        /// </summary>
        /// <remarks>
        /// This POST request adds a new &#x60;custom_field&#x60; to the user&#39;s account. A user can configure up to 100 &#x60;custom_fields&#x60; in their account.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldRequest">The JSON payload required to create a new &#x60;custom_field&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCustomField200Response</returns>
        ApiResponse<GetCustomField200Response> CreateCustomFieldsWithHttpInfo(UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0);
        /// <summary>
        /// DELETE a custom_field
        /// </summary>
        /// <remarks>
        /// This DELETE request deletes a custom_field from the user&#39;s account
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the custom_field on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteCustomField(string customFieldId, int operationIndex = 0);

        /// <summary>
        /// DELETE a custom_field
        /// </summary>
        /// <remarks>
        /// This DELETE request deletes a custom_field from the user&#39;s account
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the custom_field on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteCustomFieldWithHttpInfo(string customFieldId, int operationIndex = 0);
        /// <summary>
        /// GET custom_fields Collection
        /// </summary>
        /// <remarks>
        /// This GET request returns all &#x60;custom_fields&#x60; defined in the user&#39;s account. &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the custom field update date.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 100, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllCustomFields200Response</returns>
        GetAllCustomFields200Response GetAllCustomFields(int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// GET custom_fields Collection
        /// </summary>
        /// <remarks>
        /// This GET request returns all &#x60;custom_fields&#x60; defined in the user&#39;s account. &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the custom field update date.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 100, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllCustomFields200Response</returns>
        ApiResponse<GetAllCustomFields200Response> GetAllCustomFieldsWithHttpInfo(int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// GET a custom_field
        /// </summary>
        /// <remarks>
        /// This GET call retrieves a &#x60;custom_field&#x60; resource, specified by &#x60;custom_field_id&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCustomField200Response</returns>
        GetCustomField200Response GetCustomField(string customFieldId, int operationIndex = 0);

        /// <summary>
        /// GET a custom_field
        /// </summary>
        /// <remarks>
        /// This GET call retrieves a &#x60;custom_field&#x60; resource, specified by &#x60;custom_field_id&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCustomField200Response</returns>
        ApiResponse<GetCustomField200Response> GetCustomFieldWithHttpInfo(string customFieldId, int operationIndex = 0);
        /// <summary>
        /// PUT (update) a custom_field
        /// </summary>
        /// <remarks>
        /// This PUT request updates an existing &#x60;custom_field&#x60; object.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="updateCustomFieldRequest">The JSON payload used to update an existing custom field. Any properties omitted in the PUT request are overwritten with a null value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCustomField200Response</returns>
        GetCustomField200Response UpdateCustomField(string customFieldId, UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0);

        /// <summary>
        /// PUT (update) a custom_field
        /// </summary>
        /// <remarks>
        /// This PUT request updates an existing &#x60;custom_field&#x60; object.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="updateCustomFieldRequest">The JSON payload used to update an existing custom field. Any properties omitted in the PUT request are overwritten with a null value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCustomField200Response</returns>
        ApiResponse<GetCustomField200Response> UpdateCustomFieldWithHttpInfo(string customFieldId, UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsCustomFieldsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// POST (create) a custom_field
        /// </summary>
        /// <remarks>
        /// This POST request adds a new &#x60;custom_field&#x60; to the user&#39;s account. A user can configure up to 100 &#x60;custom_fields&#x60; in their account.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldRequest">The JSON payload required to create a new &#x60;custom_field&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomField200Response</returns>
        System.Threading.Tasks.Task<GetCustomField200Response> CreateCustomFieldsAsync(UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST (create) a custom_field
        /// </summary>
        /// <remarks>
        /// This POST request adds a new &#x60;custom_field&#x60; to the user&#39;s account. A user can configure up to 100 &#x60;custom_fields&#x60; in their account.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldRequest">The JSON payload required to create a new &#x60;custom_field&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomField200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomField200Response>> CreateCustomFieldsWithHttpInfoAsync(UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DELETE a custom_field
        /// </summary>
        /// <remarks>
        /// This DELETE request deletes a custom_field from the user&#39;s account
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the custom_field on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteCustomFieldAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DELETE a custom_field
        /// </summary>
        /// <remarks>
        /// This DELETE request deletes a custom_field from the user&#39;s account
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the custom_field on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteCustomFieldWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET custom_fields Collection
        /// </summary>
        /// <remarks>
        /// This GET request returns all &#x60;custom_fields&#x60; defined in the user&#39;s account. &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the custom field update date.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 100, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllCustomFields200Response</returns>
        System.Threading.Tasks.Task<GetAllCustomFields200Response> GetAllCustomFieldsAsync(int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET custom_fields Collection
        /// </summary>
        /// <remarks>
        /// This GET request returns all &#x60;custom_fields&#x60; defined in the user&#39;s account. &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the custom field update date.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 100, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllCustomFields200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllCustomFields200Response>> GetAllCustomFieldsWithHttpInfoAsync(int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a custom_field
        /// </summary>
        /// <remarks>
        /// This GET call retrieves a &#x60;custom_field&#x60; resource, specified by &#x60;custom_field_id&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomField200Response</returns>
        System.Threading.Tasks.Task<GetCustomField200Response> GetCustomFieldAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a custom_field
        /// </summary>
        /// <remarks>
        /// This GET call retrieves a &#x60;custom_field&#x60; resource, specified by &#x60;custom_field_id&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomField200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomField200Response>> GetCustomFieldWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PUT (update) a custom_field
        /// </summary>
        /// <remarks>
        /// This PUT request updates an existing &#x60;custom_field&#x60; object.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="updateCustomFieldRequest">The JSON payload used to update an existing custom field. Any properties omitted in the PUT request are overwritten with a null value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomField200Response</returns>
        System.Threading.Tasks.Task<GetCustomField200Response> UpdateCustomFieldAsync(string customFieldId, UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PUT (update) a custom_field
        /// </summary>
        /// <remarks>
        /// This PUT request updates an existing &#x60;custom_field&#x60; object.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="updateCustomFieldRequest">The JSON payload used to update an existing custom field. Any properties omitted in the PUT request are overwritten with a null value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomField200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCustomField200Response>> UpdateCustomFieldWithHttpInfoAsync(string customFieldId, UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsCustomFieldsApi : IContactsCustomFieldsApiSync, IContactsCustomFieldsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsCustomFieldsApi : IContactsCustomFieldsApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsCustomFieldsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFieldsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsCustomFieldsApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFieldsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsCustomFieldsApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsCustomFieldsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactsCustomFieldsApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// POST (create) a custom_field This POST request adds a new &#x60;custom_field&#x60; to the user&#39;s account. A user can configure up to 100 &#x60;custom_fields&#x60; in their account.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldRequest">The JSON payload required to create a new &#x60;custom_field&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCustomField200Response</returns>
        public GetCustomField200Response CreateCustomFields(UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetCustomField200Response> localVarResponse = CreateCustomFieldsWithHttpInfo(updateCustomFieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (create) a custom_field This POST request adds a new &#x60;custom_field&#x60; to the user&#39;s account. A user can configure up to 100 &#x60;custom_fields&#x60; in their account.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldRequest">The JSON payload required to create a new &#x60;custom_field&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCustomField200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetCustomField200Response> CreateCustomFieldsWithHttpInfo(UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateCustomFieldRequest' is set
            if (updateCustomFieldRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateCustomFieldRequest' when calling ContactsCustomFieldsApi->CreateCustomFields");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCustomFieldRequest;

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.CreateCustomFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetCustomField200Response>("/contact_custom_fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST (create) a custom_field This POST request adds a new &#x60;custom_field&#x60; to the user&#39;s account. A user can configure up to 100 &#x60;custom_fields&#x60; in their account.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldRequest">The JSON payload required to create a new &#x60;custom_field&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomField200Response</returns>
        public async System.Threading.Tasks.Task<GetCustomField200Response> CreateCustomFieldsAsync(UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetCustomField200Response> localVarResponse = await CreateCustomFieldsWithHttpInfoAsync(updateCustomFieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (create) a custom_field This POST request adds a new &#x60;custom_field&#x60; to the user&#39;s account. A user can configure up to 100 &#x60;custom_fields&#x60; in their account.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateCustomFieldRequest">The JSON payload required to create a new &#x60;custom_field&#x60;</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomField200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetCustomField200Response>> CreateCustomFieldsWithHttpInfoAsync(UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateCustomFieldRequest' is set
            if (updateCustomFieldRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateCustomFieldRequest' when calling ContactsCustomFieldsApi->CreateCustomFields");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateCustomFieldRequest;

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.CreateCustomFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetCustomField200Response>("/contact_custom_fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE a custom_field This DELETE request deletes a custom_field from the user&#39;s account
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the custom_field on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteCustomField(string customFieldId, int operationIndex = 0)
        {
            DeleteCustomFieldWithHttpInfo(customFieldId);
        }

        /// <summary>
        /// DELETE a custom_field This DELETE request deletes a custom_field from the user&#39;s account
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the custom_field on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ConstantContactApi.Client.ApiResponse<Object> DeleteCustomFieldWithHttpInfo(string customFieldId, int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling ContactsCustomFieldsApi->DeleteCustomField");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", ConstantContactApi.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.DeleteCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/contact_custom_fields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE a custom_field This DELETE request deletes a custom_field from the user&#39;s account
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the custom_field on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteCustomFieldAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteCustomFieldWithHttpInfoAsync(customFieldId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// DELETE a custom_field This DELETE request deletes a custom_field from the user&#39;s account
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the custom_field on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<Object>> DeleteCustomFieldWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling ContactsCustomFieldsApi->DeleteCustomField");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", ConstantContactApi.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.DeleteCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/contact_custom_fields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET custom_fields Collection This GET request returns all &#x60;custom_fields&#x60; defined in the user&#39;s account. &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the custom field update date.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 100, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllCustomFields200Response</returns>
        public GetAllCustomFields200Response GetAllCustomFields(int? limit = default(int?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAllCustomFields200Response> localVarResponse = GetAllCustomFieldsWithHttpInfo(limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET custom_fields Collection This GET request returns all &#x60;custom_fields&#x60; defined in the user&#39;s account. &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the custom field update date.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 100, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllCustomFields200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetAllCustomFields200Response> GetAllCustomFieldsWithHttpInfo(int? limit = default(int?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.GetAllCustomFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllCustomFields200Response>("/contact_custom_fields", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET custom_fields Collection This GET request returns all &#x60;custom_fields&#x60; defined in the user&#39;s account. &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the custom field update date.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 100, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllCustomFields200Response</returns>
        public async System.Threading.Tasks.Task<GetAllCustomFields200Response> GetAllCustomFieldsAsync(int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAllCustomFields200Response> localVarResponse = await GetAllCustomFieldsWithHttpInfoAsync(limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET custom_fields Collection This GET request returns all &#x60;custom_fields&#x60; defined in the user&#39;s account. &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the custom field update date.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 100, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllCustomFields200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAllCustomFields200Response>> GetAllCustomFieldsWithHttpInfoAsync(int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.GetAllCustomFields";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllCustomFields200Response>("/contact_custom_fields", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllCustomFields", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a custom_field This GET call retrieves a &#x60;custom_field&#x60; resource, specified by &#x60;custom_field_id&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCustomField200Response</returns>
        public GetCustomField200Response GetCustomField(string customFieldId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetCustomField200Response> localVarResponse = GetCustomFieldWithHttpInfo(customFieldId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a custom_field This GET call retrieves a &#x60;custom_field&#x60; resource, specified by &#x60;custom_field_id&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCustomField200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetCustomField200Response> GetCustomFieldWithHttpInfo(string customFieldId, int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling ContactsCustomFieldsApi->GetCustomField");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", ConstantContactApi.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.GetCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCustomField200Response>("/contact_custom_fields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a custom_field This GET call retrieves a &#x60;custom_field&#x60; resource, specified by &#x60;custom_field_id&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomField200Response</returns>
        public async System.Threading.Tasks.Task<GetCustomField200Response> GetCustomFieldAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetCustomField200Response> localVarResponse = await GetCustomFieldWithHttpInfoAsync(customFieldId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a custom_field This GET call retrieves a &#x60;custom_field&#x60; resource, specified by &#x60;custom_field_id&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomField200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetCustomField200Response>> GetCustomFieldWithHttpInfoAsync(string customFieldId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling ContactsCustomFieldsApi->GetCustomField");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", ConstantContactApi.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.GetCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCustomField200Response>("/contact_custom_fields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) a custom_field This PUT request updates an existing &#x60;custom_field&#x60; object.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="updateCustomFieldRequest">The JSON payload used to update an existing custom field. Any properties omitted in the PUT request are overwritten with a null value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCustomField200Response</returns>
        public GetCustomField200Response UpdateCustomField(string customFieldId, UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetCustomField200Response> localVarResponse = UpdateCustomFieldWithHttpInfo(customFieldId, updateCustomFieldRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) a custom_field This PUT request updates an existing &#x60;custom_field&#x60; object.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="updateCustomFieldRequest">The JSON payload used to update an existing custom field. Any properties omitted in the PUT request are overwritten with a null value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCustomField200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetCustomField200Response> UpdateCustomFieldWithHttpInfo(string customFieldId, UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0)
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling ContactsCustomFieldsApi->UpdateCustomField");
            }

            // verify the required parameter 'updateCustomFieldRequest' is set
            if (updateCustomFieldRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateCustomFieldRequest' when calling ContactsCustomFieldsApi->UpdateCustomField");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", ConstantContactApi.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            localVarRequestOptions.Data = updateCustomFieldRequest;

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.UpdateCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GetCustomField200Response>("/contact_custom_fields/{custom_field_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) a custom_field This PUT request updates an existing &#x60;custom_field&#x60; object.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="updateCustomFieldRequest">The JSON payload used to update an existing custom field. Any properties omitted in the PUT request are overwritten with a null value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCustomField200Response</returns>
        public async System.Threading.Tasks.Task<GetCustomField200Response> UpdateCustomFieldAsync(string customFieldId, UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetCustomField200Response> localVarResponse = await UpdateCustomFieldWithHttpInfoAsync(customFieldId, updateCustomFieldRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) a custom_field This PUT request updates an existing &#x60;custom_field&#x60; object.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="customFieldId">Unique ID of the &#x60;custom_field&#x60; on which to operate.</param>
        /// <param name="updateCustomFieldRequest">The JSON payload used to update an existing custom field. Any properties omitted in the PUT request are overwritten with a null value.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCustomField200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetCustomField200Response>> UpdateCustomFieldWithHttpInfoAsync(string customFieldId, UpdateCustomFieldRequest updateCustomFieldRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'customFieldId' is set
            if (customFieldId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'customFieldId' when calling ContactsCustomFieldsApi->UpdateCustomField");
            }

            // verify the required parameter 'updateCustomFieldRequest' is set
            if (updateCustomFieldRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateCustomFieldRequest' when calling ContactsCustomFieldsApi->UpdateCustomField");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("custom_field_id", ConstantContactApi.Client.ClientUtils.ParameterToString(customFieldId)); // path parameter
            localVarRequestOptions.Data = updateCustomFieldRequest;

            localVarRequestOptions.Operation = "ContactsCustomFieldsApi.UpdateCustomField";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GetCustomField200Response>("/contact_custom_fields/{custom_field_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateCustomField", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
