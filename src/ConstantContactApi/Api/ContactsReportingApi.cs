/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsReportingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GET Average Open and Click Rates
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the average open and click rate for a given account and contact.&lt;p&gt;Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.&lt;/p&gt;&lt;p&gt;Returns the rates and the number of campaign activities that were included in the calculation.&lt;/p&gt;&lt;p&gt;If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactOpenClickRateReport200Response</returns>
        GetContactOpenClickRateReport200Response GetContactOpenClickRateReport(string contactId, string start, string end, int operationIndex = 0);

        /// <summary>
        /// GET Average Open and Click Rates
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the average open and click rate for a given account and contact.&lt;p&gt;Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.&lt;/p&gt;&lt;p&gt;Returns the rates and the number of campaign activities that were included in the calculation.&lt;/p&gt;&lt;p&gt;If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactOpenClickRateReport200Response</returns>
        ApiResponse<GetContactOpenClickRateReport200Response> GetContactOpenClickRateReportWithHttpInfo(string contactId, string start, string end, int operationIndex = 0);
        /// <summary>
        /// GET Contact Action Summary
        /// </summary>
        /// <remarks>
        /// Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactTrackingCountReport200Response</returns>
        GetContactTrackingCountReport200Response GetContactTrackingCountReport(string contactId, string start, string end, int operationIndex = 0);

        /// <summary>
        /// GET Contact Action Summary
        /// </summary>
        /// <remarks>
        /// Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactTrackingCountReport200Response</returns>
        ApiResponse<GetContactTrackingCountReport200Response> GetContactTrackingCountReportWithHttpInfo(string contactId, string start, string end, int operationIndex = 0);
        /// <summary>
        /// GET Contact Activity Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the tracking activity data for a single contact, sorted in descending activity date order.&lt;/p&gt; &lt;p&gt;You must chose either the &#x60;tracking_activities_list&#x60; query parameter and or the &#x60;tracking_activity_type&#x60; query parameter to specify one or more tracking activity types In the request. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.&lt;/p&gt;       &lt;table&gt;&lt;tr&gt;&lt;td colspan&#x3D;&#39;2&#39;&gt;Valid tracking activity types&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_sends&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Send activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_opens&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Email open tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_clicks&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Link click-through tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_bounces&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Bounce tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_optouts&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Opt-out tracking activities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;         &lt;td&gt;&lt;b&gt;em_forwards&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Forward to a friend tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_open&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page opens&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_click&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page clicks&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_add&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page adds&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_update &lt;/b&gt;&lt;/td&gt;&lt;td&gt; Landing page updates&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s ID for which tracking activity data is requested.</param>
        /// <param name="trackingActivitiesList">Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="trackingActivityType">Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="includeCampaignActivityNames">Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient. (optional, default to true)</param>
        /// <param name="limit">The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100. (optional, default to &quot;100&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactTrackingReport200Response</returns>
        GetContactTrackingReport200Response GetContactTrackingReport(string contactId, List<string>? trackingActivitiesList = default(List<string>?), List<string>? trackingActivityType = default(List<string>?), bool? includeCampaignActivityNames = default(bool?), string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET Contact Activity Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the tracking activity data for a single contact, sorted in descending activity date order.&lt;/p&gt; &lt;p&gt;You must chose either the &#x60;tracking_activities_list&#x60; query parameter and or the &#x60;tracking_activity_type&#x60; query parameter to specify one or more tracking activity types In the request. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.&lt;/p&gt;       &lt;table&gt;&lt;tr&gt;&lt;td colspan&#x3D;&#39;2&#39;&gt;Valid tracking activity types&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_sends&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Send activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_opens&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Email open tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_clicks&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Link click-through tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_bounces&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Bounce tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_optouts&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Opt-out tracking activities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;         &lt;td&gt;&lt;b&gt;em_forwards&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Forward to a friend tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_open&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page opens&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_click&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page clicks&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_add&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page adds&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_update &lt;/b&gt;&lt;/td&gt;&lt;td&gt; Landing page updates&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s ID for which tracking activity data is requested.</param>
        /// <param name="trackingActivitiesList">Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="trackingActivityType">Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="includeCampaignActivityNames">Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient. (optional, default to true)</param>
        /// <param name="limit">The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100. (optional, default to &quot;100&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactTrackingReport200Response</returns>
        ApiResponse<GetContactTrackingReport200Response> GetContactTrackingReportWithHttpInfo(string contactId, List<string>? trackingActivitiesList = default(List<string>?), List<string>? trackingActivityType = default(List<string>?), bool? includeCampaignActivityNames = default(bool?), string? limit = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsReportingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GET Average Open and Click Rates
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the average open and click rate for a given account and contact.&lt;p&gt;Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.&lt;/p&gt;&lt;p&gt;Returns the rates and the number of campaign activities that were included in the calculation.&lt;/p&gt;&lt;p&gt;If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactOpenClickRateReport200Response</returns>
        System.Threading.Tasks.Task<GetContactOpenClickRateReport200Response> GetContactOpenClickRateReportAsync(string contactId, string start, string end, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Average Open and Click Rates
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the average open and click rate for a given account and contact.&lt;p&gt;Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.&lt;/p&gt;&lt;p&gt;Returns the rates and the number of campaign activities that were included in the calculation.&lt;/p&gt;&lt;p&gt;If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.&lt;/p&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactOpenClickRateReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactOpenClickRateReport200Response>> GetContactOpenClickRateReportWithHttpInfoAsync(string contactId, string start, string end, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET Contact Action Summary
        /// </summary>
        /// <remarks>
        /// Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactTrackingCountReport200Response</returns>
        System.Threading.Tasks.Task<GetContactTrackingCountReport200Response> GetContactTrackingCountReportAsync(string contactId, string start, string end, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Contact Action Summary
        /// </summary>
        /// <remarks>
        /// Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactTrackingCountReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactTrackingCountReport200Response>> GetContactTrackingCountReportWithHttpInfoAsync(string contactId, string start, string end, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET Contact Activity Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the tracking activity data for a single contact, sorted in descending activity date order.&lt;/p&gt; &lt;p&gt;You must chose either the &#x60;tracking_activities_list&#x60; query parameter and or the &#x60;tracking_activity_type&#x60; query parameter to specify one or more tracking activity types In the request. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.&lt;/p&gt;       &lt;table&gt;&lt;tr&gt;&lt;td colspan&#x3D;&#39;2&#39;&gt;Valid tracking activity types&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_sends&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Send activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_opens&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Email open tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_clicks&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Link click-through tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_bounces&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Bounce tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_optouts&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Opt-out tracking activities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;         &lt;td&gt;&lt;b&gt;em_forwards&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Forward to a friend tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_open&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page opens&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_click&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page clicks&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_add&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page adds&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_update &lt;/b&gt;&lt;/td&gt;&lt;td&gt; Landing page updates&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s ID for which tracking activity data is requested.</param>
        /// <param name="trackingActivitiesList">Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="trackingActivityType">Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="includeCampaignActivityNames">Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient. (optional, default to true)</param>
        /// <param name="limit">The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100. (optional, default to &quot;100&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactTrackingReport200Response</returns>
        System.Threading.Tasks.Task<GetContactTrackingReport200Response> GetContactTrackingReportAsync(string contactId, List<string>? trackingActivitiesList = default(List<string>?), List<string>? trackingActivityType = default(List<string>?), bool? includeCampaignActivityNames = default(bool?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Contact Activity Details
        /// </summary>
        /// <remarks>
        /// &lt;p&gt;Gets the tracking activity data for a single contact, sorted in descending activity date order.&lt;/p&gt; &lt;p&gt;You must chose either the &#x60;tracking_activities_list&#x60; query parameter and or the &#x60;tracking_activity_type&#x60; query parameter to specify one or more tracking activity types In the request. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.&lt;/p&gt;       &lt;table&gt;&lt;tr&gt;&lt;td colspan&#x3D;&#39;2&#39;&gt;Valid tracking activity types&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_sends&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Send activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_opens&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Email open tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_clicks&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Link click-through tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_bounces&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Bounce tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_optouts&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Opt-out tracking activities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;         &lt;td&gt;&lt;b&gt;em_forwards&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Forward to a friend tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_open&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page opens&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_click&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page clicks&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_add&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page adds&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_update &lt;/b&gt;&lt;/td&gt;&lt;td&gt; Landing page updates&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s ID for which tracking activity data is requested.</param>
        /// <param name="trackingActivitiesList">Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="trackingActivityType">Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="includeCampaignActivityNames">Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient. (optional, default to true)</param>
        /// <param name="limit">The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100. (optional, default to &quot;100&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactTrackingReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactTrackingReport200Response>> GetContactTrackingReportWithHttpInfoAsync(string contactId, List<string>? trackingActivitiesList = default(List<string>?), List<string>? trackingActivityType = default(List<string>?), bool? includeCampaignActivityNames = default(bool?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsReportingApi : IContactsReportingApiSync, IContactsReportingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsReportingApi : IContactsReportingApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsReportingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsReportingApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsReportingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsReportingApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsReportingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactsReportingApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GET Average Open and Click Rates &lt;p&gt;Gets the average open and click rate for a given account and contact.&lt;p&gt;Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.&lt;/p&gt;&lt;p&gt;Returns the rates and the number of campaign activities that were included in the calculation.&lt;/p&gt;&lt;p&gt;If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactOpenClickRateReport200Response</returns>
        public GetContactOpenClickRateReport200Response GetContactOpenClickRateReport(string contactId, string start, string end, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetContactOpenClickRateReport200Response> localVarResponse = GetContactOpenClickRateReportWithHttpInfo(contactId, start, end);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Average Open and Click Rates &lt;p&gt;Gets the average open and click rate for a given account and contact.&lt;p&gt;Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.&lt;/p&gt;&lt;p&gt;Returns the rates and the number of campaign activities that were included in the calculation.&lt;/p&gt;&lt;p&gt;If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactOpenClickRateReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetContactOpenClickRateReport200Response> GetContactOpenClickRateReportWithHttpInfo(string contactId, string start, string end, int operationIndex = 0)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsReportingApi->GetContactOpenClickRateReport");
            }

            // verify the required parameter 'start' is set
            if (start == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'start' when calling ContactsReportingApi->GetContactOpenClickRateReport");
            }

            // verify the required parameter 'end' is set
            if (end == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'end' when calling ContactsReportingApi->GetContactOpenClickRateReport");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "end", end));

            localVarRequestOptions.Operation = "ContactsReportingApi.GetContactOpenClickRateReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContactOpenClickRateReport200Response>("/reports/contact_reports/{contact_id}/open_and_click_rates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactOpenClickRateReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Average Open and Click Rates &lt;p&gt;Gets the average open and click rate for a given account and contact.&lt;p&gt;Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.&lt;/p&gt;&lt;p&gt;Returns the rates and the number of campaign activities that were included in the calculation.&lt;/p&gt;&lt;p&gt;If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactOpenClickRateReport200Response</returns>
        public async System.Threading.Tasks.Task<GetContactOpenClickRateReport200Response> GetContactOpenClickRateReportAsync(string contactId, string start, string end, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetContactOpenClickRateReport200Response> localVarResponse = await GetContactOpenClickRateReportWithHttpInfoAsync(contactId, start, end, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Average Open and Click Rates &lt;p&gt;Gets the average open and click rate for a given account and contact.&lt;p&gt;Looks at all tracking activities for bulk emails from a given contact over the given date range. Range cannot exceed 5 years.&lt;/p&gt;&lt;p&gt;Returns the rates and the number of campaign activities that were included in the calculation.&lt;/p&gt;&lt;p&gt;If no activities fall into the given date range, all rates will return 0 and the number of included activities will be 0.&lt;/p&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactOpenClickRateReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetContactOpenClickRateReport200Response>> GetContactOpenClickRateReportWithHttpInfoAsync(string contactId, string start, string end, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsReportingApi->GetContactOpenClickRateReport");
            }

            // verify the required parameter 'start' is set
            if (start == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'start' when calling ContactsReportingApi->GetContactOpenClickRateReport");
            }

            // verify the required parameter 'end' is set
            if (end == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'end' when calling ContactsReportingApi->GetContactOpenClickRateReport");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "end", end));

            localVarRequestOptions.Operation = "ContactsReportingApi.GetContactOpenClickRateReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContactOpenClickRateReport200Response>("/reports/contact_reports/{contact_id}/open_and_click_rates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactOpenClickRateReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Contact Action Summary Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactTrackingCountReport200Response</returns>
        public GetContactTrackingCountReport200Response GetContactTrackingCountReport(string contactId, string start, string end, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetContactTrackingCountReport200Response> localVarResponse = GetContactTrackingCountReportWithHttpInfo(contactId, start, end);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Contact Action Summary Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactTrackingCountReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetContactTrackingCountReport200Response> GetContactTrackingCountReportWithHttpInfo(string contactId, string start, string end, int operationIndex = 0)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsReportingApi->GetContactTrackingCountReport");
            }

            // verify the required parameter 'start' is set
            if (start == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'start' when calling ContactsReportingApi->GetContactTrackingCountReport");
            }

            // verify the required parameter 'end' is set
            if (end == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'end' when calling ContactsReportingApi->GetContactTrackingCountReport");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "end", end));

            localVarRequestOptions.Operation = "ContactsReportingApi.GetContactTrackingCountReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContactTrackingCountReport200Response>("/reports/contact_reports/{contact_id}/activity_summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactTrackingCountReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Contact Action Summary Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactTrackingCountReport200Response</returns>
        public async System.Threading.Tasks.Task<GetContactTrackingCountReport200Response> GetContactTrackingCountReportAsync(string contactId, string start, string end, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetContactTrackingCountReport200Response> localVarResponse = await GetContactTrackingCountReportWithHttpInfoAsync(contactId, start, end, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Contact Action Summary Get a list of the recent emails (aka, campaign activities) sent to a specific contact and a summary of the actions the contact took on that email for the most recent 200 campaigns.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact id which is requesting tracking activity data (e.g. aa9ff7b0-478d-11e6-8059-00163e3c8e19)</param>
        /// <param name="start">The starting date, in ISO 8601 format, to use to get campaigns. For example: 2019-01-01T00:00:00-0500.</param>
        /// <param name="end">The ending date, in ISO 8601 format, to use to get campaigns. For example: 2019-12-01T00:00:00-0500.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactTrackingCountReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetContactTrackingCountReport200Response>> GetContactTrackingCountReportWithHttpInfoAsync(string contactId, string start, string end, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsReportingApi->GetContactTrackingCountReport");
            }

            // verify the required parameter 'start' is set
            if (start == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'start' when calling ContactsReportingApi->GetContactTrackingCountReport");
            }

            // verify the required parameter 'end' is set
            if (end == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'end' when calling ContactsReportingApi->GetContactTrackingCountReport");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "end", end));

            localVarRequestOptions.Operation = "ContactsReportingApi.GetContactTrackingCountReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContactTrackingCountReport200Response>("/reports/contact_reports/{contact_id}/activity_summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactTrackingCountReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Contact Activity Details &lt;p&gt;Gets the tracking activity data for a single contact, sorted in descending activity date order.&lt;/p&gt; &lt;p&gt;You must chose either the &#x60;tracking_activities_list&#x60; query parameter and or the &#x60;tracking_activity_type&#x60; query parameter to specify one or more tracking activity types In the request. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.&lt;/p&gt;       &lt;table&gt;&lt;tr&gt;&lt;td colspan&#x3D;&#39;2&#39;&gt;Valid tracking activity types&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_sends&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Send activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_opens&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Email open tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_clicks&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Link click-through tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_bounces&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Bounce tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_optouts&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Opt-out tracking activities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;         &lt;td&gt;&lt;b&gt;em_forwards&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Forward to a friend tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_open&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page opens&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_click&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page clicks&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_add&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page adds&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_update &lt;/b&gt;&lt;/td&gt;&lt;td&gt; Landing page updates&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s ID for which tracking activity data is requested.</param>
        /// <param name="trackingActivitiesList">Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="trackingActivityType">Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="includeCampaignActivityNames">Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient. (optional, default to true)</param>
        /// <param name="limit">The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100. (optional, default to &quot;100&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactTrackingReport200Response</returns>
        public GetContactTrackingReport200Response GetContactTrackingReport(string contactId, List<string>? trackingActivitiesList = default(List<string>?), List<string>? trackingActivityType = default(List<string>?), bool? includeCampaignActivityNames = default(bool?), string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetContactTrackingReport200Response> localVarResponse = GetContactTrackingReportWithHttpInfo(contactId, trackingActivitiesList, trackingActivityType, includeCampaignActivityNames, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Contact Activity Details &lt;p&gt;Gets the tracking activity data for a single contact, sorted in descending activity date order.&lt;/p&gt; &lt;p&gt;You must chose either the &#x60;tracking_activities_list&#x60; query parameter and or the &#x60;tracking_activity_type&#x60; query parameter to specify one or more tracking activity types In the request. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.&lt;/p&gt;       &lt;table&gt;&lt;tr&gt;&lt;td colspan&#x3D;&#39;2&#39;&gt;Valid tracking activity types&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_sends&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Send activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_opens&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Email open tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_clicks&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Link click-through tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_bounces&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Bounce tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_optouts&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Opt-out tracking activities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;         &lt;td&gt;&lt;b&gt;em_forwards&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Forward to a friend tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_open&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page opens&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_click&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page clicks&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_add&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page adds&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_update &lt;/b&gt;&lt;/td&gt;&lt;td&gt; Landing page updates&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s ID for which tracking activity data is requested.</param>
        /// <param name="trackingActivitiesList">Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="trackingActivityType">Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="includeCampaignActivityNames">Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient. (optional, default to true)</param>
        /// <param name="limit">The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100. (optional, default to &quot;100&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactTrackingReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetContactTrackingReport200Response> GetContactTrackingReportWithHttpInfo(string contactId, List<string>? trackingActivitiesList = default(List<string>?), List<string>? trackingActivityType = default(List<string>?), bool? includeCampaignActivityNames = default(bool?), string? limit = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsReportingApi->GetContactTrackingReport");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (trackingActivitiesList != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("multi", "tracking_activities_list", trackingActivitiesList));
            }
            if (trackingActivityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("csv", "tracking_activity_type", trackingActivityType));
            }
            if (includeCampaignActivityNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include_campaign_activity_names", includeCampaignActivityNames));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ContactsReportingApi.GetContactTrackingReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContactTrackingReport200Response>("/reports/contact_reports/{contact_id}/activity_details", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactTrackingReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Contact Activity Details &lt;p&gt;Gets the tracking activity data for a single contact, sorted in descending activity date order.&lt;/p&gt; &lt;p&gt;You must chose either the &#x60;tracking_activities_list&#x60; query parameter and or the &#x60;tracking_activity_type&#x60; query parameter to specify one or more tracking activity types In the request. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.&lt;/p&gt;       &lt;table&gt;&lt;tr&gt;&lt;td colspan&#x3D;&#39;2&#39;&gt;Valid tracking activity types&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_sends&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Send activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_opens&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Email open tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_clicks&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Link click-through tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_bounces&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Bounce tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_optouts&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Opt-out tracking activities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;         &lt;td&gt;&lt;b&gt;em_forwards&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Forward to a friend tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_open&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page opens&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_click&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page clicks&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_add&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page adds&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_update &lt;/b&gt;&lt;/td&gt;&lt;td&gt; Landing page updates&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s ID for which tracking activity data is requested.</param>
        /// <param name="trackingActivitiesList">Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="trackingActivityType">Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="includeCampaignActivityNames">Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient. (optional, default to true)</param>
        /// <param name="limit">The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100. (optional, default to &quot;100&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactTrackingReport200Response</returns>
        public async System.Threading.Tasks.Task<GetContactTrackingReport200Response> GetContactTrackingReportAsync(string contactId, List<string>? trackingActivitiesList = default(List<string>?), List<string>? trackingActivityType = default(List<string>?), bool? includeCampaignActivityNames = default(bool?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetContactTrackingReport200Response> localVarResponse = await GetContactTrackingReportWithHttpInfoAsync(contactId, trackingActivitiesList, trackingActivityType, includeCampaignActivityNames, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Contact Activity Details &lt;p&gt;Gets the tracking activity data for a single contact, sorted in descending activity date order.&lt;/p&gt; &lt;p&gt;You must chose either the &#x60;tracking_activities_list&#x60; query parameter and or the &#x60;tracking_activity_type&#x60; query parameter to specify one or more tracking activity types In the request. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive.&lt;/p&gt;       &lt;table&gt;&lt;tr&gt;&lt;td colspan&#x3D;&#39;2&#39;&gt;Valid tracking activity types&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_sends&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Send activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_opens&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Email open tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_clicks&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Link click-through tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_bounces&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Bounce tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;em_optouts&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Opt-out tracking activities&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;         &lt;td&gt;&lt;b&gt;em_forwards&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Forward to a friend tracking activities&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_open&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page opens&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_click&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page clicks&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_add&lt;/b&gt;&lt;/td&gt;&lt;td&gt;Landing page adds&lt;/td&gt;&lt;/tr&gt;         &lt;tr&gt;&lt;td&gt;&lt;b&gt;p_contact_update &lt;/b&gt;&lt;/td&gt;&lt;td&gt; Landing page updates&lt;/td&gt;&lt;/tr&gt;       &lt;/table&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s ID for which tracking activity data is requested.</param>
        /// <param name="trackingActivitiesList">Specify one or more tracking activity types to include as a comma-delimited string. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="trackingActivityType">Specify one or more tracking activity types to include as an array. The &#x60;tracking_activities_list&#x60;  and &#x60;tracking_activities_type&#x60; query parameters are mutually exclusive. (optional)</param>
        /// <param name="includeCampaignActivityNames">Default (&#x60;true&#x60;) returns campaign activity names in the results. Not including campaign activity names in the results (&#x60;false&#x60;), is more efficient. (optional, default to true)</param>
        /// <param name="limit">The number of tracking activities to return in a single page. Valid values are 1 to 100. Default is 100. (optional, default to &quot;100&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactTrackingReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetContactTrackingReport200Response>> GetContactTrackingReportWithHttpInfoAsync(string contactId, List<string>? trackingActivitiesList = default(List<string>?), List<string>? trackingActivityType = default(List<string>?), bool? includeCampaignActivityNames = default(bool?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsReportingApi->GetContactTrackingReport");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (trackingActivitiesList != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("multi", "tracking_activities_list", trackingActivitiesList));
            }
            if (trackingActivityType != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("csv", "tracking_activity_type", trackingActivityType));
            }
            if (includeCampaignActivityNames != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include_campaign_activity_names", includeCampaignActivityNames));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ContactsReportingApi.GetContactTrackingReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContactTrackingReport200Response>("/reports/contact_reports/{contact_id}/activity_details", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactTrackingReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
