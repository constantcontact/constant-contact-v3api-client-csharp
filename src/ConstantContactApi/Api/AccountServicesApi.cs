/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountServicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// POST Add an Account Email Address
        /// </summary>
        /// <remarks>
        /// Use this method to add a new email address to a Constant Contact account. If the email address you are adding already exists in the account the API will return a 409 conflict error.   When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. After a user clicks that link, the account email status changes from &#x60;UNCONFIRMED&#x60; to &#x60;CONFIRMED&#x60;. You can use confirmed account email addresses in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers. For more use case information, see [Add an Account Email Address](/api_guide/account_post_emails.html) in the API guide.  
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAccountEmailAddressRequest">A JSON request payload containing the new email address you want to add to the Constant Contact account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddAccountEmailAddress201Response</returns>
        AddAccountEmailAddress201Response AddAccountEmailAddress(AddAccountEmailAddressRequest addAccountEmailAddressRequest, int operationIndex = 0);

        /// <summary>
        /// POST Add an Account Email Address
        /// </summary>
        /// <remarks>
        /// Use this method to add a new email address to a Constant Contact account. If the email address you are adding already exists in the account the API will return a 409 conflict error.   When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. After a user clicks that link, the account email status changes from &#x60;UNCONFIRMED&#x60; to &#x60;CONFIRMED&#x60;. You can use confirmed account email addresses in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers. For more use case information, see [Add an Account Email Address](/api_guide/account_post_emails.html) in the API guide.  
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAccountEmailAddressRequest">A JSON request payload containing the new email address you want to add to the Constant Contact account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddAccountEmailAddress201Response</returns>
        ApiResponse<AddAccountEmailAddress201Response> AddAccountEmailAddressWithHttpInfo(AddAccountEmailAddressRequest addAccountEmailAddressRequest, int operationIndex = 0);
        /// <summary>
        /// POST the Physical Address for the Account
        /// </summary>
        /// <remarks>
        /// Use this method to add the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60;. If a required property is not included or incorrectly formatted, a 400 error message is returned. If the address already exists, a 409 error message is returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountDetails200ResponsePhysicalAddress</returns>
        GetAccountDetails200ResponsePhysicalAddress AddPhysicalAddress(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0);

        /// <summary>
        /// POST the Physical Address for the Account
        /// </summary>
        /// <remarks>
        /// Use this method to add the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60;. If a required property is not included or incorrectly formatted, a 400 error message is returned. If the address already exists, a 409 error message is returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountDetails200ResponsePhysicalAddress</returns>
        ApiResponse<GetAccountDetails200ResponsePhysicalAddress> AddPhysicalAddressWithHttpInfo(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0);
        /// <summary>
        /// GET a Summary of Account Details
        /// </summary>
        /// <remarks>
        /// Get account related details for a Constant Contact user account. Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;company_logo&#x60; and/or &#x60;physical_address&#x60; details in the response body. For more details, see [Get Account Summary Details](/api_guide/account_details_get.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extraFields">Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;physical_address&#x60; and/or &#x60;company_logo&#x60; details in the response body. Use a comma separated list to include both (physical_address, company logo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountDetails200Response</returns>
        GetAccountDetails200Response GetAccountDetails(string? extraFields = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Summary of Account Details
        /// </summary>
        /// <remarks>
        /// Get account related details for a Constant Contact user account. Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;company_logo&#x60; and/or &#x60;physical_address&#x60; details in the response body. For more details, see [Get Account Summary Details](/api_guide/account_details_get.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extraFields">Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;physical_address&#x60; and/or &#x60;company_logo&#x60; details in the response body. Use a comma separated list to include both (physical_address, company logo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountDetails200Response</returns>
        ApiResponse<GetAccountDetails200Response> GetAccountDetailsWithHttpInfo(string? extraFields = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET the Physical Address for the Account
        /// </summary>
        /// <remarks>
        /// Use this method to get the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountDetails200ResponsePhysicalAddress</returns>
        GetAccountDetails200ResponsePhysicalAddress GetAccountPhysicalAddress(int operationIndex = 0);

        /// <summary>
        /// GET the Physical Address for the Account
        /// </summary>
        /// <remarks>
        /// Use this method to get the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountDetails200ResponsePhysicalAddress</returns>
        ApiResponse<GetAccountDetails200ResponsePhysicalAddress> GetAccountPhysicalAddressWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// GET a Collection of Account Email Addresses
        /// </summary>
        /// <remarks>
        /// Use this method to return a collection of email addresses for the account associated with your access token. When you &lt;a href&#x3D;\&quot;https://v3.developer.constantcontact.com/api_reference/index.html#!/Email_Campaigns/createEmailCampaignUsingPOST\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create an Email Campaign&lt;a/&gt;, you must use an account email address with a &#x60;CONFIRMED&#x60; status in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers.         Use the query parameters to filter results. You can filter using &#x60;confirm_status&#x60;, &#x60;role_code&#x60;, or &#x60;email_address&#x60;. For example, searching with &#x60;confirm_status&#x3D;CONFIRMED&#x60; returns all confirmed email addresses in the account. This method only supports one query parameter at a time. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmStatus">Use the &#x60;confirm_status&#x60; query parameter to search for account emails using the email status. Possible values are &#x60;CONFIRMED&#x60; or &#x60;UNCONFIRMED&#x60;. You can also abbreviate the values of this query parameter and use &#x60;C&#x60; or &#x60;U&#x60;.  (optional)</param>
        /// <param name="roleCode">Use the &#x60;role_code&#x60; query parameter to search for account emails that have a specific role. Each each email address in an account can have multiple roles or no role. Possible values are &#x60;CONTACT&#x60;, &#x60;BILLING&#x60;, &#x60;REPLY_TO&#x60;, &#x60;JOURNALING&#x60;, or &#x60;OTHER&#x60;. You can also abbreviate the value of this query parameter and use &#x60;C&#x60;,&#x60;B&#x60;,&#x60;R&#x60;,&#x60;J&#x60;, or &#x60;O&#x60;. (optional)</param>
        /// <param name="emailAddress">Use the &#x60;email_address&#x60; query parameter to search for a specific account email address. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetAllAccountEmailAddresses200ResponseInner&gt;</returns>
        List<GetAllAccountEmailAddresses200ResponseInner> GetAllAccountEmailAddresses(string? confirmStatus = default(string?), string? roleCode = default(string?), string? emailAddress = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Collection of Account Email Addresses
        /// </summary>
        /// <remarks>
        /// Use this method to return a collection of email addresses for the account associated with your access token. When you &lt;a href&#x3D;\&quot;https://v3.developer.constantcontact.com/api_reference/index.html#!/Email_Campaigns/createEmailCampaignUsingPOST\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create an Email Campaign&lt;a/&gt;, you must use an account email address with a &#x60;CONFIRMED&#x60; status in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers.         Use the query parameters to filter results. You can filter using &#x60;confirm_status&#x60;, &#x60;role_code&#x60;, or &#x60;email_address&#x60;. For example, searching with &#x60;confirm_status&#x3D;CONFIRMED&#x60; returns all confirmed email addresses in the account. This method only supports one query parameter at a time. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmStatus">Use the &#x60;confirm_status&#x60; query parameter to search for account emails using the email status. Possible values are &#x60;CONFIRMED&#x60; or &#x60;UNCONFIRMED&#x60;. You can also abbreviate the values of this query parameter and use &#x60;C&#x60; or &#x60;U&#x60;.  (optional)</param>
        /// <param name="roleCode">Use the &#x60;role_code&#x60; query parameter to search for account emails that have a specific role. Each each email address in an account can have multiple roles or no role. Possible values are &#x60;CONTACT&#x60;, &#x60;BILLING&#x60;, &#x60;REPLY_TO&#x60;, &#x60;JOURNALING&#x60;, or &#x60;OTHER&#x60;. You can also abbreviate the value of this query parameter and use &#x60;C&#x60;,&#x60;B&#x60;,&#x60;R&#x60;,&#x60;J&#x60;, or &#x60;O&#x60;. (optional)</param>
        /// <param name="emailAddress">Use the &#x60;email_address&#x60; query parameter to search for a specific account email address. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetAllAccountEmailAddresses200ResponseInner&gt;</returns>
        ApiResponse<List<GetAllAccountEmailAddresses200ResponseInner>> GetAllAccountEmailAddressesWithHttpInfo(string? confirmStatus = default(string?), string? roleCode = default(string?), string? emailAddress = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET User Privileges
        /// </summary>
        /// <remarks>
        /// Use this method to return the user privileges associated with your access token as an array of objects. This method returns all user privileges, including privileges the V3 API does not currently use. Constant Contact requires specific user privileges to make requests using the V3 API. For more information, see the [User Privileges and Roles Overview](/api_guide/user_privileges.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetUserPrivileges200ResponseInner&gt;</returns>
        List<GetUserPrivileges200ResponseInner> GetUserPrivileges(int operationIndex = 0);

        /// <summary>
        /// GET User Privileges
        /// </summary>
        /// <remarks>
        /// Use this method to return the user privileges associated with your access token as an array of objects. This method returns all user privileges, including privileges the V3 API does not currently use. Constant Contact requires specific user privileges to make requests using the V3 API. For more information, see the [User Privileges and Roles Overview](/api_guide/user_privileges.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetUserPrivileges200ResponseInner&gt;</returns>
        ApiResponse<List<GetUserPrivileges200ResponseInner>> GetUserPrivilegesWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// PUT (update) Account Details
        /// </summary>
        /// <remarks>
        /// Use this method to update account details for a Constant Contact account, such as the email address or phone number. This PUT method provides a partial update where only valid properties that you include in the request body are updated and excluded properties are not overwritten. For more details, see [Put (update) Account Summary Details](/api_guide/account_details_put.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccountRequest">In the request body, specify changes to account details by including and modifying all or select &#x60;CustomerPut&#x60; properties. Changes to read-only fields (&#x60;encoded_account_id&#x60;) are ignored.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateAccountRequest</returns>
        UpdateAccountRequest UpdateAccount(UpdateAccountRequest updateAccountRequest, int operationIndex = 0);

        /// <summary>
        /// PUT (update) Account Details
        /// </summary>
        /// <remarks>
        /// Use this method to update account details for a Constant Contact account, such as the email address or phone number. This PUT method provides a partial update where only valid properties that you include in the request body are updated and excluded properties are not overwritten. For more details, see [Put (update) Account Summary Details](/api_guide/account_details_put.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccountRequest">In the request body, specify changes to account details by including and modifying all or select &#x60;CustomerPut&#x60; properties. Changes to read-only fields (&#x60;encoded_account_id&#x60;) are ignored.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateAccountRequest</returns>
        ApiResponse<UpdateAccountRequest> UpdateAccountWithHttpInfo(UpdateAccountRequest updateAccountRequest, int operationIndex = 0);
        /// <summary>
        /// PUT (update) the Physical Address for an Account
        /// </summary>
        /// <remarks>
        /// Use this method to update the organization&#39;s physical address for the Constant Contact user account. The physical address is required to send emails and displays on the footer of every email that is sent from the account. To get the current physical address, make a GET call to &#x60;/account/summary/physical_address&#x60;. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries. For more details, see [Put (update) the Physical Address for the Account](/api_guide/account_address_put.html). You must have the role of Account Owner assigned to update account level details. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60; and then update only those properties that you want to change. Excluding a non-read only field from the request body removes it from the physical address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountDetails200ResponsePhysicalAddress</returns>
        GetAccountDetails200ResponsePhysicalAddress UpdateAccountPhysicalAddress(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0);

        /// <summary>
        /// PUT (update) the Physical Address for an Account
        /// </summary>
        /// <remarks>
        /// Use this method to update the organization&#39;s physical address for the Constant Contact user account. The physical address is required to send emails and displays on the footer of every email that is sent from the account. To get the current physical address, make a GET call to &#x60;/account/summary/physical_address&#x60;. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries. For more details, see [Put (update) the Physical Address for the Account](/api_guide/account_address_put.html). You must have the role of Account Owner assigned to update account level details. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60; and then update only those properties that you want to change. Excluding a non-read only field from the request body removes it from the physical address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountDetails200ResponsePhysicalAddress</returns>
        ApiResponse<GetAccountDetails200ResponsePhysicalAddress> UpdateAccountPhysicalAddressWithHttpInfo(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountServicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// POST Add an Account Email Address
        /// </summary>
        /// <remarks>
        /// Use this method to add a new email address to a Constant Contact account. If the email address you are adding already exists in the account the API will return a 409 conflict error.   When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. After a user clicks that link, the account email status changes from &#x60;UNCONFIRMED&#x60; to &#x60;CONFIRMED&#x60;. You can use confirmed account email addresses in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers. For more use case information, see [Add an Account Email Address](/api_guide/account_post_emails.html) in the API guide.  
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAccountEmailAddressRequest">A JSON request payload containing the new email address you want to add to the Constant Contact account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddAccountEmailAddress201Response</returns>
        System.Threading.Tasks.Task<AddAccountEmailAddress201Response> AddAccountEmailAddressAsync(AddAccountEmailAddressRequest addAccountEmailAddressRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST Add an Account Email Address
        /// </summary>
        /// <remarks>
        /// Use this method to add a new email address to a Constant Contact account. If the email address you are adding already exists in the account the API will return a 409 conflict error.   When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. After a user clicks that link, the account email status changes from &#x60;UNCONFIRMED&#x60; to &#x60;CONFIRMED&#x60;. You can use confirmed account email addresses in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers. For more use case information, see [Add an Account Email Address](/api_guide/account_post_emails.html) in the API guide.  
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAccountEmailAddressRequest">A JSON request payload containing the new email address you want to add to the Constant Contact account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddAccountEmailAddress201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<AddAccountEmailAddress201Response>> AddAccountEmailAddressWithHttpInfoAsync(AddAccountEmailAddressRequest addAccountEmailAddressRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// POST the Physical Address for the Account
        /// </summary>
        /// <remarks>
        /// Use this method to add the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60;. If a required property is not included or incorrectly formatted, a 400 error message is returned. If the address already exists, a 409 error message is returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountDetails200ResponsePhysicalAddress</returns>
        System.Threading.Tasks.Task<GetAccountDetails200ResponsePhysicalAddress> AddPhysicalAddressAsync(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST the Physical Address for the Account
        /// </summary>
        /// <remarks>
        /// Use this method to add the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60;. If a required property is not included or incorrectly formatted, a 400 error message is returned. If the address already exists, a 409 error message is returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountDetails200ResponsePhysicalAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAccountDetails200ResponsePhysicalAddress>> AddPhysicalAddressWithHttpInfoAsync(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Summary of Account Details
        /// </summary>
        /// <remarks>
        /// Get account related details for a Constant Contact user account. Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;company_logo&#x60; and/or &#x60;physical_address&#x60; details in the response body. For more details, see [Get Account Summary Details](/api_guide/account_details_get.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extraFields">Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;physical_address&#x60; and/or &#x60;company_logo&#x60; details in the response body. Use a comma separated list to include both (physical_address, company logo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountDetails200Response</returns>
        System.Threading.Tasks.Task<GetAccountDetails200Response> GetAccountDetailsAsync(string? extraFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Summary of Account Details
        /// </summary>
        /// <remarks>
        /// Get account related details for a Constant Contact user account. Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;company_logo&#x60; and/or &#x60;physical_address&#x60; details in the response body. For more details, see [Get Account Summary Details](/api_guide/account_details_get.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extraFields">Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;physical_address&#x60; and/or &#x60;company_logo&#x60; details in the response body. Use a comma separated list to include both (physical_address, company logo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountDetails200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAccountDetails200Response>> GetAccountDetailsWithHttpInfoAsync(string? extraFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET the Physical Address for the Account
        /// </summary>
        /// <remarks>
        /// Use this method to get the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountDetails200ResponsePhysicalAddress</returns>
        System.Threading.Tasks.Task<GetAccountDetails200ResponsePhysicalAddress> GetAccountPhysicalAddressAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET the Physical Address for the Account
        /// </summary>
        /// <remarks>
        /// Use this method to get the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountDetails200ResponsePhysicalAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAccountDetails200ResponsePhysicalAddress>> GetAccountPhysicalAddressWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Collection of Account Email Addresses
        /// </summary>
        /// <remarks>
        /// Use this method to return a collection of email addresses for the account associated with your access token. When you &lt;a href&#x3D;\&quot;https://v3.developer.constantcontact.com/api_reference/index.html#!/Email_Campaigns/createEmailCampaignUsingPOST\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create an Email Campaign&lt;a/&gt;, you must use an account email address with a &#x60;CONFIRMED&#x60; status in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers.         Use the query parameters to filter results. You can filter using &#x60;confirm_status&#x60;, &#x60;role_code&#x60;, or &#x60;email_address&#x60;. For example, searching with &#x60;confirm_status&#x3D;CONFIRMED&#x60; returns all confirmed email addresses in the account. This method only supports one query parameter at a time. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmStatus">Use the &#x60;confirm_status&#x60; query parameter to search for account emails using the email status. Possible values are &#x60;CONFIRMED&#x60; or &#x60;UNCONFIRMED&#x60;. You can also abbreviate the values of this query parameter and use &#x60;C&#x60; or &#x60;U&#x60;.  (optional)</param>
        /// <param name="roleCode">Use the &#x60;role_code&#x60; query parameter to search for account emails that have a specific role. Each each email address in an account can have multiple roles or no role. Possible values are &#x60;CONTACT&#x60;, &#x60;BILLING&#x60;, &#x60;REPLY_TO&#x60;, &#x60;JOURNALING&#x60;, or &#x60;OTHER&#x60;. You can also abbreviate the value of this query parameter and use &#x60;C&#x60;,&#x60;B&#x60;,&#x60;R&#x60;,&#x60;J&#x60;, or &#x60;O&#x60;. (optional)</param>
        /// <param name="emailAddress">Use the &#x60;email_address&#x60; query parameter to search for a specific account email address. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetAllAccountEmailAddresses200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetAllAccountEmailAddresses200ResponseInner>> GetAllAccountEmailAddressesAsync(string? confirmStatus = default(string?), string? roleCode = default(string?), string? emailAddress = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Collection of Account Email Addresses
        /// </summary>
        /// <remarks>
        /// Use this method to return a collection of email addresses for the account associated with your access token. When you &lt;a href&#x3D;\&quot;https://v3.developer.constantcontact.com/api_reference/index.html#!/Email_Campaigns/createEmailCampaignUsingPOST\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create an Email Campaign&lt;a/&gt;, you must use an account email address with a &#x60;CONFIRMED&#x60; status in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers.         Use the query parameters to filter results. You can filter using &#x60;confirm_status&#x60;, &#x60;role_code&#x60;, or &#x60;email_address&#x60;. For example, searching with &#x60;confirm_status&#x3D;CONFIRMED&#x60; returns all confirmed email addresses in the account. This method only supports one query parameter at a time. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmStatus">Use the &#x60;confirm_status&#x60; query parameter to search for account emails using the email status. Possible values are &#x60;CONFIRMED&#x60; or &#x60;UNCONFIRMED&#x60;. You can also abbreviate the values of this query parameter and use &#x60;C&#x60; or &#x60;U&#x60;.  (optional)</param>
        /// <param name="roleCode">Use the &#x60;role_code&#x60; query parameter to search for account emails that have a specific role. Each each email address in an account can have multiple roles or no role. Possible values are &#x60;CONTACT&#x60;, &#x60;BILLING&#x60;, &#x60;REPLY_TO&#x60;, &#x60;JOURNALING&#x60;, or &#x60;OTHER&#x60;. You can also abbreviate the value of this query parameter and use &#x60;C&#x60;,&#x60;B&#x60;,&#x60;R&#x60;,&#x60;J&#x60;, or &#x60;O&#x60;. (optional)</param>
        /// <param name="emailAddress">Use the &#x60;email_address&#x60; query parameter to search for a specific account email address. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetAllAccountEmailAddresses200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetAllAccountEmailAddresses200ResponseInner>>> GetAllAccountEmailAddressesWithHttpInfoAsync(string? confirmStatus = default(string?), string? roleCode = default(string?), string? emailAddress = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET User Privileges
        /// </summary>
        /// <remarks>
        /// Use this method to return the user privileges associated with your access token as an array of objects. This method returns all user privileges, including privileges the V3 API does not currently use. Constant Contact requires specific user privileges to make requests using the V3 API. For more information, see the [User Privileges and Roles Overview](/api_guide/user_privileges.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetUserPrivileges200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetUserPrivileges200ResponseInner>> GetUserPrivilegesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET User Privileges
        /// </summary>
        /// <remarks>
        /// Use this method to return the user privileges associated with your access token as an array of objects. This method returns all user privileges, including privileges the V3 API does not currently use. Constant Contact requires specific user privileges to make requests using the V3 API. For more information, see the [User Privileges and Roles Overview](/api_guide/user_privileges.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetUserPrivileges200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetUserPrivileges200ResponseInner>>> GetUserPrivilegesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PUT (update) Account Details
        /// </summary>
        /// <remarks>
        /// Use this method to update account details for a Constant Contact account, such as the email address or phone number. This PUT method provides a partial update where only valid properties that you include in the request body are updated and excluded properties are not overwritten. For more details, see [Put (update) Account Summary Details](/api_guide/account_details_put.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccountRequest">In the request body, specify changes to account details by including and modifying all or select &#x60;CustomerPut&#x60; properties. Changes to read-only fields (&#x60;encoded_account_id&#x60;) are ignored.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAccountRequest</returns>
        System.Threading.Tasks.Task<UpdateAccountRequest> UpdateAccountAsync(UpdateAccountRequest updateAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PUT (update) Account Details
        /// </summary>
        /// <remarks>
        /// Use this method to update account details for a Constant Contact account, such as the email address or phone number. This PUT method provides a partial update where only valid properties that you include in the request body are updated and excluded properties are not overwritten. For more details, see [Put (update) Account Summary Details](/api_guide/account_details_put.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccountRequest">In the request body, specify changes to account details by including and modifying all or select &#x60;CustomerPut&#x60; properties. Changes to read-only fields (&#x60;encoded_account_id&#x60;) are ignored.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAccountRequest)</returns>
        System.Threading.Tasks.Task<ApiResponse<UpdateAccountRequest>> UpdateAccountWithHttpInfoAsync(UpdateAccountRequest updateAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PUT (update) the Physical Address for an Account
        /// </summary>
        /// <remarks>
        /// Use this method to update the organization&#39;s physical address for the Constant Contact user account. The physical address is required to send emails and displays on the footer of every email that is sent from the account. To get the current physical address, make a GET call to &#x60;/account/summary/physical_address&#x60;. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries. For more details, see [Put (update) the Physical Address for the Account](/api_guide/account_address_put.html). You must have the role of Account Owner assigned to update account level details. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60; and then update only those properties that you want to change. Excluding a non-read only field from the request body removes it from the physical address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountDetails200ResponsePhysicalAddress</returns>
        System.Threading.Tasks.Task<GetAccountDetails200ResponsePhysicalAddress> UpdateAccountPhysicalAddressAsync(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PUT (update) the Physical Address for an Account
        /// </summary>
        /// <remarks>
        /// Use this method to update the organization&#39;s physical address for the Constant Contact user account. The physical address is required to send emails and displays on the footer of every email that is sent from the account. To get the current physical address, make a GET call to &#x60;/account/summary/physical_address&#x60;. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries. For more details, see [Put (update) the Physical Address for the Account](/api_guide/account_address_put.html). You must have the role of Account Owner assigned to update account level details. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60; and then update only those properties that you want to change. Excluding a non-read only field from the request body removes it from the physical address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountDetails200ResponsePhysicalAddress)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAccountDetails200ResponsePhysicalAddress>> UpdateAccountPhysicalAddressWithHttpInfoAsync(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAccountServicesApi : IAccountServicesApiSync, IAccountServicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AccountServicesApi : IAccountServicesApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountServicesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountServicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AccountServicesApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountServicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AccountServicesApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AccountServicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AccountServicesApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// POST Add an Account Email Address Use this method to add a new email address to a Constant Contact account. If the email address you are adding already exists in the account the API will return a 409 conflict error.   When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. After a user clicks that link, the account email status changes from &#x60;UNCONFIRMED&#x60; to &#x60;CONFIRMED&#x60;. You can use confirmed account email addresses in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers. For more use case information, see [Add an Account Email Address](/api_guide/account_post_emails.html) in the API guide.  
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAccountEmailAddressRequest">A JSON request payload containing the new email address you want to add to the Constant Contact account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AddAccountEmailAddress201Response</returns>
        public AddAccountEmailAddress201Response AddAccountEmailAddress(AddAccountEmailAddressRequest addAccountEmailAddressRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<AddAccountEmailAddress201Response> localVarResponse = AddAccountEmailAddressWithHttpInfo(addAccountEmailAddressRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST Add an Account Email Address Use this method to add a new email address to a Constant Contact account. If the email address you are adding already exists in the account the API will return a 409 conflict error.   When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. After a user clicks that link, the account email status changes from &#x60;UNCONFIRMED&#x60; to &#x60;CONFIRMED&#x60;. You can use confirmed account email addresses in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers. For more use case information, see [Add an Account Email Address](/api_guide/account_post_emails.html) in the API guide.  
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAccountEmailAddressRequest">A JSON request payload containing the new email address you want to add to the Constant Contact account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AddAccountEmailAddress201Response</returns>
        public ConstantContactApi.Client.ApiResponse<AddAccountEmailAddress201Response> AddAccountEmailAddressWithHttpInfo(AddAccountEmailAddressRequest addAccountEmailAddressRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addAccountEmailAddressRequest' is set
            if (addAccountEmailAddressRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'addAccountEmailAddressRequest' when calling AccountServicesApi->AddAccountEmailAddress");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addAccountEmailAddressRequest;

            localVarRequestOptions.Operation = "AccountServicesApi.AddAccountEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AddAccountEmailAddress201Response>("/account/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAccountEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST Add an Account Email Address Use this method to add a new email address to a Constant Contact account. If the email address you are adding already exists in the account the API will return a 409 conflict error.   When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. After a user clicks that link, the account email status changes from &#x60;UNCONFIRMED&#x60; to &#x60;CONFIRMED&#x60;. You can use confirmed account email addresses in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers. For more use case information, see [Add an Account Email Address](/api_guide/account_post_emails.html) in the API guide.  
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAccountEmailAddressRequest">A JSON request payload containing the new email address you want to add to the Constant Contact account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AddAccountEmailAddress201Response</returns>
        public async System.Threading.Tasks.Task<AddAccountEmailAddress201Response> AddAccountEmailAddressAsync(AddAccountEmailAddressRequest addAccountEmailAddressRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<AddAccountEmailAddress201Response> localVarResponse = await AddAccountEmailAddressWithHttpInfoAsync(addAccountEmailAddressRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST Add an Account Email Address Use this method to add a new email address to a Constant Contact account. If the email address you are adding already exists in the account the API will return a 409 conflict error.   When you add a new email address to an account, Constant Contact automatically sends an email to that address with a link to confirm it. After a user clicks that link, the account email status changes from &#x60;UNCONFIRMED&#x60; to &#x60;CONFIRMED&#x60;. You can use confirmed account email addresses in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers. For more use case information, see [Add an Account Email Address](/api_guide/account_post_emails.html) in the API guide.  
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addAccountEmailAddressRequest">A JSON request payload containing the new email address you want to add to the Constant Contact account.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AddAccountEmailAddress201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<AddAccountEmailAddress201Response>> AddAccountEmailAddressWithHttpInfoAsync(AddAccountEmailAddressRequest addAccountEmailAddressRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addAccountEmailAddressRequest' is set
            if (addAccountEmailAddressRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'addAccountEmailAddressRequest' when calling AccountServicesApi->AddAccountEmailAddress");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addAccountEmailAddressRequest;

            localVarRequestOptions.Operation = "AccountServicesApi.AddAccountEmailAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AddAccountEmailAddress201Response>("/account/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddAccountEmailAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST the Physical Address for the Account Use this method to add the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60;. If a required property is not included or incorrectly formatted, a 400 error message is returned. If the address already exists, a 409 error message is returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountDetails200ResponsePhysicalAddress</returns>
        public GetAccountDetails200ResponsePhysicalAddress AddPhysicalAddress(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress> localVarResponse = AddPhysicalAddressWithHttpInfo(getAccountDetails200ResponsePhysicalAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST the Physical Address for the Account Use this method to add the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60;. If a required property is not included or incorrectly formatted, a 400 error message is returned. If the address already exists, a 409 error message is returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountDetails200ResponsePhysicalAddress</returns>
        public ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress> AddPhysicalAddressWithHttpInfo(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0)
        {
            // verify the required parameter 'getAccountDetails200ResponsePhysicalAddress' is set
            if (getAccountDetails200ResponsePhysicalAddress == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'getAccountDetails200ResponsePhysicalAddress' when calling AccountServicesApi->AddPhysicalAddress");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAccountDetails200ResponsePhysicalAddress;

            localVarRequestOptions.Operation = "AccountServicesApi.AddPhysicalAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetAccountDetails200ResponsePhysicalAddress>("/account/summary/physical_address", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPhysicalAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST the Physical Address for the Account Use this method to add the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60;. If a required property is not included or incorrectly formatted, a 400 error message is returned. If the address already exists, a 409 error message is returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountDetails200ResponsePhysicalAddress</returns>
        public async System.Threading.Tasks.Task<GetAccountDetails200ResponsePhysicalAddress> AddPhysicalAddressAsync(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress> localVarResponse = await AddPhysicalAddressWithHttpInfoAsync(getAccountDetails200ResponsePhysicalAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST the Physical Address for the Account Use this method to add the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60;. If a required property is not included or incorrectly formatted, a 400 error message is returned. If the address already exists, a 409 error message is returned.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountDetails200ResponsePhysicalAddress)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress>> AddPhysicalAddressWithHttpInfoAsync(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getAccountDetails200ResponsePhysicalAddress' is set
            if (getAccountDetails200ResponsePhysicalAddress == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'getAccountDetails200ResponsePhysicalAddress' when calling AccountServicesApi->AddPhysicalAddress");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAccountDetails200ResponsePhysicalAddress;

            localVarRequestOptions.Operation = "AccountServicesApi.AddPhysicalAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetAccountDetails200ResponsePhysicalAddress>("/account/summary/physical_address", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AddPhysicalAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Summary of Account Details Get account related details for a Constant Contact user account. Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;company_logo&#x60; and/or &#x60;physical_address&#x60; details in the response body. For more details, see [Get Account Summary Details](/api_guide/account_details_get.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extraFields">Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;physical_address&#x60; and/or &#x60;company_logo&#x60; details in the response body. Use a comma separated list to include both (physical_address, company logo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountDetails200Response</returns>
        public GetAccountDetails200Response GetAccountDetails(string? extraFields = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAccountDetails200Response> localVarResponse = GetAccountDetailsWithHttpInfo(extraFields);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Summary of Account Details Get account related details for a Constant Contact user account. Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;company_logo&#x60; and/or &#x60;physical_address&#x60; details in the response body. For more details, see [Get Account Summary Details](/api_guide/account_details_get.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extraFields">Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;physical_address&#x60; and/or &#x60;company_logo&#x60; details in the response body. Use a comma separated list to include both (physical_address, company logo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountDetails200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetAccountDetails200Response> GetAccountDetailsWithHttpInfo(string? extraFields = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (extraFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "extra_fields", extraFields));
            }

            localVarRequestOptions.Operation = "AccountServicesApi.GetAccountDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAccountDetails200Response>("/account/summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Summary of Account Details Get account related details for a Constant Contact user account. Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;company_logo&#x60; and/or &#x60;physical_address&#x60; details in the response body. For more details, see [Get Account Summary Details](/api_guide/account_details_get.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extraFields">Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;physical_address&#x60; and/or &#x60;company_logo&#x60; details in the response body. Use a comma separated list to include both (physical_address, company logo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountDetails200Response</returns>
        public async System.Threading.Tasks.Task<GetAccountDetails200Response> GetAccountDetailsAsync(string? extraFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAccountDetails200Response> localVarResponse = await GetAccountDetailsWithHttpInfoAsync(extraFields, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Summary of Account Details Get account related details for a Constant Contact user account. Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;company_logo&#x60; and/or &#x60;physical_address&#x60; details in the response body. For more details, see [Get Account Summary Details](/api_guide/account_details_get.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="extraFields">Use the &#x60;extra_fields&#x60; query parameter to include the &#x60;physical_address&#x60; and/or &#x60;company_logo&#x60; details in the response body. Use a comma separated list to include both (physical_address, company logo). (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountDetails200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAccountDetails200Response>> GetAccountDetailsWithHttpInfoAsync(string? extraFields = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (extraFields != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "extra_fields", extraFields));
            }

            localVarRequestOptions.Operation = "AccountServicesApi.GetAccountDetails";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAccountDetails200Response>("/account/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountDetails", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET the Physical Address for the Account Use this method to get the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountDetails200ResponsePhysicalAddress</returns>
        public GetAccountDetails200ResponsePhysicalAddress GetAccountPhysicalAddress(int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress> localVarResponse = GetAccountPhysicalAddressWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET the Physical Address for the Account Use this method to get the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountDetails200ResponsePhysicalAddress</returns>
        public ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress> GetAccountPhysicalAddressWithHttpInfo(int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountServicesApi.GetAccountPhysicalAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAccountDetails200ResponsePhysicalAddress>("/account/summary/physical_address", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountPhysicalAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET the Physical Address for the Account Use this method to get the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountDetails200ResponsePhysicalAddress</returns>
        public async System.Threading.Tasks.Task<GetAccountDetails200ResponsePhysicalAddress> GetAccountPhysicalAddressAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress> localVarResponse = await GetAccountPhysicalAddressWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET the Physical Address for the Account Use this method to get the address where the account&#39;s organization physically resides. The physical address is required to send emails and displays on the footer of every email that is sent from the account.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountDetails200ResponsePhysicalAddress)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress>> GetAccountPhysicalAddressWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountServicesApi.GetAccountPhysicalAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAccountDetails200ResponsePhysicalAddress>("/account/summary/physical_address", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAccountPhysicalAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Collection of Account Email Addresses Use this method to return a collection of email addresses for the account associated with your access token. When you &lt;a href&#x3D;\&quot;https://v3.developer.constantcontact.com/api_reference/index.html#!/Email_Campaigns/createEmailCampaignUsingPOST\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create an Email Campaign&lt;a/&gt;, you must use an account email address with a &#x60;CONFIRMED&#x60; status in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers.         Use the query parameters to filter results. You can filter using &#x60;confirm_status&#x60;, &#x60;role_code&#x60;, or &#x60;email_address&#x60;. For example, searching with &#x60;confirm_status&#x3D;CONFIRMED&#x60; returns all confirmed email addresses in the account. This method only supports one query parameter at a time. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmStatus">Use the &#x60;confirm_status&#x60; query parameter to search for account emails using the email status. Possible values are &#x60;CONFIRMED&#x60; or &#x60;UNCONFIRMED&#x60;. You can also abbreviate the values of this query parameter and use &#x60;C&#x60; or &#x60;U&#x60;.  (optional)</param>
        /// <param name="roleCode">Use the &#x60;role_code&#x60; query parameter to search for account emails that have a specific role. Each each email address in an account can have multiple roles or no role. Possible values are &#x60;CONTACT&#x60;, &#x60;BILLING&#x60;, &#x60;REPLY_TO&#x60;, &#x60;JOURNALING&#x60;, or &#x60;OTHER&#x60;. You can also abbreviate the value of this query parameter and use &#x60;C&#x60;,&#x60;B&#x60;,&#x60;R&#x60;,&#x60;J&#x60;, or &#x60;O&#x60;. (optional)</param>
        /// <param name="emailAddress">Use the &#x60;email_address&#x60; query parameter to search for a specific account email address. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetAllAccountEmailAddresses200ResponseInner&gt;</returns>
        public List<GetAllAccountEmailAddresses200ResponseInner> GetAllAccountEmailAddresses(string? confirmStatus = default(string?), string? roleCode = default(string?), string? emailAddress = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<List<GetAllAccountEmailAddresses200ResponseInner>> localVarResponse = GetAllAccountEmailAddressesWithHttpInfo(confirmStatus, roleCode, emailAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Collection of Account Email Addresses Use this method to return a collection of email addresses for the account associated with your access token. When you &lt;a href&#x3D;\&quot;https://v3.developer.constantcontact.com/api_reference/index.html#!/Email_Campaigns/createEmailCampaignUsingPOST\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create an Email Campaign&lt;a/&gt;, you must use an account email address with a &#x60;CONFIRMED&#x60; status in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers.         Use the query parameters to filter results. You can filter using &#x60;confirm_status&#x60;, &#x60;role_code&#x60;, or &#x60;email_address&#x60;. For example, searching with &#x60;confirm_status&#x3D;CONFIRMED&#x60; returns all confirmed email addresses in the account. This method only supports one query parameter at a time. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmStatus">Use the &#x60;confirm_status&#x60; query parameter to search for account emails using the email status. Possible values are &#x60;CONFIRMED&#x60; or &#x60;UNCONFIRMED&#x60;. You can also abbreviate the values of this query parameter and use &#x60;C&#x60; or &#x60;U&#x60;.  (optional)</param>
        /// <param name="roleCode">Use the &#x60;role_code&#x60; query parameter to search for account emails that have a specific role. Each each email address in an account can have multiple roles or no role. Possible values are &#x60;CONTACT&#x60;, &#x60;BILLING&#x60;, &#x60;REPLY_TO&#x60;, &#x60;JOURNALING&#x60;, or &#x60;OTHER&#x60;. You can also abbreviate the value of this query parameter and use &#x60;C&#x60;,&#x60;B&#x60;,&#x60;R&#x60;,&#x60;J&#x60;, or &#x60;O&#x60;. (optional)</param>
        /// <param name="emailAddress">Use the &#x60;email_address&#x60; query parameter to search for a specific account email address. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetAllAccountEmailAddresses200ResponseInner&gt;</returns>
        public ConstantContactApi.Client.ApiResponse<List<GetAllAccountEmailAddresses200ResponseInner>> GetAllAccountEmailAddressesWithHttpInfo(string? confirmStatus = default(string?), string? roleCode = default(string?), string? emailAddress = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (confirmStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "confirm_status", confirmStatus));
            }
            if (roleCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "role_code", roleCode));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "email_address", emailAddress));
            }

            localVarRequestOptions.Operation = "AccountServicesApi.GetAllAccountEmailAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetAllAccountEmailAddresses200ResponseInner>>("/account/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAccountEmailAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Collection of Account Email Addresses Use this method to return a collection of email addresses for the account associated with your access token. When you &lt;a href&#x3D;\&quot;https://v3.developer.constantcontact.com/api_reference/index.html#!/Email_Campaigns/createEmailCampaignUsingPOST\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create an Email Campaign&lt;a/&gt;, you must use an account email address with a &#x60;CONFIRMED&#x60; status in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers.         Use the query parameters to filter results. You can filter using &#x60;confirm_status&#x60;, &#x60;role_code&#x60;, or &#x60;email_address&#x60;. For example, searching with &#x60;confirm_status&#x3D;CONFIRMED&#x60; returns all confirmed email addresses in the account. This method only supports one query parameter at a time. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmStatus">Use the &#x60;confirm_status&#x60; query parameter to search for account emails using the email status. Possible values are &#x60;CONFIRMED&#x60; or &#x60;UNCONFIRMED&#x60;. You can also abbreviate the values of this query parameter and use &#x60;C&#x60; or &#x60;U&#x60;.  (optional)</param>
        /// <param name="roleCode">Use the &#x60;role_code&#x60; query parameter to search for account emails that have a specific role. Each each email address in an account can have multiple roles or no role. Possible values are &#x60;CONTACT&#x60;, &#x60;BILLING&#x60;, &#x60;REPLY_TO&#x60;, &#x60;JOURNALING&#x60;, or &#x60;OTHER&#x60;. You can also abbreviate the value of this query parameter and use &#x60;C&#x60;,&#x60;B&#x60;,&#x60;R&#x60;,&#x60;J&#x60;, or &#x60;O&#x60;. (optional)</param>
        /// <param name="emailAddress">Use the &#x60;email_address&#x60; query parameter to search for a specific account email address. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetAllAccountEmailAddresses200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetAllAccountEmailAddresses200ResponseInner>> GetAllAccountEmailAddressesAsync(string? confirmStatus = default(string?), string? roleCode = default(string?), string? emailAddress = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<List<GetAllAccountEmailAddresses200ResponseInner>> localVarResponse = await GetAllAccountEmailAddressesWithHttpInfoAsync(confirmStatus, roleCode, emailAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Collection of Account Email Addresses Use this method to return a collection of email addresses for the account associated with your access token. When you &lt;a href&#x3D;\&quot;https://v3.developer.constantcontact.com/api_reference/index.html#!/Email_Campaigns/createEmailCampaignUsingPOST\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Create an Email Campaign&lt;a/&gt;, you must use an account email address with a &#x60;CONFIRMED&#x60; status in the email campaign &#x60;from_email&#x60; and &#x60;reply_to_email&#x60; headers.         Use the query parameters to filter results. You can filter using &#x60;confirm_status&#x60;, &#x60;role_code&#x60;, or &#x60;email_address&#x60;. For example, searching with &#x60;confirm_status&#x3D;CONFIRMED&#x60; returns all confirmed email addresses in the account. This method only supports one query parameter at a time. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="confirmStatus">Use the &#x60;confirm_status&#x60; query parameter to search for account emails using the email status. Possible values are &#x60;CONFIRMED&#x60; or &#x60;UNCONFIRMED&#x60;. You can also abbreviate the values of this query parameter and use &#x60;C&#x60; or &#x60;U&#x60;.  (optional)</param>
        /// <param name="roleCode">Use the &#x60;role_code&#x60; query parameter to search for account emails that have a specific role. Each each email address in an account can have multiple roles or no role. Possible values are &#x60;CONTACT&#x60;, &#x60;BILLING&#x60;, &#x60;REPLY_TO&#x60;, &#x60;JOURNALING&#x60;, or &#x60;OTHER&#x60;. You can also abbreviate the value of this query parameter and use &#x60;C&#x60;,&#x60;B&#x60;,&#x60;R&#x60;,&#x60;J&#x60;, or &#x60;O&#x60;. (optional)</param>
        /// <param name="emailAddress">Use the &#x60;email_address&#x60; query parameter to search for a specific account email address. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetAllAccountEmailAddresses200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<List<GetAllAccountEmailAddresses200ResponseInner>>> GetAllAccountEmailAddressesWithHttpInfoAsync(string? confirmStatus = default(string?), string? roleCode = default(string?), string? emailAddress = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (confirmStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "confirm_status", confirmStatus));
            }
            if (roleCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "role_code", roleCode));
            }
            if (emailAddress != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "email_address", emailAddress));
            }

            localVarRequestOptions.Operation = "AccountServicesApi.GetAllAccountEmailAddresses";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetAllAccountEmailAddresses200ResponseInner>>("/account/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllAccountEmailAddresses", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET User Privileges Use this method to return the user privileges associated with your access token as an array of objects. This method returns all user privileges, including privileges the V3 API does not currently use. Constant Contact requires specific user privileges to make requests using the V3 API. For more information, see the [User Privileges and Roles Overview](/api_guide/user_privileges.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetUserPrivileges200ResponseInner&gt;</returns>
        public List<GetUserPrivileges200ResponseInner> GetUserPrivileges(int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<List<GetUserPrivileges200ResponseInner>> localVarResponse = GetUserPrivilegesWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET User Privileges Use this method to return the user privileges associated with your access token as an array of objects. This method returns all user privileges, including privileges the V3 API does not currently use. Constant Contact requires specific user privileges to make requests using the V3 API. For more information, see the [User Privileges and Roles Overview](/api_guide/user_privileges.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetUserPrivileges200ResponseInner&gt;</returns>
        public ConstantContactApi.Client.ApiResponse<List<GetUserPrivileges200ResponseInner>> GetUserPrivilegesWithHttpInfo(int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountServicesApi.GetUserPrivileges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetUserPrivileges200ResponseInner>>("/account/user/privileges", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPrivileges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET User Privileges Use this method to return the user privileges associated with your access token as an array of objects. This method returns all user privileges, including privileges the V3 API does not currently use. Constant Contact requires specific user privileges to make requests using the V3 API. For more information, see the [User Privileges and Roles Overview](/api_guide/user_privileges.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetUserPrivileges200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetUserPrivileges200ResponseInner>> GetUserPrivilegesAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<List<GetUserPrivileges200ResponseInner>> localVarResponse = await GetUserPrivilegesWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET User Privileges Use this method to return the user privileges associated with your access token as an array of objects. This method returns all user privileges, including privileges the V3 API does not currently use. Constant Contact requires specific user privileges to make requests using the V3 API. For more information, see the [User Privileges and Roles Overview](/api_guide/user_privileges.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetUserPrivileges200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<List<GetUserPrivileges200ResponseInner>>> GetUserPrivilegesWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "AccountServicesApi.GetUserPrivileges";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetUserPrivileges200ResponseInner>>("/account/user/privileges", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUserPrivileges", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) Account Details Use this method to update account details for a Constant Contact account, such as the email address or phone number. This PUT method provides a partial update where only valid properties that you include in the request body are updated and excluded properties are not overwritten. For more details, see [Put (update) Account Summary Details](/api_guide/account_details_put.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccountRequest">In the request body, specify changes to account details by including and modifying all or select &#x60;CustomerPut&#x60; properties. Changes to read-only fields (&#x60;encoded_account_id&#x60;) are ignored.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>UpdateAccountRequest</returns>
        public UpdateAccountRequest UpdateAccount(UpdateAccountRequest updateAccountRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<UpdateAccountRequest> localVarResponse = UpdateAccountWithHttpInfo(updateAccountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) Account Details Use this method to update account details for a Constant Contact account, such as the email address or phone number. This PUT method provides a partial update where only valid properties that you include in the request body are updated and excluded properties are not overwritten. For more details, see [Put (update) Account Summary Details](/api_guide/account_details_put.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccountRequest">In the request body, specify changes to account details by including and modifying all or select &#x60;CustomerPut&#x60; properties. Changes to read-only fields (&#x60;encoded_account_id&#x60;) are ignored.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of UpdateAccountRequest</returns>
        public ConstantContactApi.Client.ApiResponse<UpdateAccountRequest> UpdateAccountWithHttpInfo(UpdateAccountRequest updateAccountRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateAccountRequest' is set
            if (updateAccountRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateAccountRequest' when calling AccountServicesApi->UpdateAccount");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateAccountRequest;

            localVarRequestOptions.Operation = "AccountServicesApi.UpdateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UpdateAccountRequest>("/account/summary", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) Account Details Use this method to update account details for a Constant Contact account, such as the email address or phone number. This PUT method provides a partial update where only valid properties that you include in the request body are updated and excluded properties are not overwritten. For more details, see [Put (update) Account Summary Details](/api_guide/account_details_put.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccountRequest">In the request body, specify changes to account details by including and modifying all or select &#x60;CustomerPut&#x60; properties. Changes to read-only fields (&#x60;encoded_account_id&#x60;) are ignored.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UpdateAccountRequest</returns>
        public async System.Threading.Tasks.Task<UpdateAccountRequest> UpdateAccountAsync(UpdateAccountRequest updateAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<UpdateAccountRequest> localVarResponse = await UpdateAccountWithHttpInfoAsync(updateAccountRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) Account Details Use this method to update account details for a Constant Contact account, such as the email address or phone number. This PUT method provides a partial update where only valid properties that you include in the request body are updated and excluded properties are not overwritten. For more details, see [Put (update) Account Summary Details](/api_guide/account_details_put.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateAccountRequest">In the request body, specify changes to account details by including and modifying all or select &#x60;CustomerPut&#x60; properties. Changes to read-only fields (&#x60;encoded_account_id&#x60;) are ignored.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UpdateAccountRequest)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<UpdateAccountRequest>> UpdateAccountWithHttpInfoAsync(UpdateAccountRequest updateAccountRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateAccountRequest' is set
            if (updateAccountRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateAccountRequest' when calling AccountServicesApi->UpdateAccount");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateAccountRequest;

            localVarRequestOptions.Operation = "AccountServicesApi.UpdateAccount";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateAccountRequest>("/account/summary", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccount", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) the Physical Address for an Account Use this method to update the organization&#39;s physical address for the Constant Contact user account. The physical address is required to send emails and displays on the footer of every email that is sent from the account. To get the current physical address, make a GET call to &#x60;/account/summary/physical_address&#x60;. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries. For more details, see [Put (update) the Physical Address for the Account](/api_guide/account_address_put.html). You must have the role of Account Owner assigned to update account level details. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60; and then update only those properties that you want to change. Excluding a non-read only field from the request body removes it from the physical address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAccountDetails200ResponsePhysicalAddress</returns>
        public GetAccountDetails200ResponsePhysicalAddress UpdateAccountPhysicalAddress(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress> localVarResponse = UpdateAccountPhysicalAddressWithHttpInfo(getAccountDetails200ResponsePhysicalAddress);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) the Physical Address for an Account Use this method to update the organization&#39;s physical address for the Constant Contact user account. The physical address is required to send emails and displays on the footer of every email that is sent from the account. To get the current physical address, make a GET call to &#x60;/account/summary/physical_address&#x60;. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries. For more details, see [Put (update) the Physical Address for the Account](/api_guide/account_address_put.html). You must have the role of Account Owner assigned to update account level details. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60; and then update only those properties that you want to change. Excluding a non-read only field from the request body removes it from the physical address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAccountDetails200ResponsePhysicalAddress</returns>
        public ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress> UpdateAccountPhysicalAddressWithHttpInfo(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0)
        {
            // verify the required parameter 'getAccountDetails200ResponsePhysicalAddress' is set
            if (getAccountDetails200ResponsePhysicalAddress == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'getAccountDetails200ResponsePhysicalAddress' when calling AccountServicesApi->UpdateAccountPhysicalAddress");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAccountDetails200ResponsePhysicalAddress;

            localVarRequestOptions.Operation = "AccountServicesApi.UpdateAccountPhysicalAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GetAccountDetails200ResponsePhysicalAddress>("/account/summary/physical_address", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountPhysicalAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) the Physical Address for an Account Use this method to update the organization&#39;s physical address for the Constant Contact user account. The physical address is required to send emails and displays on the footer of every email that is sent from the account. To get the current physical address, make a GET call to &#x60;/account/summary/physical_address&#x60;. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries. For more details, see [Put (update) the Physical Address for the Account](/api_guide/account_address_put.html). You must have the role of Account Owner assigned to update account level details. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60; and then update only those properties that you want to change. Excluding a non-read only field from the request body removes it from the physical address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAccountDetails200ResponsePhysicalAddress</returns>
        public async System.Threading.Tasks.Task<GetAccountDetails200ResponsePhysicalAddress> UpdateAccountPhysicalAddressAsync(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress> localVarResponse = await UpdateAccountPhysicalAddressWithHttpInfoAsync(getAccountDetails200ResponsePhysicalAddress, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) the Physical Address for an Account Use this method to update the organization&#39;s physical address for the Constant Contact user account. The physical address is required to send emails and displays on the footer of every email that is sent from the account. To get the current physical address, make a GET call to &#x60;/account/summary/physical_address&#x60;. The country (&lt;code&gt;country_code&lt;/code&gt;) where the account organization resides determines whether you use the &lt;code&gt;state_code&lt;/code&gt; to specify United States (&lt;code&gt;US&lt;/code&gt;) and Canada (&lt;code&gt;CA&lt;/code&gt;) addresses, or use the &lt;code&gt;state_name&lt;/code&gt; to specify all other countries. For more details, see [Put (update) the Physical Address for the Account](/api_guide/account_address_put.html). You must have the role of Account Owner assigned to update account level details. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getAccountDetails200ResponsePhysicalAddress">Include all &#x60;AccountPhysicalAddress&#x60; properties required for the specified &#x60;country_code&#x60; and then update only those properties that you want to change. Excluding a non-read only field from the request body removes it from the physical address.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAccountDetails200ResponsePhysicalAddress)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAccountDetails200ResponsePhysicalAddress>> UpdateAccountPhysicalAddressWithHttpInfoAsync(GetAccountDetails200ResponsePhysicalAddress getAccountDetails200ResponsePhysicalAddress, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'getAccountDetails200ResponsePhysicalAddress' is set
            if (getAccountDetails200ResponsePhysicalAddress == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'getAccountDetails200ResponsePhysicalAddress' when calling AccountServicesApi->UpdateAccountPhysicalAddress");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = getAccountDetails200ResponsePhysicalAddress;

            localVarRequestOptions.Operation = "AccountServicesApi.UpdateAccountPhysicalAddress";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GetAccountDetails200ResponsePhysicalAddress>("/account/summary/physical_address", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateAccountPhysicalAddress", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
