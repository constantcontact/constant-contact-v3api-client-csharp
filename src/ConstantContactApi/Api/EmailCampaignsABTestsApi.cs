/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailCampaignsABTestsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// POST (Create) an A/B Test for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to create a new A/B test for a primary email campaign activity. You must specify an alternative subject line, the percentage of contact to use for the A/B test, and the number of hours to wait after the A/B test is sent before determining the winning subject line. To create an A/B test, the campaign must have a &#x60;current_status&#x60; of &#x60;DRAFT&#x60;. When you create an A/B test, the &#x60;type&#x60; changes from Newsletter (code&#x3D; &#x60;10&#x60;) to A/B Test (code&#x3D; &#x60;57&#x60;).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="getABTestEmailCampaign200Response">Specify the &#x60;alternative_subject&#x60; line, &#x60;test_size&#x60; percentage of contacts (value must from &#x60;5&#x60; to &#x60;50&#x60; inclusively), and the &#x60;winner_wait_duration&#x60; (value must be &#x60;6&#x60;, &#x60;12&#x60;, &#x60;24&#x60;, or &#x60;48&#x60; hours).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetABTestEmailCampaign200Response</returns>
        GetABTestEmailCampaign200Response CreateABTestEmailCampaign(string campaignActivityId, GetABTestEmailCampaign200Response getABTestEmailCampaign200Response, int operationIndex = 0);

        /// <summary>
        /// POST (Create) an A/B Test for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to create a new A/B test for a primary email campaign activity. You must specify an alternative subject line, the percentage of contact to use for the A/B test, and the number of hours to wait after the A/B test is sent before determining the winning subject line. To create an A/B test, the campaign must have a &#x60;current_status&#x60; of &#x60;DRAFT&#x60;. When you create an A/B test, the &#x60;type&#x60; changes from Newsletter (code&#x3D; &#x60;10&#x60;) to A/B Test (code&#x3D; &#x60;57&#x60;).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="getABTestEmailCampaign200Response">Specify the &#x60;alternative_subject&#x60; line, &#x60;test_size&#x60; percentage of contacts (value must from &#x60;5&#x60; to &#x60;50&#x60; inclusively), and the &#x60;winner_wait_duration&#x60; (value must be &#x60;6&#x60;, &#x60;12&#x60;, &#x60;24&#x60;, or &#x60;48&#x60; hours).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetABTestEmailCampaign200Response</returns>
        ApiResponse<GetABTestEmailCampaign200Response> CreateABTestEmailCampaignWithHttpInfo(string campaignActivityId, GetABTestEmailCampaign200Response getABTestEmailCampaign200Response, int operationIndex = 0);
        /// <summary>
        /// DELETE an A/B Test for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Deletes an A/B Test on an primary email campaign activity. You can only delete A/B tests that have a &#x60;current_status&#x60; of &#x60;Draft&#x60;. Deleting an A/B tests reverts the email campaign activity &#x60;type&#x60; from A/B Test (code&#x3D; &#x60;57&#x60;) back to NewsLetter (code&#x3D; &#x60;10&#x60;). Constant Contact uses the original subject line, rather than the alternate A/B test subject line, when an A/B test is deleted.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteABTestEmailCampaign(string campaignActivityId, int operationIndex = 0);

        /// <summary>
        /// DELETE an A/B Test for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Deletes an A/B Test on an primary email campaign activity. You can only delete A/B tests that have a &#x60;current_status&#x60; of &#x60;Draft&#x60;. Deleting an A/B tests reverts the email campaign activity &#x60;type&#x60; from A/B Test (code&#x3D; &#x60;57&#x60;) back to NewsLetter (code&#x3D; &#x60;10&#x60;). Constant Contact uses the original subject line, rather than the alternate A/B test subject line, when an A/B test is deleted.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteABTestEmailCampaignWithHttpInfo(string campaignActivityId, int operationIndex = 0);
        /// <summary>
        /// GET A/B Test Details for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to get A/B test details for a primary email campaign activity, such as the alternate email subject line, the contact test percentage size, and the number of hours to wait to determine the winning subject line to use. Currently, A/B tests support subject line only.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetABTestEmailCampaign200Response</returns>
        GetABTestEmailCampaign200Response GetABTestEmailCampaign(string campaignActivityId, int operationIndex = 0);

        /// <summary>
        /// GET A/B Test Details for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to get A/B test details for a primary email campaign activity, such as the alternate email subject line, the contact test percentage size, and the number of hours to wait to determine the winning subject line to use. Currently, A/B tests support subject line only.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetABTestEmailCampaign200Response</returns>
        ApiResponse<GetABTestEmailCampaign200Response> GetABTestEmailCampaignWithHttpInfo(string campaignActivityId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailCampaignsABTestsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// POST (Create) an A/B Test for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to create a new A/B test for a primary email campaign activity. You must specify an alternative subject line, the percentage of contact to use for the A/B test, and the number of hours to wait after the A/B test is sent before determining the winning subject line. To create an A/B test, the campaign must have a &#x60;current_status&#x60; of &#x60;DRAFT&#x60;. When you create an A/B test, the &#x60;type&#x60; changes from Newsletter (code&#x3D; &#x60;10&#x60;) to A/B Test (code&#x3D; &#x60;57&#x60;).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="getABTestEmailCampaign200Response">Specify the &#x60;alternative_subject&#x60; line, &#x60;test_size&#x60; percentage of contacts (value must from &#x60;5&#x60; to &#x60;50&#x60; inclusively), and the &#x60;winner_wait_duration&#x60; (value must be &#x60;6&#x60;, &#x60;12&#x60;, &#x60;24&#x60;, or &#x60;48&#x60; hours).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetABTestEmailCampaign200Response</returns>
        System.Threading.Tasks.Task<GetABTestEmailCampaign200Response> CreateABTestEmailCampaignAsync(string campaignActivityId, GetABTestEmailCampaign200Response getABTestEmailCampaign200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST (Create) an A/B Test for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to create a new A/B test for a primary email campaign activity. You must specify an alternative subject line, the percentage of contact to use for the A/B test, and the number of hours to wait after the A/B test is sent before determining the winning subject line. To create an A/B test, the campaign must have a &#x60;current_status&#x60; of &#x60;DRAFT&#x60;. When you create an A/B test, the &#x60;type&#x60; changes from Newsletter (code&#x3D; &#x60;10&#x60;) to A/B Test (code&#x3D; &#x60;57&#x60;).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="getABTestEmailCampaign200Response">Specify the &#x60;alternative_subject&#x60; line, &#x60;test_size&#x60; percentage of contacts (value must from &#x60;5&#x60; to &#x60;50&#x60; inclusively), and the &#x60;winner_wait_duration&#x60; (value must be &#x60;6&#x60;, &#x60;12&#x60;, &#x60;24&#x60;, or &#x60;48&#x60; hours).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetABTestEmailCampaign200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetABTestEmailCampaign200Response>> CreateABTestEmailCampaignWithHttpInfoAsync(string campaignActivityId, GetABTestEmailCampaign200Response getABTestEmailCampaign200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DELETE an A/B Test for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Deletes an A/B Test on an primary email campaign activity. You can only delete A/B tests that have a &#x60;current_status&#x60; of &#x60;Draft&#x60;. Deleting an A/B tests reverts the email campaign activity &#x60;type&#x60; from A/B Test (code&#x3D; &#x60;57&#x60;) back to NewsLetter (code&#x3D; &#x60;10&#x60;). Constant Contact uses the original subject line, rather than the alternate A/B test subject line, when an A/B test is deleted.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteABTestEmailCampaignAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DELETE an A/B Test for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Deletes an A/B Test on an primary email campaign activity. You can only delete A/B tests that have a &#x60;current_status&#x60; of &#x60;Draft&#x60;. Deleting an A/B tests reverts the email campaign activity &#x60;type&#x60; from A/B Test (code&#x3D; &#x60;57&#x60;) back to NewsLetter (code&#x3D; &#x60;10&#x60;). Constant Contact uses the original subject line, rather than the alternate A/B test subject line, when an A/B test is deleted.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteABTestEmailCampaignWithHttpInfoAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET A/B Test Details for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to get A/B test details for a primary email campaign activity, such as the alternate email subject line, the contact test percentage size, and the number of hours to wait to determine the winning subject line to use. Currently, A/B tests support subject line only.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetABTestEmailCampaign200Response</returns>
        System.Threading.Tasks.Task<GetABTestEmailCampaign200Response> GetABTestEmailCampaignAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET A/B Test Details for an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to get A/B test details for a primary email campaign activity, such as the alternate email subject line, the contact test percentage size, and the number of hours to wait to determine the winning subject line to use. Currently, A/B tests support subject line only.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetABTestEmailCampaign200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetABTestEmailCampaign200Response>> GetABTestEmailCampaignWithHttpInfoAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailCampaignsABTestsApi : IEmailCampaignsABTestsApiSync, IEmailCampaignsABTestsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailCampaignsABTestsApi : IEmailCampaignsABTestsApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignsABTestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailCampaignsABTestsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignsABTestsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailCampaignsABTestsApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignsABTestsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailCampaignsABTestsApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignsABTestsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailCampaignsABTestsApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// POST (Create) an A/B Test for an Email Campaign Activity Use this method to create a new A/B test for a primary email campaign activity. You must specify an alternative subject line, the percentage of contact to use for the A/B test, and the number of hours to wait after the A/B test is sent before determining the winning subject line. To create an A/B test, the campaign must have a &#x60;current_status&#x60; of &#x60;DRAFT&#x60;. When you create an A/B test, the &#x60;type&#x60; changes from Newsletter (code&#x3D; &#x60;10&#x60;) to A/B Test (code&#x3D; &#x60;57&#x60;).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="getABTestEmailCampaign200Response">Specify the &#x60;alternative_subject&#x60; line, &#x60;test_size&#x60; percentage of contacts (value must from &#x60;5&#x60; to &#x60;50&#x60; inclusively), and the &#x60;winner_wait_duration&#x60; (value must be &#x60;6&#x60;, &#x60;12&#x60;, &#x60;24&#x60;, or &#x60;48&#x60; hours).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetABTestEmailCampaign200Response</returns>
        public GetABTestEmailCampaign200Response CreateABTestEmailCampaign(string campaignActivityId, GetABTestEmailCampaign200Response getABTestEmailCampaign200Response, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetABTestEmailCampaign200Response> localVarResponse = CreateABTestEmailCampaignWithHttpInfo(campaignActivityId, getABTestEmailCampaign200Response);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (Create) an A/B Test for an Email Campaign Activity Use this method to create a new A/B test for a primary email campaign activity. You must specify an alternative subject line, the percentage of contact to use for the A/B test, and the number of hours to wait after the A/B test is sent before determining the winning subject line. To create an A/B test, the campaign must have a &#x60;current_status&#x60; of &#x60;DRAFT&#x60;. When you create an A/B test, the &#x60;type&#x60; changes from Newsletter (code&#x3D; &#x60;10&#x60;) to A/B Test (code&#x3D; &#x60;57&#x60;).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="getABTestEmailCampaign200Response">Specify the &#x60;alternative_subject&#x60; line, &#x60;test_size&#x60; percentage of contacts (value must from &#x60;5&#x60; to &#x60;50&#x60; inclusively), and the &#x60;winner_wait_duration&#x60; (value must be &#x60;6&#x60;, &#x60;12&#x60;, &#x60;24&#x60;, or &#x60;48&#x60; hours).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetABTestEmailCampaign200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetABTestEmailCampaign200Response> CreateABTestEmailCampaignWithHttpInfo(string campaignActivityId, GetABTestEmailCampaign200Response getABTestEmailCampaign200Response, int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsABTestsApi->CreateABTestEmailCampaign");
            }

            // verify the required parameter 'getABTestEmailCampaign200Response' is set
            if (getABTestEmailCampaign200Response == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'getABTestEmailCampaign200Response' when calling EmailCampaignsABTestsApi->CreateABTestEmailCampaign");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = getABTestEmailCampaign200Response;

            localVarRequestOptions.Operation = "EmailCampaignsABTestsApi.CreateABTestEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetABTestEmailCampaign200Response>("/emails/activities/{campaign_activity_id}/abtest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateABTestEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST (Create) an A/B Test for an Email Campaign Activity Use this method to create a new A/B test for a primary email campaign activity. You must specify an alternative subject line, the percentage of contact to use for the A/B test, and the number of hours to wait after the A/B test is sent before determining the winning subject line. To create an A/B test, the campaign must have a &#x60;current_status&#x60; of &#x60;DRAFT&#x60;. When you create an A/B test, the &#x60;type&#x60; changes from Newsletter (code&#x3D; &#x60;10&#x60;) to A/B Test (code&#x3D; &#x60;57&#x60;).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="getABTestEmailCampaign200Response">Specify the &#x60;alternative_subject&#x60; line, &#x60;test_size&#x60; percentage of contacts (value must from &#x60;5&#x60; to &#x60;50&#x60; inclusively), and the &#x60;winner_wait_duration&#x60; (value must be &#x60;6&#x60;, &#x60;12&#x60;, &#x60;24&#x60;, or &#x60;48&#x60; hours).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetABTestEmailCampaign200Response</returns>
        public async System.Threading.Tasks.Task<GetABTestEmailCampaign200Response> CreateABTestEmailCampaignAsync(string campaignActivityId, GetABTestEmailCampaign200Response getABTestEmailCampaign200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetABTestEmailCampaign200Response> localVarResponse = await CreateABTestEmailCampaignWithHttpInfoAsync(campaignActivityId, getABTestEmailCampaign200Response, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (Create) an A/B Test for an Email Campaign Activity Use this method to create a new A/B test for a primary email campaign activity. You must specify an alternative subject line, the percentage of contact to use for the A/B test, and the number of hours to wait after the A/B test is sent before determining the winning subject line. To create an A/B test, the campaign must have a &#x60;current_status&#x60; of &#x60;DRAFT&#x60;. When you create an A/B test, the &#x60;type&#x60; changes from Newsletter (code&#x3D; &#x60;10&#x60;) to A/B Test (code&#x3D; &#x60;57&#x60;).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="getABTestEmailCampaign200Response">Specify the &#x60;alternative_subject&#x60; line, &#x60;test_size&#x60; percentage of contacts (value must from &#x60;5&#x60; to &#x60;50&#x60; inclusively), and the &#x60;winner_wait_duration&#x60; (value must be &#x60;6&#x60;, &#x60;12&#x60;, &#x60;24&#x60;, or &#x60;48&#x60; hours).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetABTestEmailCampaign200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetABTestEmailCampaign200Response>> CreateABTestEmailCampaignWithHttpInfoAsync(string campaignActivityId, GetABTestEmailCampaign200Response getABTestEmailCampaign200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsABTestsApi->CreateABTestEmailCampaign");
            }

            // verify the required parameter 'getABTestEmailCampaign200Response' is set
            if (getABTestEmailCampaign200Response == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'getABTestEmailCampaign200Response' when calling EmailCampaignsABTestsApi->CreateABTestEmailCampaign");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = getABTestEmailCampaign200Response;

            localVarRequestOptions.Operation = "EmailCampaignsABTestsApi.CreateABTestEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetABTestEmailCampaign200Response>("/emails/activities/{campaign_activity_id}/abtest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateABTestEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE an A/B Test for an Email Campaign Activity Deletes an A/B Test on an primary email campaign activity. You can only delete A/B tests that have a &#x60;current_status&#x60; of &#x60;Draft&#x60;. Deleting an A/B tests reverts the email campaign activity &#x60;type&#x60; from A/B Test (code&#x3D; &#x60;57&#x60;) back to NewsLetter (code&#x3D; &#x60;10&#x60;). Constant Contact uses the original subject line, rather than the alternate A/B test subject line, when an A/B test is deleted.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteABTestEmailCampaign(string campaignActivityId, int operationIndex = 0)
        {
            DeleteABTestEmailCampaignWithHttpInfo(campaignActivityId);
        }

        /// <summary>
        /// DELETE an A/B Test for an Email Campaign Activity Deletes an A/B Test on an primary email campaign activity. You can only delete A/B tests that have a &#x60;current_status&#x60; of &#x60;Draft&#x60;. Deleting an A/B tests reverts the email campaign activity &#x60;type&#x60; from A/B Test (code&#x3D; &#x60;57&#x60;) back to NewsLetter (code&#x3D; &#x60;10&#x60;). Constant Contact uses the original subject line, rather than the alternate A/B test subject line, when an A/B test is deleted.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ConstantContactApi.Client.ApiResponse<Object> DeleteABTestEmailCampaignWithHttpInfo(string campaignActivityId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsABTestsApi->DeleteABTestEmailCampaign");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsABTestsApi.DeleteABTestEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/emails/activities/{campaign_activity_id}/abtest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteABTestEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE an A/B Test for an Email Campaign Activity Deletes an A/B Test on an primary email campaign activity. You can only delete A/B tests that have a &#x60;current_status&#x60; of &#x60;Draft&#x60;. Deleting an A/B tests reverts the email campaign activity &#x60;type&#x60; from A/B Test (code&#x3D; &#x60;57&#x60;) back to NewsLetter (code&#x3D; &#x60;10&#x60;). Constant Contact uses the original subject line, rather than the alternate A/B test subject line, when an A/B test is deleted.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteABTestEmailCampaignAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteABTestEmailCampaignWithHttpInfoAsync(campaignActivityId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// DELETE an A/B Test for an Email Campaign Activity Deletes an A/B Test on an primary email campaign activity. You can only delete A/B tests that have a &#x60;current_status&#x60; of &#x60;Draft&#x60;. Deleting an A/B tests reverts the email campaign activity &#x60;type&#x60; from A/B Test (code&#x3D; &#x60;57&#x60;) back to NewsLetter (code&#x3D; &#x60;10&#x60;). Constant Contact uses the original subject line, rather than the alternate A/B test subject line, when an A/B test is deleted.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<Object>> DeleteABTestEmailCampaignWithHttpInfoAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsABTestsApi->DeleteABTestEmailCampaign");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsABTestsApi.DeleteABTestEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/emails/activities/{campaign_activity_id}/abtest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteABTestEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET A/B Test Details for an Email Campaign Activity Use this method to get A/B test details for a primary email campaign activity, such as the alternate email subject line, the contact test percentage size, and the number of hours to wait to determine the winning subject line to use. Currently, A/B tests support subject line only.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetABTestEmailCampaign200Response</returns>
        public GetABTestEmailCampaign200Response GetABTestEmailCampaign(string campaignActivityId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetABTestEmailCampaign200Response> localVarResponse = GetABTestEmailCampaignWithHttpInfo(campaignActivityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET A/B Test Details for an Email Campaign Activity Use this method to get A/B test details for a primary email campaign activity, such as the alternate email subject line, the contact test percentage size, and the number of hours to wait to determine the winning subject line to use. Currently, A/B tests support subject line only.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetABTestEmailCampaign200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetABTestEmailCampaign200Response> GetABTestEmailCampaignWithHttpInfo(string campaignActivityId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsABTestsApi->GetABTestEmailCampaign");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsABTestsApi.GetABTestEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetABTestEmailCampaign200Response>("/emails/activities/{campaign_activity_id}/abtest", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetABTestEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET A/B Test Details for an Email Campaign Activity Use this method to get A/B test details for a primary email campaign activity, such as the alternate email subject line, the contact test percentage size, and the number of hours to wait to determine the winning subject line to use. Currently, A/B tests support subject line only.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetABTestEmailCampaign200Response</returns>
        public async System.Threading.Tasks.Task<GetABTestEmailCampaign200Response> GetABTestEmailCampaignAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetABTestEmailCampaign200Response> localVarResponse = await GetABTestEmailCampaignWithHttpInfoAsync(campaignActivityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET A/B Test Details for an Email Campaign Activity Use this method to get A/B test details for a primary email campaign activity, such as the alternate email subject line, the contact test percentage size, and the number of hours to wait to determine the winning subject line to use. Currently, A/B tests support subject line only.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetABTestEmailCampaign200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetABTestEmailCampaign200Response>> GetABTestEmailCampaignWithHttpInfoAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsABTestsApi->GetABTestEmailCampaign");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsABTestsApi.GetABTestEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetABTestEmailCampaign200Response>("/emails/activities/{campaign_activity_id}/abtest", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetABTestEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
