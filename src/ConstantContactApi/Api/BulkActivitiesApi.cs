/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBulkActivitiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Import Contacts using a CSV File
        /// </summary>
        /// <remarks>
        /// This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact email address automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. Importing contacts with &#x60;sms_number&#x60;s requires using the &#x60;sms_permission_to_send&#x60; parameter  to specify permissions for all contacts being imported. Set to &#x60;explicit&#x60; to specify that all contacts either provided explicit permission. Set to &#x60;not_set&#x60; if permission was not provided. If &#x60;explicit&#x60;, you must also include the &#x60;sms_consent_date&#x60; as a column header to include the date the contact consented to receiving SMS messages. Contacts must have either an email address or an SMS number defined.   The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file you are importing  must include either &#x60;email&#x60; or &#x60;sms_number&#x60; as a column heading. Other properties you can include using column headings are: &#x60;first_name&#x60;.  &#x60;last_name&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, &#x60;country&#x60;, and &#x60;sms_consent_date&#x60;.   If adding an &#x60;sms_number&#x60;, you must also include the &#x60;sms_permission_to_send&#x60; parameter and set it to either &#x60;not_set&#x60; or &#x60;explicit&#x60;. If &#x60;explicit&#x60;, requires including &#x60;sms_consent_date&#x60; as a column header to specify the date the contact consented to receiving SMS messages.   You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.</param>
        /// <param name="listIds">Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.</param>
        /// <param name="smsPermissionToSend">If importing contact &#x60;sms_number&#x60;s, use this parameter to specify how SMS consent was provided. If all contacts in the file provided their consent, set to &#x60;explicit&#x60; and include each contact&#39;s &#x60;sms_consent_date&#x60;. If all contacts in the file have not yet provided consent, set to &#x60;not_set&#x60; (&#x60;sms_consent_date&#x60; is not required). You cannot message a contact that does not have a sms consent date set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCSVImportActivity201Response</returns>
        CreateCSVImportActivity201Response CreateCSVImportActivity(System.IO.Stream file, string listIds, string? smsPermissionToSend = default(string?), int operationIndex = 0);

        /// <summary>
        /// Import Contacts using a CSV File
        /// </summary>
        /// <remarks>
        /// This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact email address automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. Importing contacts with &#x60;sms_number&#x60;s requires using the &#x60;sms_permission_to_send&#x60; parameter  to specify permissions for all contacts being imported. Set to &#x60;explicit&#x60; to specify that all contacts either provided explicit permission. Set to &#x60;not_set&#x60; if permission was not provided. If &#x60;explicit&#x60;, you must also include the &#x60;sms_consent_date&#x60; as a column header to include the date the contact consented to receiving SMS messages. Contacts must have either an email address or an SMS number defined.   The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file you are importing  must include either &#x60;email&#x60; or &#x60;sms_number&#x60; as a column heading. Other properties you can include using column headings are: &#x60;first_name&#x60;.  &#x60;last_name&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, &#x60;country&#x60;, and &#x60;sms_consent_date&#x60;.   If adding an &#x60;sms_number&#x60;, you must also include the &#x60;sms_permission_to_send&#x60; parameter and set it to either &#x60;not_set&#x60; or &#x60;explicit&#x60;. If &#x60;explicit&#x60;, requires including &#x60;sms_consent_date&#x60; as a column header to specify the date the contact consented to receiving SMS messages.   You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.</param>
        /// <param name="listIds">Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.</param>
        /// <param name="smsPermissionToSend">If importing contact &#x60;sms_number&#x60;s, use this parameter to specify how SMS consent was provided. If all contacts in the file provided their consent, set to &#x60;explicit&#x60; and include each contact&#39;s &#x60;sms_consent_date&#x60;. If all contacts in the file have not yet provided consent, set to &#x60;not_set&#x60; (&#x60;sms_consent_date&#x60; is not required). You cannot message a contact that does not have a sms consent date set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCSVImportActivity201Response</returns>
        ApiResponse<CreateCSVImportActivity201Response> CreateCSVImportActivityWithHttpInfo(System.IO.Stream file, string listIds, string? smsPermissionToSend = default(string?), int operationIndex = 0);
        /// <summary>
        /// Delete Contacts in Bulk
        /// </summary>
        /// <remarks>
        /// Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeleteActivityRequest">The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateDeleteActivity201Response</returns>
        CreateDeleteActivity201Response CreateDeleteActivity(CreateDeleteActivityRequest createDeleteActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Delete Contacts in Bulk
        /// </summary>
        /// <remarks>
        /// Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeleteActivityRequest">The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateDeleteActivity201Response</returns>
        ApiResponse<CreateDeleteActivity201Response> CreateDeleteActivityWithHttpInfo(CreateDeleteActivityRequest createDeleteActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Export Contacts to a File
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that exports contacts and contact details to a CSV file.  You can choose to export all contacts in your account (default) or you can use parameters to filter on which contacts to export. After Constant Contact finishes processing the activity, use the &#x60;results&#x60; link in the response body to retrieve the CSV file.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createExportActivityRequest">A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateExportActivity201Response</returns>
        CreateExportActivity201Response CreateExportActivity(CreateExportActivityRequest createExportActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Export Contacts to a File
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that exports contacts and contact details to a CSV file.  You can choose to export all contacts in your account (default) or you can use parameters to filter on which contacts to export. After Constant Contact finishes processing the activity, use the &#x60;results&#x60; link in the response body to retrieve the CSV file.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createExportActivityRequest">A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateExportActivity201Response</returns>
        ApiResponse<CreateExportActivity201Response> CreateExportActivityWithHttpInfo(CreateExportActivityRequest createExportActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Import Contacts using a JSON Payload
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. A contact&#39;s data must include an &#x60;email&#x60; address and/or &#x60;sms_number&#x60;. The &#x60;sms_number&#x60; must be a US phone number to associate with the contact&#39;s SMS-enabled phone. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt; (the country code must be valid).  Importing a new contact using this method automatically sets the contact&#39;s email &#x60;permission_to_send&#x60; property to &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported.        To import custom fields, prefix the custom field name with &#x60;cf:&#x60; and add it as a contact property. For example, use the property name &#x60;cf:first_name&#x60; if you have a custom field named &#x60;first_name&#x60;. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  To include a contact&#39;s &#x60;sms_number&#x60;, if the contact provided explicit permission to receive SMS messages, you must set the &#x60;sms_permission_to_send&#x60; property to &#x60;explicit&#x60; and specify the date of consent using the &#x60;sms_consent_date&#x60; column header. If explicit permission was not provided, set &#x60;sms_permission_to_send&#x60; to &#x60;not_set&#x60; (the &#x60;sms_consent_date&#x60; is not required). If the &#x60;sms_consent_date&#x60; is not set, SMS messages cannot be sent to contacts and &#x60;sms_permission_to_send&#x60; defaults to &#x60;not_set&#x60;. Valid value formats for &#x60;sms_consent_date&#x60; include MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.   The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImportJSONActivityRequest">The JSON request payload that contains the contact data and contact lists for the import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCSVImportActivity201Response</returns>
        CreateCSVImportActivity201Response CreateImportJSONActivity(CreateImportJSONActivityRequest createImportJSONActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Import Contacts using a JSON Payload
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. A contact&#39;s data must include an &#x60;email&#x60; address and/or &#x60;sms_number&#x60;. The &#x60;sms_number&#x60; must be a US phone number to associate with the contact&#39;s SMS-enabled phone. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt; (the country code must be valid).  Importing a new contact using this method automatically sets the contact&#39;s email &#x60;permission_to_send&#x60; property to &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported.        To import custom fields, prefix the custom field name with &#x60;cf:&#x60; and add it as a contact property. For example, use the property name &#x60;cf:first_name&#x60; if you have a custom field named &#x60;first_name&#x60;. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  To include a contact&#39;s &#x60;sms_number&#x60;, if the contact provided explicit permission to receive SMS messages, you must set the &#x60;sms_permission_to_send&#x60; property to &#x60;explicit&#x60; and specify the date of consent using the &#x60;sms_consent_date&#x60; column header. If explicit permission was not provided, set &#x60;sms_permission_to_send&#x60; to &#x60;not_set&#x60; (the &#x60;sms_consent_date&#x60; is not required). If the &#x60;sms_consent_date&#x60; is not set, SMS messages cannot be sent to contacts and &#x60;sms_permission_to_send&#x60; defaults to &#x60;not_set&#x60;. Valid value formats for &#x60;sms_consent_date&#x60; include MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.   The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImportJSONActivityRequest">The JSON request payload that contains the contact data and contact lists for the import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCSVImportActivity201Response</returns>
        ApiResponse<CreateCSVImportActivity201Response> CreateImportJSONActivityWithHttpInfo(CreateImportJSONActivityRequest createImportJSONActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Add Contacts to Lists
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the &#x60;source&#x60; object to specify the contacts you want to add to lists. Use the &#x60;list_ids&#x60; array to specify which lists you want to add your source contacts to.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListAddActivityRequest">The JSON payload used to create the &#39;add contacts to lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateListRemoveActivity201Response</returns>
        CreateListRemoveActivity201Response CreateListAddActivity(CreateListAddActivityRequest createListAddActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Add Contacts to Lists
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the &#x60;source&#x60; object to specify the contacts you want to add to lists. Use the &#x60;list_ids&#x60; array to specify which lists you want to add your source contacts to.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListAddActivityRequest">The JSON payload used to create the &#39;add contacts to lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateListRemoveActivity201Response</returns>
        ApiResponse<CreateListRemoveActivity201Response> CreateListAddActivityWithHttpInfo(CreateListAddActivityRequest createListAddActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Contact Lists
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete up to 100 contact lists in an account. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListDeleteActivityRequest">An array of &#x60;list_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateListDeleteActivity201Response</returns>
        CreateListDeleteActivity201Response CreateListDeleteActivity(CreateListDeleteActivityRequest createListDeleteActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Delete Contact Lists
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete up to 100 contact lists in an account. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListDeleteActivityRequest">An array of &#x60;list_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateListDeleteActivity201Response</returns>
        ApiResponse<CreateListDeleteActivity201Response> CreateListDeleteActivityWithHttpInfo(CreateListDeleteActivityRequest createListDeleteActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Remove Contacts from Lists
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the &#x60;source&#x60; object to remove specific contacts from your lists. Use the &#x60;list_ids&#x60; array to specify the target lists from which contacts are removed. Optionally, if the source is  &#x60;all_active_contacts&#x60; (billable) or &#x60;list_ids&#x60;, use the &#x60;exclude&#x60; object to exclude specific contacts from being removed from the destination lists.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRemoveActivityRequest">The JSON payload used to create the Remove Contacts from Lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateListRemoveActivity201Response</returns>
        CreateListRemoveActivity201Response CreateListRemoveActivity(CreateListRemoveActivityRequest createListRemoveActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Remove Contacts from Lists
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the &#x60;source&#x60; object to remove specific contacts from your lists. Use the &#x60;list_ids&#x60; array to specify the target lists from which contacts are removed. Optionally, if the source is  &#x60;all_active_contacts&#x60; (billable) or &#x60;list_ids&#x60;, use the &#x60;exclude&#x60; object to exclude specific contacts from being removed from the destination lists.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRemoveActivityRequest">The JSON payload used to create the Remove Contacts from Lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateListRemoveActivity201Response</returns>
        ApiResponse<CreateListRemoveActivity201Response> CreateListRemoveActivityWithHttpInfo(CreateListRemoveActivityRequest createListRemoveActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Add Tags to Contacts
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the &#x60;source&#x60; type to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are added. Source criteria are mutually exclusive. If the source is &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request. For more use case information, see \&quot;[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTagRemoveActivity201Response</returns>
        CreateTagRemoveActivity201Response CreateTagAddContactActivity(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Add Tags to Contacts
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the &#x60;source&#x60; type to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are added. Source criteria are mutually exclusive. If the source is &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request. For more use case information, see \&quot;[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTagRemoveActivity201Response</returns>
        ApiResponse<CreateTagRemoveActivity201Response> CreateTagAddContactActivityWithHttpInfo(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Delete Tags
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the &#x60;tag_ids&#x60; array of string values in the request body to specify which tags to delete.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagDeleteActivityRequest">An array of string values (&#x60;tag_id&#x60;s) to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTagRemoveActivity201Response</returns>
        CreateTagRemoveActivity201Response CreateTagDeleteActivity(CreateTagDeleteActivityRequest createTagDeleteActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Delete Tags
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the &#x60;tag_ids&#x60; array of string values in the request body to specify which tags to delete.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagDeleteActivityRequest">An array of string values (&#x60;tag_id&#x60;s) to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTagRemoveActivity201Response</returns>
        ApiResponse<CreateTagRemoveActivity201Response> CreateTagDeleteActivityWithHttpInfo(CreateTagDeleteActivityRequest createTagDeleteActivityRequest, int operationIndex = 0);
        /// <summary>
        /// Remove Tags from Contacts
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the &#x60;source&#x60; type used to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are removed. Source types are mutually exclusive. If the specified source is either &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; specified contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request.\&quot; For more use case information, see \&quot;[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTagRemoveActivity201Response</returns>
        CreateTagRemoveActivity201Response CreateTagRemoveActivity(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0);

        /// <summary>
        /// Remove Tags from Contacts
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the &#x60;source&#x60; type used to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are removed. Source types are mutually exclusive. If the specified source is either &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; specified contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request.\&quot; For more use case information, see \&quot;[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTagRemoveActivity201Response</returns>
        ApiResponse<CreateTagRemoveActivity201Response> CreateTagRemoveActivityWithHttpInfo(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0);
        /// <summary>
        /// GET an Activity Status
        /// </summary>
        /// <remarks>
        /// This endpoint returns an activity status report.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The unique ID of the activity to GET</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetActivityById200Response</returns>
        GetActivityById200Response GetActivityById(string activityId, int operationIndex = 0);

        /// <summary>
        /// GET an Activity Status
        /// </summary>
        /// <remarks>
        /// This endpoint returns an activity status report.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The unique ID of the activity to GET</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetActivityById200Response</returns>
        ApiResponse<GetActivityById200Response> GetActivityByIdWithHttpInfo(string activityId, int operationIndex = 0);
        /// <summary>
        /// GET Activity Status Collection
        /// </summary>
        /// <remarks>
        /// This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="state">Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllActivities200Response</returns>
        GetAllActivities200Response GetAllActivities(int? limit = default(int?), string? state = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET Activity Status Collection
        /// </summary>
        /// <remarks>
        /// This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="state">Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllActivities200Response</returns>
        ApiResponse<GetAllActivities200Response> GetAllActivitiesWithHttpInfo(int? limit = default(int?), string? state = default(string?), int operationIndex = 0);
        /// <summary>
        /// Retrieve Exported Contacts File
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the &#x60;activity_id&#x60; of a completed CSV export activity.  
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileExportId">The unique ID of the exported file provided in the results: section of the export contacts activity response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string GetCSVExportFile(string fileExportId, int operationIndex = 0);

        /// <summary>
        /// Retrieve Exported Contacts File
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the &#x60;activity_id&#x60; of a completed CSV export activity.  
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileExportId">The unique ID of the exported file provided in the results: section of the export contacts activity response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetCSVExportFileWithHttpInfo(string fileExportId, int operationIndex = 0);
        /// <summary>
        /// Delete Custom Fields
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete up to 100 custom fields for an account. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCustomFieldDeleteRequest">An array of &#x60;custom_field_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostCustomFieldDelete201Response</returns>
        PostCustomFieldDelete201Response PostCustomFieldDelete(PostCustomFieldDeleteRequest postCustomFieldDeleteRequest, int operationIndex = 0);

        /// <summary>
        /// Delete Custom Fields
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete up to 100 custom fields for an account. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCustomFieldDeleteRequest">An array of &#x60;custom_field_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostCustomFieldDelete201Response</returns>
        ApiResponse<PostCustomFieldDelete201Response> PostCustomFieldDeleteWithHttpInfo(PostCustomFieldDeleteRequest postCustomFieldDeleteRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBulkActivitiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Import Contacts using a CSV File
        /// </summary>
        /// <remarks>
        /// This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact email address automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. Importing contacts with &#x60;sms_number&#x60;s requires using the &#x60;sms_permission_to_send&#x60; parameter  to specify permissions for all contacts being imported. Set to &#x60;explicit&#x60; to specify that all contacts either provided explicit permission. Set to &#x60;not_set&#x60; if permission was not provided. If &#x60;explicit&#x60;, you must also include the &#x60;sms_consent_date&#x60; as a column header to include the date the contact consented to receiving SMS messages. Contacts must have either an email address or an SMS number defined.   The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file you are importing  must include either &#x60;email&#x60; or &#x60;sms_number&#x60; as a column heading. Other properties you can include using column headings are: &#x60;first_name&#x60;.  &#x60;last_name&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, &#x60;country&#x60;, and &#x60;sms_consent_date&#x60;.   If adding an &#x60;sms_number&#x60;, you must also include the &#x60;sms_permission_to_send&#x60; parameter and set it to either &#x60;not_set&#x60; or &#x60;explicit&#x60;. If &#x60;explicit&#x60;, requires including &#x60;sms_consent_date&#x60; as a column header to specify the date the contact consented to receiving SMS messages.   You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.</param>
        /// <param name="listIds">Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.</param>
        /// <param name="smsPermissionToSend">If importing contact &#x60;sms_number&#x60;s, use this parameter to specify how SMS consent was provided. If all contacts in the file provided their consent, set to &#x60;explicit&#x60; and include each contact&#39;s &#x60;sms_consent_date&#x60;. If all contacts in the file have not yet provided consent, set to &#x60;not_set&#x60; (&#x60;sms_consent_date&#x60; is not required). You cannot message a contact that does not have a sms consent date set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCSVImportActivity201Response</returns>
        System.Threading.Tasks.Task<CreateCSVImportActivity201Response> CreateCSVImportActivityAsync(System.IO.Stream file, string listIds, string? smsPermissionToSend = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Contacts using a CSV File
        /// </summary>
        /// <remarks>
        /// This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact email address automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. Importing contacts with &#x60;sms_number&#x60;s requires using the &#x60;sms_permission_to_send&#x60; parameter  to specify permissions for all contacts being imported. Set to &#x60;explicit&#x60; to specify that all contacts either provided explicit permission. Set to &#x60;not_set&#x60; if permission was not provided. If &#x60;explicit&#x60;, you must also include the &#x60;sms_consent_date&#x60; as a column header to include the date the contact consented to receiving SMS messages. Contacts must have either an email address or an SMS number defined.   The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file you are importing  must include either &#x60;email&#x60; or &#x60;sms_number&#x60; as a column heading. Other properties you can include using column headings are: &#x60;first_name&#x60;.  &#x60;last_name&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, &#x60;country&#x60;, and &#x60;sms_consent_date&#x60;.   If adding an &#x60;sms_number&#x60;, you must also include the &#x60;sms_permission_to_send&#x60; parameter and set it to either &#x60;not_set&#x60; or &#x60;explicit&#x60;. If &#x60;explicit&#x60;, requires including &#x60;sms_consent_date&#x60; as a column header to specify the date the contact consented to receiving SMS messages.   You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.</param>
        /// <param name="listIds">Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.</param>
        /// <param name="smsPermissionToSend">If importing contact &#x60;sms_number&#x60;s, use this parameter to specify how SMS consent was provided. If all contacts in the file provided their consent, set to &#x60;explicit&#x60; and include each contact&#39;s &#x60;sms_consent_date&#x60;. If all contacts in the file have not yet provided consent, set to &#x60;not_set&#x60; (&#x60;sms_consent_date&#x60; is not required). You cannot message a contact that does not have a sms consent date set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCSVImportActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCSVImportActivity201Response>> CreateCSVImportActivityWithHttpInfoAsync(System.IO.Stream file, string listIds, string? smsPermissionToSend = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Contacts in Bulk
        /// </summary>
        /// <remarks>
        /// Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeleteActivityRequest">The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDeleteActivity201Response</returns>
        System.Threading.Tasks.Task<CreateDeleteActivity201Response> CreateDeleteActivityAsync(CreateDeleteActivityRequest createDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Contacts in Bulk
        /// </summary>
        /// <remarks>
        /// Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeleteActivityRequest">The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDeleteActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateDeleteActivity201Response>> CreateDeleteActivityWithHttpInfoAsync(CreateDeleteActivityRequest createDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Export Contacts to a File
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that exports contacts and contact details to a CSV file.  You can choose to export all contacts in your account (default) or you can use parameters to filter on which contacts to export. After Constant Contact finishes processing the activity, use the &#x60;results&#x60; link in the response body to retrieve the CSV file.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createExportActivityRequest">A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateExportActivity201Response</returns>
        System.Threading.Tasks.Task<CreateExportActivity201Response> CreateExportActivityAsync(CreateExportActivityRequest createExportActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Export Contacts to a File
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that exports contacts and contact details to a CSV file.  You can choose to export all contacts in your account (default) or you can use parameters to filter on which contacts to export. After Constant Contact finishes processing the activity, use the &#x60;results&#x60; link in the response body to retrieve the CSV file.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createExportActivityRequest">A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateExportActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateExportActivity201Response>> CreateExportActivityWithHttpInfoAsync(CreateExportActivityRequest createExportActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Import Contacts using a JSON Payload
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. A contact&#39;s data must include an &#x60;email&#x60; address and/or &#x60;sms_number&#x60;. The &#x60;sms_number&#x60; must be a US phone number to associate with the contact&#39;s SMS-enabled phone. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt; (the country code must be valid).  Importing a new contact using this method automatically sets the contact&#39;s email &#x60;permission_to_send&#x60; property to &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported.        To import custom fields, prefix the custom field name with &#x60;cf:&#x60; and add it as a contact property. For example, use the property name &#x60;cf:first_name&#x60; if you have a custom field named &#x60;first_name&#x60;. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  To include a contact&#39;s &#x60;sms_number&#x60;, if the contact provided explicit permission to receive SMS messages, you must set the &#x60;sms_permission_to_send&#x60; property to &#x60;explicit&#x60; and specify the date of consent using the &#x60;sms_consent_date&#x60; column header. If explicit permission was not provided, set &#x60;sms_permission_to_send&#x60; to &#x60;not_set&#x60; (the &#x60;sms_consent_date&#x60; is not required). If the &#x60;sms_consent_date&#x60; is not set, SMS messages cannot be sent to contacts and &#x60;sms_permission_to_send&#x60; defaults to &#x60;not_set&#x60;. Valid value formats for &#x60;sms_consent_date&#x60; include MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.   The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImportJSONActivityRequest">The JSON request payload that contains the contact data and contact lists for the import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCSVImportActivity201Response</returns>
        System.Threading.Tasks.Task<CreateCSVImportActivity201Response> CreateImportJSONActivityAsync(CreateImportJSONActivityRequest createImportJSONActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Import Contacts using a JSON Payload
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. A contact&#39;s data must include an &#x60;email&#x60; address and/or &#x60;sms_number&#x60;. The &#x60;sms_number&#x60; must be a US phone number to associate with the contact&#39;s SMS-enabled phone. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt; (the country code must be valid).  Importing a new contact using this method automatically sets the contact&#39;s email &#x60;permission_to_send&#x60; property to &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported.        To import custom fields, prefix the custom field name with &#x60;cf:&#x60; and add it as a contact property. For example, use the property name &#x60;cf:first_name&#x60; if you have a custom field named &#x60;first_name&#x60;. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  To include a contact&#39;s &#x60;sms_number&#x60;, if the contact provided explicit permission to receive SMS messages, you must set the &#x60;sms_permission_to_send&#x60; property to &#x60;explicit&#x60; and specify the date of consent using the &#x60;sms_consent_date&#x60; column header. If explicit permission was not provided, set &#x60;sms_permission_to_send&#x60; to &#x60;not_set&#x60; (the &#x60;sms_consent_date&#x60; is not required). If the &#x60;sms_consent_date&#x60; is not set, SMS messages cannot be sent to contacts and &#x60;sms_permission_to_send&#x60; defaults to &#x60;not_set&#x60;. Valid value formats for &#x60;sms_consent_date&#x60; include MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.   The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImportJSONActivityRequest">The JSON request payload that contains the contact data and contact lists for the import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCSVImportActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateCSVImportActivity201Response>> CreateImportJSONActivityWithHttpInfoAsync(CreateImportJSONActivityRequest createImportJSONActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Contacts to Lists
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the &#x60;source&#x60; object to specify the contacts you want to add to lists. Use the &#x60;list_ids&#x60; array to specify which lists you want to add your source contacts to.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListAddActivityRequest">The JSON payload used to create the &#39;add contacts to lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateListRemoveActivity201Response</returns>
        System.Threading.Tasks.Task<CreateListRemoveActivity201Response> CreateListAddActivityAsync(CreateListAddActivityRequest createListAddActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Contacts to Lists
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the &#x60;source&#x60; object to specify the contacts you want to add to lists. Use the &#x60;list_ids&#x60; array to specify which lists you want to add your source contacts to.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListAddActivityRequest">The JSON payload used to create the &#39;add contacts to lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateListRemoveActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateListRemoveActivity201Response>> CreateListAddActivityWithHttpInfoAsync(CreateListAddActivityRequest createListAddActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Contact Lists
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete up to 100 contact lists in an account. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListDeleteActivityRequest">An array of &#x60;list_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateListDeleteActivity201Response</returns>
        System.Threading.Tasks.Task<CreateListDeleteActivity201Response> CreateListDeleteActivityAsync(CreateListDeleteActivityRequest createListDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Contact Lists
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete up to 100 contact lists in an account. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListDeleteActivityRequest">An array of &#x60;list_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateListDeleteActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateListDeleteActivity201Response>> CreateListDeleteActivityWithHttpInfoAsync(CreateListDeleteActivityRequest createListDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Contacts from Lists
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the &#x60;source&#x60; object to remove specific contacts from your lists. Use the &#x60;list_ids&#x60; array to specify the target lists from which contacts are removed. Optionally, if the source is  &#x60;all_active_contacts&#x60; (billable) or &#x60;list_ids&#x60;, use the &#x60;exclude&#x60; object to exclude specific contacts from being removed from the destination lists.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRemoveActivityRequest">The JSON payload used to create the Remove Contacts from Lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateListRemoveActivity201Response</returns>
        System.Threading.Tasks.Task<CreateListRemoveActivity201Response> CreateListRemoveActivityAsync(CreateListRemoveActivityRequest createListRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Contacts from Lists
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the &#x60;source&#x60; object to remove specific contacts from your lists. Use the &#x60;list_ids&#x60; array to specify the target lists from which contacts are removed. Optionally, if the source is  &#x60;all_active_contacts&#x60; (billable) or &#x60;list_ids&#x60;, use the &#x60;exclude&#x60; object to exclude specific contacts from being removed from the destination lists.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRemoveActivityRequest">The JSON payload used to create the Remove Contacts from Lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateListRemoveActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateListRemoveActivity201Response>> CreateListRemoveActivityWithHttpInfoAsync(CreateListRemoveActivityRequest createListRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Add Tags to Contacts
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the &#x60;source&#x60; type to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are added. Source criteria are mutually exclusive. If the source is &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request. For more use case information, see \&quot;[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTagRemoveActivity201Response</returns>
        System.Threading.Tasks.Task<CreateTagRemoveActivity201Response> CreateTagAddContactActivityAsync(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Add Tags to Contacts
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the &#x60;source&#x60; type to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are added. Source criteria are mutually exclusive. If the source is &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request. For more use case information, see \&quot;[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTagRemoveActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTagRemoveActivity201Response>> CreateTagAddContactActivityWithHttpInfoAsync(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Tags
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the &#x60;tag_ids&#x60; array of string values in the request body to specify which tags to delete.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagDeleteActivityRequest">An array of string values (&#x60;tag_id&#x60;s) to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTagRemoveActivity201Response</returns>
        System.Threading.Tasks.Task<CreateTagRemoveActivity201Response> CreateTagDeleteActivityAsync(CreateTagDeleteActivityRequest createTagDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Tags
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the &#x60;tag_ids&#x60; array of string values in the request body to specify which tags to delete.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagDeleteActivityRequest">An array of string values (&#x60;tag_id&#x60;s) to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTagRemoveActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTagRemoveActivity201Response>> CreateTagDeleteActivityWithHttpInfoAsync(CreateTagDeleteActivityRequest createTagDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Tags from Contacts
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the &#x60;source&#x60; type used to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are removed. Source types are mutually exclusive. If the specified source is either &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; specified contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request.\&quot; For more use case information, see \&quot;[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTagRemoveActivity201Response</returns>
        System.Threading.Tasks.Task<CreateTagRemoveActivity201Response> CreateTagRemoveActivityAsync(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Tags from Contacts
        /// </summary>
        /// <remarks>
        /// Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the &#x60;source&#x60; type used to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are removed. Source types are mutually exclusive. If the specified source is either &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; specified contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request.\&quot; For more use case information, see \&quot;[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTagRemoveActivity201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateTagRemoveActivity201Response>> CreateTagRemoveActivityWithHttpInfoAsync(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Activity Status
        /// </summary>
        /// <remarks>
        /// This endpoint returns an activity status report.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The unique ID of the activity to GET</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetActivityById200Response</returns>
        System.Threading.Tasks.Task<GetActivityById200Response> GetActivityByIdAsync(string activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Activity Status
        /// </summary>
        /// <remarks>
        /// This endpoint returns an activity status report.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The unique ID of the activity to GET</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetActivityById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetActivityById200Response>> GetActivityByIdWithHttpInfoAsync(string activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET Activity Status Collection
        /// </summary>
        /// <remarks>
        /// This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="state">Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllActivities200Response</returns>
        System.Threading.Tasks.Task<GetAllActivities200Response> GetAllActivitiesAsync(int? limit = default(int?), string? state = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Activity Status Collection
        /// </summary>
        /// <remarks>
        /// This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="state">Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllActivities200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllActivities200Response>> GetAllActivitiesWithHttpInfoAsync(int? limit = default(int?), string? state = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieve Exported Contacts File
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the &#x60;activity_id&#x60; of a completed CSV export activity.  
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileExportId">The unique ID of the exported file provided in the results: section of the export contacts activity response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetCSVExportFileAsync(string fileExportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve Exported Contacts File
        /// </summary>
        /// <remarks>
        /// Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the &#x60;activity_id&#x60; of a completed CSV export activity.  
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileExportId">The unique ID of the exported file provided in the results: section of the export contacts activity response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetCSVExportFileWithHttpInfoAsync(string fileExportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Delete Custom Fields
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete up to 100 custom fields for an account. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCustomFieldDeleteRequest">An array of &#x60;custom_field_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostCustomFieldDelete201Response</returns>
        System.Threading.Tasks.Task<PostCustomFieldDelete201Response> PostCustomFieldDeleteAsync(PostCustomFieldDeleteRequest postCustomFieldDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Delete Custom Fields
        /// </summary>
        /// <remarks>
        /// Use this endpoint to delete up to 100 custom fields for an account. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCustomFieldDeleteRequest">An array of &#x60;custom_field_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostCustomFieldDelete201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostCustomFieldDelete201Response>> PostCustomFieldDeleteWithHttpInfoAsync(PostCustomFieldDeleteRequest postCustomFieldDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBulkActivitiesApi : IBulkActivitiesApiSync, IBulkActivitiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BulkActivitiesApi : IBulkActivitiesApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkActivitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BulkActivitiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkActivitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BulkActivitiesApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkActivitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BulkActivitiesApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkActivitiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BulkActivitiesApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Import Contacts using a CSV File This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact email address automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. Importing contacts with &#x60;sms_number&#x60;s requires using the &#x60;sms_permission_to_send&#x60; parameter  to specify permissions for all contacts being imported. Set to &#x60;explicit&#x60; to specify that all contacts either provided explicit permission. Set to &#x60;not_set&#x60; if permission was not provided. If &#x60;explicit&#x60;, you must also include the &#x60;sms_consent_date&#x60; as a column header to include the date the contact consented to receiving SMS messages. Contacts must have either an email address or an SMS number defined.   The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file you are importing  must include either &#x60;email&#x60; or &#x60;sms_number&#x60; as a column heading. Other properties you can include using column headings are: &#x60;first_name&#x60;.  &#x60;last_name&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, &#x60;country&#x60;, and &#x60;sms_consent_date&#x60;.   If adding an &#x60;sms_number&#x60;, you must also include the &#x60;sms_permission_to_send&#x60; parameter and set it to either &#x60;not_set&#x60; or &#x60;explicit&#x60;. If &#x60;explicit&#x60;, requires including &#x60;sms_consent_date&#x60; as a column header to specify the date the contact consented to receiving SMS messages.   You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.</param>
        /// <param name="listIds">Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.</param>
        /// <param name="smsPermissionToSend">If importing contact &#x60;sms_number&#x60;s, use this parameter to specify how SMS consent was provided. If all contacts in the file provided their consent, set to &#x60;explicit&#x60; and include each contact&#39;s &#x60;sms_consent_date&#x60;. If all contacts in the file have not yet provided consent, set to &#x60;not_set&#x60; (&#x60;sms_consent_date&#x60; is not required). You cannot message a contact that does not have a sms consent date set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCSVImportActivity201Response</returns>
        public CreateCSVImportActivity201Response CreateCSVImportActivity(System.IO.Stream file, string listIds, string? smsPermissionToSend = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateCSVImportActivity201Response> localVarResponse = CreateCSVImportActivityWithHttpInfo(file, listIds, smsPermissionToSend);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Contacts using a CSV File This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact email address automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. Importing contacts with &#x60;sms_number&#x60;s requires using the &#x60;sms_permission_to_send&#x60; parameter  to specify permissions for all contacts being imported. Set to &#x60;explicit&#x60; to specify that all contacts either provided explicit permission. Set to &#x60;not_set&#x60; if permission was not provided. If &#x60;explicit&#x60;, you must also include the &#x60;sms_consent_date&#x60; as a column header to include the date the contact consented to receiving SMS messages. Contacts must have either an email address or an SMS number defined.   The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file you are importing  must include either &#x60;email&#x60; or &#x60;sms_number&#x60; as a column heading. Other properties you can include using column headings are: &#x60;first_name&#x60;.  &#x60;last_name&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, &#x60;country&#x60;, and &#x60;sms_consent_date&#x60;.   If adding an &#x60;sms_number&#x60;, you must also include the &#x60;sms_permission_to_send&#x60; parameter and set it to either &#x60;not_set&#x60; or &#x60;explicit&#x60;. If &#x60;explicit&#x60;, requires including &#x60;sms_consent_date&#x60; as a column header to specify the date the contact consented to receiving SMS messages.   You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.</param>
        /// <param name="listIds">Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.</param>
        /// <param name="smsPermissionToSend">If importing contact &#x60;sms_number&#x60;s, use this parameter to specify how SMS consent was provided. If all contacts in the file provided their consent, set to &#x60;explicit&#x60; and include each contact&#39;s &#x60;sms_consent_date&#x60;. If all contacts in the file have not yet provided consent, set to &#x60;not_set&#x60; (&#x60;sms_consent_date&#x60; is not required). You cannot message a contact that does not have a sms consent date set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCSVImportActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateCSVImportActivity201Response> CreateCSVImportActivityWithHttpInfo(System.IO.Stream file, string listIds, string? smsPermissionToSend = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'file' when calling BulkActivitiesApi->CreateCSVImportActivity");
            }

            // verify the required parameter 'listIds' is set
            if (listIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'listIds' when calling BulkActivitiesApi->CreateCSVImportActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("list_ids", ConstantContactApi.Client.ClientUtils.ParameterToString(listIds)); // form parameter
            if (smsPermissionToSend != null)
            {
                localVarRequestOptions.FormParameters.Add("sms_permission_to_send", ConstantContactApi.Client.ClientUtils.ParameterToString(smsPermissionToSend)); // form parameter
            }

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateCSVImportActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCSVImportActivity201Response>("/activities/contacts_file_import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCSVImportActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Contacts using a CSV File This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact email address automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. Importing contacts with &#x60;sms_number&#x60;s requires using the &#x60;sms_permission_to_send&#x60; parameter  to specify permissions for all contacts being imported. Set to &#x60;explicit&#x60; to specify that all contacts either provided explicit permission. Set to &#x60;not_set&#x60; if permission was not provided. If &#x60;explicit&#x60;, you must also include the &#x60;sms_consent_date&#x60; as a column header to include the date the contact consented to receiving SMS messages. Contacts must have either an email address or an SMS number defined.   The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file you are importing  must include either &#x60;email&#x60; or &#x60;sms_number&#x60; as a column heading. Other properties you can include using column headings are: &#x60;first_name&#x60;.  &#x60;last_name&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, &#x60;country&#x60;, and &#x60;sms_consent_date&#x60;.   If adding an &#x60;sms_number&#x60;, you must also include the &#x60;sms_permission_to_send&#x60; parameter and set it to either &#x60;not_set&#x60; or &#x60;explicit&#x60;. If &#x60;explicit&#x60;, requires including &#x60;sms_consent_date&#x60; as a column header to specify the date the contact consented to receiving SMS messages.   You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.</param>
        /// <param name="listIds">Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.</param>
        /// <param name="smsPermissionToSend">If importing contact &#x60;sms_number&#x60;s, use this parameter to specify how SMS consent was provided. If all contacts in the file provided their consent, set to &#x60;explicit&#x60; and include each contact&#39;s &#x60;sms_consent_date&#x60;. If all contacts in the file have not yet provided consent, set to &#x60;not_set&#x60; (&#x60;sms_consent_date&#x60; is not required). You cannot message a contact that does not have a sms consent date set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCSVImportActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateCSVImportActivity201Response> CreateCSVImportActivityAsync(System.IO.Stream file, string listIds, string? smsPermissionToSend = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateCSVImportActivity201Response> localVarResponse = await CreateCSVImportActivityWithHttpInfoAsync(file, listIds, smsPermissionToSend, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Contacts using a CSV File This multipart method creates an asynchronous background job that adds or updates contacts by importing a CSV file containing contact information. Do not use a Content-Type header value with this method.  Importing a new contact email address automatically sets the contact&#39;s &#x60;permission_to_send&#x60; property as &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. Importing contacts with &#x60;sms_number&#x60;s requires using the &#x60;sms_permission_to_send&#x60; parameter  to specify permissions for all contacts being imported. Set to &#x60;explicit&#x60; to specify that all contacts either provided explicit permission. Set to &#x60;not_set&#x60; if permission was not provided. If &#x60;explicit&#x60;, you must also include the &#x60;sms_consent_date&#x60; as a column header to include the date the contact consented to receiving SMS messages. Contacts must have either an email address or an SMS number defined.   The CSV file has a maximum of 40,000 lines including the header row (39,999 contacts) and a maximum file size of 4 megabytes (MB).  Lines above the 40,000 line maximum are not processed. If the request body exceeds 4 MB, only the contacts contained in the first 4 MB are imported and the remaining data is dropped.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="file">The CSV file you are importing  must include either &#x60;email&#x60; or &#x60;sms_number&#x60; as a column heading. Other properties you can include using column headings are: &#x60;first_name&#x60;.  &#x60;last_name&#x60;, &#x60;phone&#x60;, &#x60;job_title&#x60;, &#x60;anniversary&#x60;, &#x60;birthday_day&#x60;, &#x60;birthday_month&#x60;, &#x60;company_name&#x60;, &#x60;street&#x60;, &#x60;street2&#x60;, &#x60;city&#x60;, &#x60;state&#x60;, &#x60;zip&#x60;, &#x60;country&#x60;, and &#x60;sms_consent_date&#x60;.   If adding an &#x60;sms_number&#x60;, you must also include the &#x60;sms_permission_to_send&#x60; parameter and set it to either &#x60;not_set&#x60; or &#x60;explicit&#x60;. If &#x60;explicit&#x60;, requires including &#x60;sms_consent_date&#x60; as a column header to specify the date the contact consented to receiving SMS messages.   You can also use custom fields as column headings. Enter the custom field name prefixed with &#x60;cf:&#x60; as the column heading. For example, use &#x60;cf:first_name&#x60; as the header name if you have a custom field named \\\&quot;first_name\\\&quot;. The custom field must already exist in the Constant Contact account you are using. Depending on the custom field data type, you can enter dates or strings as the value of the custom field. Each contact can contain up to 25 different custom fields.</param>
        /// <param name="listIds">Specify which contact lists you are adding all imported contacts to as an array of up to 50 contact &#x60;list_id&#x60; values.</param>
        /// <param name="smsPermissionToSend">If importing contact &#x60;sms_number&#x60;s, use this parameter to specify how SMS consent was provided. If all contacts in the file provided their consent, set to &#x60;explicit&#x60; and include each contact&#39;s &#x60;sms_consent_date&#x60;. If all contacts in the file have not yet provided consent, set to &#x60;not_set&#x60; (&#x60;sms_consent_date&#x60; is not required). You cannot message a contact that does not have a sms consent date set. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCSVImportActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateCSVImportActivity201Response>> CreateCSVImportActivityWithHttpInfoAsync(System.IO.Stream file, string listIds, string? smsPermissionToSend = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'file' is set
            if (file == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'file' when calling BulkActivitiesApi->CreateCSVImportActivity");
            }

            // verify the required parameter 'listIds' is set
            if (listIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'listIds' when calling BulkActivitiesApi->CreateCSVImportActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.FileParameters.Add("file", file);
            localVarRequestOptions.FormParameters.Add("list_ids", ConstantContactApi.Client.ClientUtils.ParameterToString(listIds)); // form parameter
            if (smsPermissionToSend != null)
            {
                localVarRequestOptions.FormParameters.Add("sms_permission_to_send", ConstantContactApi.Client.ClientUtils.ParameterToString(smsPermissionToSend)); // form parameter
            }

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateCSVImportActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCSVImportActivity201Response>("/activities/contacts_file_import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateCSVImportActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Contacts in Bulk Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeleteActivityRequest">The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateDeleteActivity201Response</returns>
        public CreateDeleteActivity201Response CreateDeleteActivity(CreateDeleteActivityRequest createDeleteActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateDeleteActivity201Response> localVarResponse = CreateDeleteActivityWithHttpInfo(createDeleteActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Contacts in Bulk Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeleteActivityRequest">The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateDeleteActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateDeleteActivity201Response> CreateDeleteActivityWithHttpInfo(CreateDeleteActivityRequest createDeleteActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createDeleteActivityRequest' is set
            if (createDeleteActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createDeleteActivityRequest' when calling BulkActivitiesApi->CreateDeleteActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDeleteActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateDeleteActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateDeleteActivity201Response>("/activities/contact_delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeleteActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Contacts in Bulk Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeleteActivityRequest">The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateDeleteActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateDeleteActivity201Response> CreateDeleteActivityAsync(CreateDeleteActivityRequest createDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateDeleteActivity201Response> localVarResponse = await CreateDeleteActivityWithHttpInfoAsync(createDeleteActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Contacts in Bulk Use this endpoint to bulk delete contacts in an account. Contacts to delete are specified by contact_id (up to 500), or by list_id (up to 50 lists); all contacts that are members of the list_ids are deleted. Deleted contacts won’t receive email from you, and they don’t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be added back to an account. [Learn how to revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDeleteActivityRequest">The request body contains an array of contact_ids &lt;em&gt;or&lt;/em&gt; list_ids. All contact_ids provided are deleted, or all members of each specified list_id are deleted.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateDeleteActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateDeleteActivity201Response>> CreateDeleteActivityWithHttpInfoAsync(CreateDeleteActivityRequest createDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createDeleteActivityRequest' is set
            if (createDeleteActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createDeleteActivityRequest' when calling BulkActivitiesApi->CreateDeleteActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createDeleteActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateDeleteActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateDeleteActivity201Response>("/activities/contact_delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDeleteActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Contacts to a File Use this method to create an activity that exports contacts and contact details to a CSV file.  You can choose to export all contacts in your account (default) or you can use parameters to filter on which contacts to export. After Constant Contact finishes processing the activity, use the &#x60;results&#x60; link in the response body to retrieve the CSV file.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createExportActivityRequest">A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateExportActivity201Response</returns>
        public CreateExportActivity201Response CreateExportActivity(CreateExportActivityRequest createExportActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateExportActivity201Response> localVarResponse = CreateExportActivityWithHttpInfo(createExportActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Contacts to a File Use this method to create an activity that exports contacts and contact details to a CSV file.  You can choose to export all contacts in your account (default) or you can use parameters to filter on which contacts to export. After Constant Contact finishes processing the activity, use the &#x60;results&#x60; link in the response body to retrieve the CSV file.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createExportActivityRequest">A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateExportActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateExportActivity201Response> CreateExportActivityWithHttpInfo(CreateExportActivityRequest createExportActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createExportActivityRequest' is set
            if (createExportActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createExportActivityRequest' when calling BulkActivitiesApi->CreateExportActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createExportActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateExportActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateExportActivity201Response>("/activities/contact_exports", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExportActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Export Contacts to a File Use this method to create an activity that exports contacts and contact details to a CSV file.  You can choose to export all contacts in your account (default) or you can use parameters to filter on which contacts to export. After Constant Contact finishes processing the activity, use the &#x60;results&#x60; link in the response body to retrieve the CSV file.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createExportActivityRequest">A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateExportActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateExportActivity201Response> CreateExportActivityAsync(CreateExportActivityRequest createExportActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateExportActivity201Response> localVarResponse = await CreateExportActivityWithHttpInfoAsync(createExportActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Export Contacts to a File Use this method to create an activity that exports contacts and contact details to a CSV file.  You can choose to export all contacts in your account (default) or you can use parameters to filter on which contacts to export. After Constant Contact finishes processing the activity, use the &#x60;results&#x60; link in the response body to retrieve the CSV file.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createExportActivityRequest">A JSON payload that specifies the contacts (rows in the CSV file) and contact properties (columns in the CSV file) you want to export.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateExportActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateExportActivity201Response>> CreateExportActivityWithHttpInfoAsync(CreateExportActivityRequest createExportActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createExportActivityRequest' is set
            if (createExportActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createExportActivityRequest' when calling BulkActivitiesApi->CreateExportActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createExportActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateExportActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateExportActivity201Response>("/activities/contact_exports", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateExportActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Contacts using a JSON Payload Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. A contact&#39;s data must include an &#x60;email&#x60; address and/or &#x60;sms_number&#x60;. The &#x60;sms_number&#x60; must be a US phone number to associate with the contact&#39;s SMS-enabled phone. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt; (the country code must be valid).  Importing a new contact using this method automatically sets the contact&#39;s email &#x60;permission_to_send&#x60; property to &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported.        To import custom fields, prefix the custom field name with &#x60;cf:&#x60; and add it as a contact property. For example, use the property name &#x60;cf:first_name&#x60; if you have a custom field named &#x60;first_name&#x60;. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  To include a contact&#39;s &#x60;sms_number&#x60;, if the contact provided explicit permission to receive SMS messages, you must set the &#x60;sms_permission_to_send&#x60; property to &#x60;explicit&#x60; and specify the date of consent using the &#x60;sms_consent_date&#x60; column header. If explicit permission was not provided, set &#x60;sms_permission_to_send&#x60; to &#x60;not_set&#x60; (the &#x60;sms_consent_date&#x60; is not required). If the &#x60;sms_consent_date&#x60; is not set, SMS messages cannot be sent to contacts and &#x60;sms_permission_to_send&#x60; defaults to &#x60;not_set&#x60;. Valid value formats for &#x60;sms_consent_date&#x60; include MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.   The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImportJSONActivityRequest">The JSON request payload that contains the contact data and contact lists for the import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateCSVImportActivity201Response</returns>
        public CreateCSVImportActivity201Response CreateImportJSONActivity(CreateImportJSONActivityRequest createImportJSONActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateCSVImportActivity201Response> localVarResponse = CreateImportJSONActivityWithHttpInfo(createImportJSONActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Contacts using a JSON Payload Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. A contact&#39;s data must include an &#x60;email&#x60; address and/or &#x60;sms_number&#x60;. The &#x60;sms_number&#x60; must be a US phone number to associate with the contact&#39;s SMS-enabled phone. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt; (the country code must be valid).  Importing a new contact using this method automatically sets the contact&#39;s email &#x60;permission_to_send&#x60; property to &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported.        To import custom fields, prefix the custom field name with &#x60;cf:&#x60; and add it as a contact property. For example, use the property name &#x60;cf:first_name&#x60; if you have a custom field named &#x60;first_name&#x60;. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  To include a contact&#39;s &#x60;sms_number&#x60;, if the contact provided explicit permission to receive SMS messages, you must set the &#x60;sms_permission_to_send&#x60; property to &#x60;explicit&#x60; and specify the date of consent using the &#x60;sms_consent_date&#x60; column header. If explicit permission was not provided, set &#x60;sms_permission_to_send&#x60; to &#x60;not_set&#x60; (the &#x60;sms_consent_date&#x60; is not required). If the &#x60;sms_consent_date&#x60; is not set, SMS messages cannot be sent to contacts and &#x60;sms_permission_to_send&#x60; defaults to &#x60;not_set&#x60;. Valid value formats for &#x60;sms_consent_date&#x60; include MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.   The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImportJSONActivityRequest">The JSON request payload that contains the contact data and contact lists for the import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateCSVImportActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateCSVImportActivity201Response> CreateImportJSONActivityWithHttpInfo(CreateImportJSONActivityRequest createImportJSONActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createImportJSONActivityRequest' is set
            if (createImportJSONActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createImportJSONActivityRequest' when calling BulkActivitiesApi->CreateImportJSONActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createImportJSONActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateImportJSONActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateCSVImportActivity201Response>("/activities/contacts_json_import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImportJSONActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Import Contacts using a JSON Payload Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. A contact&#39;s data must include an &#x60;email&#x60; address and/or &#x60;sms_number&#x60;. The &#x60;sms_number&#x60; must be a US phone number to associate with the contact&#39;s SMS-enabled phone. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt; (the country code must be valid).  Importing a new contact using this method automatically sets the contact&#39;s email &#x60;permission_to_send&#x60; property to &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported.        To import custom fields, prefix the custom field name with &#x60;cf:&#x60; and add it as a contact property. For example, use the property name &#x60;cf:first_name&#x60; if you have a custom field named &#x60;first_name&#x60;. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  To include a contact&#39;s &#x60;sms_number&#x60;, if the contact provided explicit permission to receive SMS messages, you must set the &#x60;sms_permission_to_send&#x60; property to &#x60;explicit&#x60; and specify the date of consent using the &#x60;sms_consent_date&#x60; column header. If explicit permission was not provided, set &#x60;sms_permission_to_send&#x60; to &#x60;not_set&#x60; (the &#x60;sms_consent_date&#x60; is not required). If the &#x60;sms_consent_date&#x60; is not set, SMS messages cannot be sent to contacts and &#x60;sms_permission_to_send&#x60; defaults to &#x60;not_set&#x60;. Valid value formats for &#x60;sms_consent_date&#x60; include MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.   The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImportJSONActivityRequest">The JSON request payload that contains the contact data and contact lists for the import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateCSVImportActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateCSVImportActivity201Response> CreateImportJSONActivityAsync(CreateImportJSONActivityRequest createImportJSONActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateCSVImportActivity201Response> localVarResponse = await CreateImportJSONActivityWithHttpInfoAsync(createImportJSONActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Import Contacts using a JSON Payload Use this method to create an asynchronous background job that adds new contacts or updates existing contacts by importing a JSON payload. This method requires a request body that contains the contact data you are importing and the contact lists to which you want to add the imported contacts. A contact&#39;s data must include an &#x60;email&#x60; address and/or &#x60;sms_number&#x60;. The &#x60;sms_number&#x60; must be a US phone number to associate with the contact&#39;s SMS-enabled phone. Valid formats are &lt;code&gt;1231231234&lt;/code&gt; or &lt;code&gt;123-123-1234&lt;/code&gt; (the country code must be valid).  Importing a new contact using this method automatically sets the contact&#39;s email &#x60;permission_to_send&#x60; property to &#x60;implicit&#x60; and the &#x60;opt_in_source&#x60; property as &#x60;Account&#x60;. Importing an existing contact only updates the contact properties you include in the request. For each contact, you can import up to three addresses and three phone numbers. International phone numbers are currently not supported.        To import custom fields, prefix the custom field name with &#x60;cf:&#x60; and add it as a contact property. For example, use the property name &#x60;cf:first_name&#x60; if you have a custom field named &#x60;first_name&#x60;. The custom field must already exist in the Constant Contact account you are using. Each contact can contain up to 25 custom fields.  To include a contact&#39;s &#x60;sms_number&#x60;, if the contact provided explicit permission to receive SMS messages, you must set the &#x60;sms_permission_to_send&#x60; property to &#x60;explicit&#x60; and specify the date of consent using the &#x60;sms_consent_date&#x60; column header. If explicit permission was not provided, set &#x60;sms_permission_to_send&#x60; to &#x60;not_set&#x60; (the &#x60;sms_consent_date&#x60; is not required). If the &#x60;sms_consent_date&#x60; is not set, SMS messages cannot be sent to contacts and &#x60;sms_permission_to_send&#x60; defaults to &#x60;not_set&#x60;. Valid value formats for &#x60;sms_consent_date&#x60; include MM/DD/YYYY, M/D/YYYY, YYYY/MM/DD, YYYY/M/D, YYYY-MM-DD, YYYY-M-D,M-D-YYYY, or M-DD-YYYY.   The request body payload has a maximum size of 4 megabytes (MB). If the request body exceeds 4 MB, this method only imports the first 4 MB and drops the remaining data. Use the activity URL to check the status of the import activity request.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createImportJSONActivityRequest">The JSON request payload that contains the contact data and contact lists for the import.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateCSVImportActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateCSVImportActivity201Response>> CreateImportJSONActivityWithHttpInfoAsync(CreateImportJSONActivityRequest createImportJSONActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createImportJSONActivityRequest' is set
            if (createImportJSONActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createImportJSONActivityRequest' when calling BulkActivitiesApi->CreateImportJSONActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createImportJSONActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateImportJSONActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateCSVImportActivity201Response>("/activities/contacts_json_import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateImportJSONActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Contacts to Lists Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the &#x60;source&#x60; object to specify the contacts you want to add to lists. Use the &#x60;list_ids&#x60; array to specify which lists you want to add your source contacts to.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListAddActivityRequest">The JSON payload used to create the &#39;add contacts to lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateListRemoveActivity201Response</returns>
        public CreateListRemoveActivity201Response CreateListAddActivity(CreateListAddActivityRequest createListAddActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateListRemoveActivity201Response> localVarResponse = CreateListAddActivityWithHttpInfo(createListAddActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contacts to Lists Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the &#x60;source&#x60; object to specify the contacts you want to add to lists. Use the &#x60;list_ids&#x60; array to specify which lists you want to add your source contacts to.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListAddActivityRequest">The JSON payload used to create the &#39;add contacts to lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateListRemoveActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateListRemoveActivity201Response> CreateListAddActivityWithHttpInfo(CreateListAddActivityRequest createListAddActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createListAddActivityRequest' is set
            if (createListAddActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createListAddActivityRequest' when calling BulkActivitiesApi->CreateListAddActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createListAddActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateListAddActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateListRemoveActivity201Response>("/activities/add_list_memberships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListAddActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Contacts to Lists Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the &#x60;source&#x60; object to specify the contacts you want to add to lists. Use the &#x60;list_ids&#x60; array to specify which lists you want to add your source contacts to.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListAddActivityRequest">The JSON payload used to create the &#39;add contacts to lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateListRemoveActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateListRemoveActivity201Response> CreateListAddActivityAsync(CreateListAddActivityRequest createListAddActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateListRemoveActivity201Response> localVarResponse = await CreateListAddActivityWithHttpInfoAsync(createListAddActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Contacts to Lists Use this method to create an activity that adds contacts to one or more lists. Each contact can be a member of up to 50 lists. Use the properties in the &#x60;source&#x60; object to specify the contacts you want to add to lists. Use the &#x60;list_ids&#x60; array to specify which lists you want to add your source contacts to.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListAddActivityRequest">The JSON payload used to create the &#39;add contacts to lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateListRemoveActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateListRemoveActivity201Response>> CreateListAddActivityWithHttpInfoAsync(CreateListAddActivityRequest createListAddActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createListAddActivityRequest' is set
            if (createListAddActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createListAddActivityRequest' when calling BulkActivitiesApi->CreateListAddActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createListAddActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateListAddActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateListRemoveActivity201Response>("/activities/add_list_memberships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListAddActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Contact Lists Use this endpoint to delete up to 100 contact lists in an account. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListDeleteActivityRequest">An array of &#x60;list_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateListDeleteActivity201Response</returns>
        public CreateListDeleteActivity201Response CreateListDeleteActivity(CreateListDeleteActivityRequest createListDeleteActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateListDeleteActivity201Response> localVarResponse = CreateListDeleteActivityWithHttpInfo(createListDeleteActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Contact Lists Use this endpoint to delete up to 100 contact lists in an account. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListDeleteActivityRequest">An array of &#x60;list_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateListDeleteActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateListDeleteActivity201Response> CreateListDeleteActivityWithHttpInfo(CreateListDeleteActivityRequest createListDeleteActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createListDeleteActivityRequest' is set
            if (createListDeleteActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createListDeleteActivityRequest' when calling BulkActivitiesApi->CreateListDeleteActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createListDeleteActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateListDeleteActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateListDeleteActivity201Response>("/activities/list_delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListDeleteActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Contact Lists Use this endpoint to delete up to 100 contact lists in an account. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListDeleteActivityRequest">An array of &#x60;list_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateListDeleteActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateListDeleteActivity201Response> CreateListDeleteActivityAsync(CreateListDeleteActivityRequest createListDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateListDeleteActivity201Response> localVarResponse = await CreateListDeleteActivityWithHttpInfoAsync(createListDeleteActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Contact Lists Use this endpoint to delete up to 100 contact lists in an account. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListDeleteActivityRequest">An array of &#x60;list_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateListDeleteActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateListDeleteActivity201Response>> CreateListDeleteActivityWithHttpInfoAsync(CreateListDeleteActivityRequest createListDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createListDeleteActivityRequest' is set
            if (createListDeleteActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createListDeleteActivityRequest' when calling BulkActivitiesApi->CreateListDeleteActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createListDeleteActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateListDeleteActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateListDeleteActivity201Response>("/activities/list_delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListDeleteActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Contacts from Lists Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the &#x60;source&#x60; object to remove specific contacts from your lists. Use the &#x60;list_ids&#x60; array to specify the target lists from which contacts are removed. Optionally, if the source is  &#x60;all_active_contacts&#x60; (billable) or &#x60;list_ids&#x60;, use the &#x60;exclude&#x60; object to exclude specific contacts from being removed from the destination lists.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRemoveActivityRequest">The JSON payload used to create the Remove Contacts from Lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateListRemoveActivity201Response</returns>
        public CreateListRemoveActivity201Response CreateListRemoveActivity(CreateListRemoveActivityRequest createListRemoveActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateListRemoveActivity201Response> localVarResponse = CreateListRemoveActivityWithHttpInfo(createListRemoveActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Contacts from Lists Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the &#x60;source&#x60; object to remove specific contacts from your lists. Use the &#x60;list_ids&#x60; array to specify the target lists from which contacts are removed. Optionally, if the source is  &#x60;all_active_contacts&#x60; (billable) or &#x60;list_ids&#x60;, use the &#x60;exclude&#x60; object to exclude specific contacts from being removed from the destination lists.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRemoveActivityRequest">The JSON payload used to create the Remove Contacts from Lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateListRemoveActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateListRemoveActivity201Response> CreateListRemoveActivityWithHttpInfo(CreateListRemoveActivityRequest createListRemoveActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createListRemoveActivityRequest' is set
            if (createListRemoveActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createListRemoveActivityRequest' when calling BulkActivitiesApi->CreateListRemoveActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createListRemoveActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateListRemoveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateListRemoveActivity201Response>("/activities/remove_list_memberships", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListRemoveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Contacts from Lists Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the &#x60;source&#x60; object to remove specific contacts from your lists. Use the &#x60;list_ids&#x60; array to specify the target lists from which contacts are removed. Optionally, if the source is  &#x60;all_active_contacts&#x60; (billable) or &#x60;list_ids&#x60;, use the &#x60;exclude&#x60; object to exclude specific contacts from being removed from the destination lists.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRemoveActivityRequest">The JSON payload used to create the Remove Contacts from Lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateListRemoveActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateListRemoveActivity201Response> CreateListRemoveActivityAsync(CreateListRemoveActivityRequest createListRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateListRemoveActivity201Response> localVarResponse = await CreateListRemoveActivityWithHttpInfoAsync(createListRemoveActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Contacts from Lists Use this method to create an activity that removes contacts from one or more contact lists. Use the properties in the &#x60;source&#x60; object to remove specific contacts from your lists. Use the &#x60;list_ids&#x60; array to specify the target lists from which contacts are removed. Optionally, if the source is  &#x60;all_active_contacts&#x60; (billable) or &#x60;list_ids&#x60;, use the &#x60;exclude&#x60; object to exclude specific contacts from being removed from the destination lists.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createListRemoveActivityRequest">The JSON payload used to create the Remove Contacts from Lists&#39; activity</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateListRemoveActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateListRemoveActivity201Response>> CreateListRemoveActivityWithHttpInfoAsync(CreateListRemoveActivityRequest createListRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createListRemoveActivityRequest' is set
            if (createListRemoveActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createListRemoveActivityRequest' when calling BulkActivitiesApi->CreateListRemoveActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createListRemoveActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateListRemoveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateListRemoveActivity201Response>("/activities/remove_list_memberships", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateListRemoveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Tags to Contacts Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the &#x60;source&#x60; type to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are added. Source criteria are mutually exclusive. If the source is &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request. For more use case information, see \&quot;[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTagRemoveActivity201Response</returns>
        public CreateTagRemoveActivity201Response CreateTagAddContactActivity(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response> localVarResponse = CreateTagAddContactActivityWithHttpInfo(createTagRemoveActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Tags to Contacts Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the &#x60;source&#x60; type to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are added. Source criteria are mutually exclusive. If the source is &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request. For more use case information, see \&quot;[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTagRemoveActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response> CreateTagAddContactActivityWithHttpInfo(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createTagRemoveActivityRequest' is set
            if (createTagRemoveActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createTagRemoveActivityRequest' when calling BulkActivitiesApi->CreateTagAddContactActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTagRemoveActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateTagAddContactActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTagRemoveActivity201Response>("/activities/contacts_taggings_add", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagAddContactActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Add Tags to Contacts Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the &#x60;source&#x60; type to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are added. Source criteria are mutually exclusive. If the source is &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request. For more use case information, see \&quot;[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTagRemoveActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateTagRemoveActivity201Response> CreateTagAddContactActivityAsync(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response> localVarResponse = await CreateTagAddContactActivityWithHttpInfoAsync(createTagRemoveActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Add Tags to Contacts Use this method to create an asynchronous activity that adds one or more tags to all contacts meeting your contact filtering criteria. Use the &#x60;source&#x60; type to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are added. Source criteria are mutually exclusive. If the source is &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request. For more use case information, see \&quot;[Add Tags to Contacts](/api_guide/add_tagging_activity.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that adds tags to contacts that meet your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTagRemoveActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response>> CreateTagAddContactActivityWithHttpInfoAsync(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTagRemoveActivityRequest' is set
            if (createTagRemoveActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createTagRemoveActivityRequest' when calling BulkActivitiesApi->CreateTagAddContactActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTagRemoveActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateTagAddContactActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTagRemoveActivity201Response>("/activities/contacts_taggings_add", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagAddContactActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tags Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the &#x60;tag_ids&#x60; array of string values in the request body to specify which tags to delete.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagDeleteActivityRequest">An array of string values (&#x60;tag_id&#x60;s) to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTagRemoveActivity201Response</returns>
        public CreateTagRemoveActivity201Response CreateTagDeleteActivity(CreateTagDeleteActivityRequest createTagDeleteActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response> localVarResponse = CreateTagDeleteActivityWithHttpInfo(createTagDeleteActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tags Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the &#x60;tag_ids&#x60; array of string values in the request body to specify which tags to delete.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagDeleteActivityRequest">An array of string values (&#x60;tag_id&#x60;s) to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTagRemoveActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response> CreateTagDeleteActivityWithHttpInfo(CreateTagDeleteActivityRequest createTagDeleteActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createTagDeleteActivityRequest' is set
            if (createTagDeleteActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createTagDeleteActivityRequest' when calling BulkActivitiesApi->CreateTagDeleteActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTagDeleteActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateTagDeleteActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTagRemoveActivity201Response>("/activities/contacts_tags_delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagDeleteActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Tags Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the &#x60;tag_ids&#x60; array of string values in the request body to specify which tags to delete.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagDeleteActivityRequest">An array of string values (&#x60;tag_id&#x60;s) to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTagRemoveActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateTagRemoveActivity201Response> CreateTagDeleteActivityAsync(CreateTagDeleteActivityRequest createTagDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response> localVarResponse = await CreateTagDeleteActivityWithHttpInfoAsync(createTagDeleteActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Tags Use this method to create an asynchronous activity that deletes up to 500 tags. Deleted tags are automatically removed from tagged contacts. Use the &#x60;tag_ids&#x60; array of string values in the request body to specify which tags to delete.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagDeleteActivityRequest">An array of string values (&#x60;tag_id&#x60;s) to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTagRemoveActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response>> CreateTagDeleteActivityWithHttpInfoAsync(CreateTagDeleteActivityRequest createTagDeleteActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTagDeleteActivityRequest' is set
            if (createTagDeleteActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createTagDeleteActivityRequest' when calling BulkActivitiesApi->CreateTagDeleteActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTagDeleteActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateTagDeleteActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTagRemoveActivity201Response>("/activities/contacts_tags_delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagDeleteActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Tags from Contacts Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the &#x60;source&#x60; type used to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are removed. Source types are mutually exclusive. If the specified source is either &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; specified contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request.\&quot; For more use case information, see \&quot;[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateTagRemoveActivity201Response</returns>
        public CreateTagRemoveActivity201Response CreateTagRemoveActivity(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response> localVarResponse = CreateTagRemoveActivityWithHttpInfo(createTagRemoveActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Tags from Contacts Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the &#x60;source&#x60; type used to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are removed. Source types are mutually exclusive. If the specified source is either &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; specified contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request.\&quot; For more use case information, see \&quot;[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateTagRemoveActivity201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response> CreateTagRemoveActivityWithHttpInfo(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createTagRemoveActivityRequest' is set
            if (createTagRemoveActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createTagRemoveActivityRequest' when calling BulkActivitiesApi->CreateTagRemoveActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTagRemoveActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateTagRemoveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateTagRemoveActivity201Response>("/activities/contacts_taggings_remove", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagRemoveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Tags from Contacts Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the &#x60;source&#x60; type used to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are removed. Source types are mutually exclusive. If the specified source is either &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; specified contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request.\&quot; For more use case information, see \&quot;[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateTagRemoveActivity201Response</returns>
        public async System.Threading.Tasks.Task<CreateTagRemoveActivity201Response> CreateTagRemoveActivityAsync(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response> localVarResponse = await CreateTagRemoveActivityWithHttpInfoAsync(createTagRemoveActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Tags from Contacts Use this method to create an asynchronous activity that removes one or more tags from all contacts meeting your contact filtering criteria. Filtering criteria must include the &#x60;source&#x60; type used to identify contacts from which the specified tags (&#x60;tag_id&#x60;) are removed. Source types are mutually exclusive. If the specified source is either &#x60;all_active_contacts&#x60; or &#x60;list_ids&#x60;, you can optionally choose to &#x60;exclude&#x60; specified contacts by &#x60;contact_id&#x60;. Use the activity link in the results to check the status of your request.\&quot; For more use case information, see \&quot;[Remove Tags from Contacts](/api_guide/remove_tagging_activity.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTagRemoveActivityRequest">The JSON payload used to create an asynchronous activity that removes tags from contacts meeting your specified contact filtering criteria.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateTagRemoveActivity201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateTagRemoveActivity201Response>> CreateTagRemoveActivityWithHttpInfoAsync(CreateTagRemoveActivityRequest createTagRemoveActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createTagRemoveActivityRequest' is set
            if (createTagRemoveActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createTagRemoveActivityRequest' when calling BulkActivitiesApi->CreateTagRemoveActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createTagRemoveActivityRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.CreateTagRemoveActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateTagRemoveActivity201Response>("/activities/contacts_taggings_remove", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateTagRemoveActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Activity Status This endpoint returns an activity status report.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The unique ID of the activity to GET</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetActivityById200Response</returns>
        public GetActivityById200Response GetActivityById(string activityId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetActivityById200Response> localVarResponse = GetActivityByIdWithHttpInfo(activityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Activity Status This endpoint returns an activity status report.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The unique ID of the activity to GET</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetActivityById200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetActivityById200Response> GetActivityByIdWithHttpInfo(string activityId, int operationIndex = 0)
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling BulkActivitiesApi->GetActivityById");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            localVarRequestOptions.Operation = "BulkActivitiesApi.GetActivityById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetActivityById200Response>("/activities/{activity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Activity Status This endpoint returns an activity status report.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The unique ID of the activity to GET</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetActivityById200Response</returns>
        public async System.Threading.Tasks.Task<GetActivityById200Response> GetActivityByIdAsync(string activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetActivityById200Response> localVarResponse = await GetActivityByIdWithHttpInfoAsync(activityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Activity Status This endpoint returns an activity status report.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityId">The unique ID of the activity to GET</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetActivityById200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetActivityById200Response>> GetActivityByIdWithHttpInfoAsync(string activityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'activityId' is set
            if (activityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'activityId' when calling BulkActivitiesApi->GetActivityById");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(activityId)); // path parameter

            localVarRequestOptions.Operation = "BulkActivitiesApi.GetActivityById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetActivityById200Response>("/activities/{activity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetActivityById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Activity Status Collection This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="state">Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllActivities200Response</returns>
        public GetAllActivities200Response GetAllActivities(int? limit = default(int?), string? state = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAllActivities200Response> localVarResponse = GetAllActivitiesWithHttpInfo(limit, state);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Activity Status Collection This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="state">Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllActivities200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetAllActivities200Response> GetAllActivitiesWithHttpInfo(int? limit = default(int?), string? state = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }

            localVarRequestOptions.Operation = "BulkActivitiesApi.GetAllActivities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllActivities200Response>("/activities", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllActivities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Activity Status Collection This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="state">Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllActivities200Response</returns>
        public async System.Threading.Tasks.Task<GetAllActivities200Response> GetAllActivitiesAsync(int? limit = default(int?), string? state = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAllActivities200Response> localVarResponse = await GetAllActivitiesWithHttpInfoAsync(limit, state, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Activity Status Collection This endpoint returns a collection of activities. Use the state query parameter to include only activities with a specific status (processing, completed, cancelled, failed, or time_out). Use the limit query parameter to define the number of activities returned per page. Learn [more](/api_guide/activity_status.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of results displayed per page of output, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="state">Use this parameter to filter the response to include only activities in one of the following states: cancelled, completed, failed, processing, or timed_out. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllActivities200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAllActivities200Response>> GetAllActivitiesWithHttpInfoAsync(int? limit = default(int?), string? state = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (state != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "state", state));
            }

            localVarRequestOptions.Operation = "BulkActivitiesApi.GetAllActivities";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllActivities200Response>("/activities", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllActivities", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Exported Contacts File Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the &#x60;activity_id&#x60; of a completed CSV export activity.  
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileExportId">The unique ID of the exported file provided in the results: section of the export contacts activity response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string GetCSVExportFile(string fileExportId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<string> localVarResponse = GetCSVExportFileWithHttpInfo(fileExportId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Exported Contacts File Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the &#x60;activity_id&#x60; of a completed CSV export activity.  
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileExportId">The unique ID of the exported file provided in the results: section of the export contacts activity response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public ConstantContactApi.Client.ApiResponse<string> GetCSVExportFileWithHttpInfo(string fileExportId, int operationIndex = 0)
        {
            // verify the required parameter 'fileExportId' is set
            if (fileExportId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'fileExportId' when calling BulkActivitiesApi->GetCSVExportFile");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_export_id", ConstantContactApi.Client.ClientUtils.ParameterToString(fileExportId)); // path parameter

            localVarRequestOptions.Operation = "BulkActivitiesApi.GetCSVExportFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/contact_exports/{file_export_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCSVExportFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve Exported Contacts File Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the &#x60;activity_id&#x60; of a completed CSV export activity.  
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileExportId">The unique ID of the exported file provided in the results: section of the export contacts activity response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetCSVExportFileAsync(string fileExportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<string> localVarResponse = await GetCSVExportFileWithHttpInfoAsync(fileExportId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve Exported Contacts File Use this endpoint to retrieve (GET) a CSV file containing exported contacts by providing the &#x60;activity_id&#x60; of a completed CSV export activity.  
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileExportId">The unique ID of the exported file provided in the results: section of the export contacts activity response.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<string>> GetCSVExportFileWithHttpInfoAsync(string fileExportId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'fileExportId' is set
            if (fileExportId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'fileExportId' when calling BulkActivitiesApi->GetCSVExportFile");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/csv"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("file_export_id", ConstantContactApi.Client.ClientUtils.ParameterToString(fileExportId)); // path parameter

            localVarRequestOptions.Operation = "BulkActivitiesApi.GetCSVExportFile";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/contact_exports/{file_export_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCSVExportFile", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Custom Fields Use this endpoint to delete up to 100 custom fields for an account. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCustomFieldDeleteRequest">An array of &#x60;custom_field_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>PostCustomFieldDelete201Response</returns>
        public PostCustomFieldDelete201Response PostCustomFieldDelete(PostCustomFieldDeleteRequest postCustomFieldDeleteRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<PostCustomFieldDelete201Response> localVarResponse = PostCustomFieldDeleteWithHttpInfo(postCustomFieldDeleteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Custom Fields Use this endpoint to delete up to 100 custom fields for an account. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCustomFieldDeleteRequest">An array of &#x60;custom_field_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of PostCustomFieldDelete201Response</returns>
        public ConstantContactApi.Client.ApiResponse<PostCustomFieldDelete201Response> PostCustomFieldDeleteWithHttpInfo(PostCustomFieldDeleteRequest postCustomFieldDeleteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postCustomFieldDeleteRequest' is set
            if (postCustomFieldDeleteRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'postCustomFieldDeleteRequest' when calling BulkActivitiesApi->PostCustomFieldDelete");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postCustomFieldDeleteRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.PostCustomFieldDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PostCustomFieldDelete201Response>("/activities/custom_fields_delete", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCustomFieldDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete Custom Fields Use this endpoint to delete up to 100 custom fields for an account. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCustomFieldDeleteRequest">An array of &#x60;custom_field_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PostCustomFieldDelete201Response</returns>
        public async System.Threading.Tasks.Task<PostCustomFieldDelete201Response> PostCustomFieldDeleteAsync(PostCustomFieldDeleteRequest postCustomFieldDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<PostCustomFieldDelete201Response> localVarResponse = await PostCustomFieldDeleteWithHttpInfoAsync(postCustomFieldDeleteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Delete Custom Fields Use this endpoint to delete up to 100 custom fields for an account. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postCustomFieldDeleteRequest">An array of &#x60;custom_field_id&#x60;&#39;s to delete.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PostCustomFieldDelete201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<PostCustomFieldDelete201Response>> PostCustomFieldDeleteWithHttpInfoAsync(PostCustomFieldDeleteRequest postCustomFieldDeleteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postCustomFieldDeleteRequest' is set
            if (postCustomFieldDeleteRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'postCustomFieldDeleteRequest' when calling BulkActivitiesApi->PostCustomFieldDelete");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postCustomFieldDeleteRequest;

            localVarRequestOptions.Operation = "BulkActivitiesApi.PostCustomFieldDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<PostCustomFieldDelete201Response>("/activities/custom_fields_delete", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostCustomFieldDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
