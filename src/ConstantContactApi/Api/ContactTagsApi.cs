/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactTagsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// DELETE a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag in UUID format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTag202Response</returns>
        DeleteTag202Response DeleteTag(Guid tagId, int operationIndex = 0);

        /// <summary>
        /// DELETE a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag in UUID format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTag202Response</returns>
        ApiResponse<DeleteTag202Response> DeleteTagWithHttpInfo(Guid tagId, int operationIndex = 0);
        /// <summary>
        /// GET Details for All Tags
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get details for all tags in your account. Use the &lt;code&gt;include_count&lt;/code&gt; query parameter to include the total number of contacts assigned each tag. Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of tag results returned per page. To get the next page of results, copy the &lt;code&gt;cursor&#x3D;{the cursor ID}&lt;/code&gt; from the resulting href link and add it (&lt;code&gt;&amp;&lt;/code&gt;) to the URL. For example:  &lt;p&gt;&lt;code&gt;/v3/contact_tags?limit&#x3D;1&amp;cursor&#x3D;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ&#x3D;&lt;/code&gt;&lt;/p&gt; To learn more, see [Get Tags](/api_guide/tags_get.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (optional, default to 50)</param>
        /// <param name="includeCount">Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllTags200Response</returns>
        GetAllTags200Response GetAllTags(int? limit = default(int?), bool? includeCount = default(bool?), int operationIndex = 0);

        /// <summary>
        /// GET Details for All Tags
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get details for all tags in your account. Use the &lt;code&gt;include_count&lt;/code&gt; query parameter to include the total number of contacts assigned each tag. Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of tag results returned per page. To get the next page of results, copy the &lt;code&gt;cursor&#x3D;{the cursor ID}&lt;/code&gt; from the resulting href link and add it (&lt;code&gt;&amp;&lt;/code&gt;) to the URL. For example:  &lt;p&gt;&lt;code&gt;/v3/contact_tags?limit&#x3D;1&amp;cursor&#x3D;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ&#x3D;&lt;/code&gt;&lt;/p&gt; To learn more, see [Get Tags](/api_guide/tags_get.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (optional, default to 50)</param>
        /// <param name="includeCount">Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllTags200Response</returns>
        ApiResponse<GetAllTags200Response> GetAllTagsWithHttpInfo(int? limit = default(int?), bool? includeCount = default(bool?), int operationIndex = 0);
        /// <summary>
        /// GET Tag Details
        /// </summary>
        /// <remarks>
        /// Use this method to get tag details for a specified &#x60;tag_id&#x60;. Use the &#x60;include_count&#x60; query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag&#39;s Details](/api_guide/tags_get_single.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag (UUID format).</param>
        /// <param name="includeCount">Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTag200Response</returns>
        GetTag200Response GetTag(Guid tagId, bool? includeCount = default(bool?), int operationIndex = 0);

        /// <summary>
        /// GET Tag Details
        /// </summary>
        /// <remarks>
        /// Use this method to get tag details for a specified &#x60;tag_id&#x60;. Use the &#x60;include_count&#x60; query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag&#39;s Details](/api_guide/tags_get_single.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag (UUID format).</param>
        /// <param name="includeCount">Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTag200Response</returns>
        ApiResponse<GetTag200Response> GetTagWithHttpInfo(Guid tagId, bool? includeCount = default(bool?), int operationIndex = 0);
        /// <summary>
        /// POST (Create) a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to create a new tag. The tag &#x60;name&#x60; is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (&#x60;tag_source&#x60;) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postTagRequest">The JSON payload to use to create a new tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTag200Response</returns>
        GetTag200Response PostTag(PostTagRequest postTagRequest, int operationIndex = 0);

        /// <summary>
        /// POST (Create) a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to create a new tag. The tag &#x60;name&#x60; is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (&#x60;tag_source&#x60;) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postTagRequest">The JSON payload to use to create a new tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTag200Response</returns>
        ApiResponse<GetTag200Response> PostTagWithHttpInfo(PostTagRequest postTagRequest, int operationIndex = 0);
        /// <summary>
        /// PUT (Update) a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to rename an existing tag to a new unique tag name (&#x60;name&#x60;). The maximum length is 255 characters. The &#x60;tag_source&#x60; value cannot be updated using this method. You can set the &#x60;tag_source&#x60; value using the &#x60;POST contact_tags method&#x60;. [Learn more](/api_guide/tags_update.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The system generated ID used to uniquely identify the tag that you want to rename (UUID format).</param>
        /// <param name="putTagRequest">The JSON payload used to update the tag name (&#x60;name&#x60;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTag200Response</returns>
        GetTag200Response PutTag(Guid tagId, PutTagRequest putTagRequest, int operationIndex = 0);

        /// <summary>
        /// PUT (Update) a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to rename an existing tag to a new unique tag name (&#x60;name&#x60;). The maximum length is 255 characters. The &#x60;tag_source&#x60; value cannot be updated using this method. You can set the &#x60;tag_source&#x60; value using the &#x60;POST contact_tags method&#x60;. [Learn more](/api_guide/tags_update.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The system generated ID used to uniquely identify the tag that you want to rename (UUID format).</param>
        /// <param name="putTagRequest">The JSON payload used to update the tag name (&#x60;name&#x60;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTag200Response</returns>
        ApiResponse<GetTag200Response> PutTagWithHttpInfo(Guid tagId, PutTagRequest putTagRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactTagsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// DELETE a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag in UUID format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTag202Response</returns>
        System.Threading.Tasks.Task<DeleteTag202Response> DeleteTagAsync(Guid tagId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DELETE a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag in UUID format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTag202Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeleteTag202Response>> DeleteTagWithHttpInfoAsync(Guid tagId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET Details for All Tags
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get details for all tags in your account. Use the &lt;code&gt;include_count&lt;/code&gt; query parameter to include the total number of contacts assigned each tag. Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of tag results returned per page. To get the next page of results, copy the &lt;code&gt;cursor&#x3D;{the cursor ID}&lt;/code&gt; from the resulting href link and add it (&lt;code&gt;&amp;&lt;/code&gt;) to the URL. For example:  &lt;p&gt;&lt;code&gt;/v3/contact_tags?limit&#x3D;1&amp;cursor&#x3D;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ&#x3D;&lt;/code&gt;&lt;/p&gt; To learn more, see [Get Tags](/api_guide/tags_get.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (optional, default to 50)</param>
        /// <param name="includeCount">Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllTags200Response</returns>
        System.Threading.Tasks.Task<GetAllTags200Response> GetAllTagsAsync(int? limit = default(int?), bool? includeCount = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Details for All Tags
        /// </summary>
        /// <remarks>
        /// Use this endpoint to get details for all tags in your account. Use the &lt;code&gt;include_count&lt;/code&gt; query parameter to include the total number of contacts assigned each tag. Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of tag results returned per page. To get the next page of results, copy the &lt;code&gt;cursor&#x3D;{the cursor ID}&lt;/code&gt; from the resulting href link and add it (&lt;code&gt;&amp;&lt;/code&gt;) to the URL. For example:  &lt;p&gt;&lt;code&gt;/v3/contact_tags?limit&#x3D;1&amp;cursor&#x3D;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ&#x3D;&lt;/code&gt;&lt;/p&gt; To learn more, see [Get Tags](/api_guide/tags_get.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (optional, default to 50)</param>
        /// <param name="includeCount">Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllTags200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllTags200Response>> GetAllTagsWithHttpInfoAsync(int? limit = default(int?), bool? includeCount = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET Tag Details
        /// </summary>
        /// <remarks>
        /// Use this method to get tag details for a specified &#x60;tag_id&#x60;. Use the &#x60;include_count&#x60; query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag&#39;s Details](/api_guide/tags_get_single.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag (UUID format).</param>
        /// <param name="includeCount">Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTag200Response</returns>
        System.Threading.Tasks.Task<GetTag200Response> GetTagAsync(Guid tagId, bool? includeCount = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Tag Details
        /// </summary>
        /// <remarks>
        /// Use this method to get tag details for a specified &#x60;tag_id&#x60;. Use the &#x60;include_count&#x60; query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag&#39;s Details](/api_guide/tags_get_single.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag (UUID format).</param>
        /// <param name="includeCount">Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTag200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTag200Response>> GetTagWithHttpInfoAsync(Guid tagId, bool? includeCount = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// POST (Create) a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to create a new tag. The tag &#x60;name&#x60; is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (&#x60;tag_source&#x60;) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postTagRequest">The JSON payload to use to create a new tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTag200Response</returns>
        System.Threading.Tasks.Task<GetTag200Response> PostTagAsync(PostTagRequest postTagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST (Create) a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to create a new tag. The tag &#x60;name&#x60; is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (&#x60;tag_source&#x60;) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postTagRequest">The JSON payload to use to create a new tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTag200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTag200Response>> PostTagWithHttpInfoAsync(PostTagRequest postTagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PUT (Update) a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to rename an existing tag to a new unique tag name (&#x60;name&#x60;). The maximum length is 255 characters. The &#x60;tag_source&#x60; value cannot be updated using this method. You can set the &#x60;tag_source&#x60; value using the &#x60;POST contact_tags method&#x60;. [Learn more](/api_guide/tags_update.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The system generated ID used to uniquely identify the tag that you want to rename (UUID format).</param>
        /// <param name="putTagRequest">The JSON payload used to update the tag name (&#x60;name&#x60;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTag200Response</returns>
        System.Threading.Tasks.Task<GetTag200Response> PutTagAsync(Guid tagId, PutTagRequest putTagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PUT (Update) a Tag
        /// </summary>
        /// <remarks>
        /// Use this method to rename an existing tag to a new unique tag name (&#x60;name&#x60;). The maximum length is 255 characters. The &#x60;tag_source&#x60; value cannot be updated using this method. You can set the &#x60;tag_source&#x60; value using the &#x60;POST contact_tags method&#x60;. [Learn more](/api_guide/tags_update.html)
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The system generated ID used to uniquely identify the tag that you want to rename (UUID format).</param>
        /// <param name="putTagRequest">The JSON payload used to update the tag name (&#x60;name&#x60;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTag200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetTag200Response>> PutTagWithHttpInfoAsync(Guid tagId, PutTagRequest putTagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactTagsApi : IContactTagsApiSync, IContactTagsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactTagsApi : IContactTagsApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactTagsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactTagsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactTagsApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactTagsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactTagsApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactTagsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactTagsApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// DELETE a Tag Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag in UUID format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>DeleteTag202Response</returns>
        public DeleteTag202Response DeleteTag(Guid tagId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<DeleteTag202Response> localVarResponse = DeleteTagWithHttpInfo(tagId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DELETE a Tag Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag in UUID format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of DeleteTag202Response</returns>
        public ConstantContactApi.Client.ApiResponse<DeleteTag202Response> DeleteTagWithHttpInfo(Guid tagId, int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_id", ConstantContactApi.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            localVarRequestOptions.Operation = "ContactTagsApi.DeleteTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<DeleteTag202Response>("/contact_tags/{tag_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE a Tag Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag in UUID format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DeleteTag202Response</returns>
        public async System.Threading.Tasks.Task<DeleteTag202Response> DeleteTagAsync(Guid tagId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<DeleteTag202Response> localVarResponse = await DeleteTagWithHttpInfoAsync(tagId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// DELETE a Tag Use this method to create an activity used to un-assign a tag from all assigned contacts and delete the tag. This is an asynchronous activity. To view activity details for the delete request, use the href link returned in the response. [Learn more](/api_guide/tags_delete.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag in UUID format.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DeleteTag202Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<DeleteTag202Response>> DeleteTagWithHttpInfoAsync(Guid tagId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_id", ConstantContactApi.Client.ClientUtils.ParameterToString(tagId)); // path parameter

            localVarRequestOptions.Operation = "ContactTagsApi.DeleteTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteTag202Response>("/contact_tags/{tag_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Details for All Tags Use this endpoint to get details for all tags in your account. Use the &lt;code&gt;include_count&lt;/code&gt; query parameter to include the total number of contacts assigned each tag. Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of tag results returned per page. To get the next page of results, copy the &lt;code&gt;cursor&#x3D;{the cursor ID}&lt;/code&gt; from the resulting href link and add it (&lt;code&gt;&amp;&lt;/code&gt;) to the URL. For example:  &lt;p&gt;&lt;code&gt;/v3/contact_tags?limit&#x3D;1&amp;cursor&#x3D;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ&#x3D;&lt;/code&gt;&lt;/p&gt; To learn more, see [Get Tags](/api_guide/tags_get.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (optional, default to 50)</param>
        /// <param name="includeCount">Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllTags200Response</returns>
        public GetAllTags200Response GetAllTags(int? limit = default(int?), bool? includeCount = default(bool?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAllTags200Response> localVarResponse = GetAllTagsWithHttpInfo(limit, includeCount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Details for All Tags Use this endpoint to get details for all tags in your account. Use the &lt;code&gt;include_count&lt;/code&gt; query parameter to include the total number of contacts assigned each tag. Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of tag results returned per page. To get the next page of results, copy the &lt;code&gt;cursor&#x3D;{the cursor ID}&lt;/code&gt; from the resulting href link and add it (&lt;code&gt;&amp;&lt;/code&gt;) to the URL. For example:  &lt;p&gt;&lt;code&gt;/v3/contact_tags?limit&#x3D;1&amp;cursor&#x3D;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ&#x3D;&lt;/code&gt;&lt;/p&gt; To learn more, see [Get Tags](/api_guide/tags_get.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (optional, default to 50)</param>
        /// <param name="includeCount">Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllTags200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetAllTags200Response> GetAllTagsWithHttpInfo(int? limit = default(int?), bool? includeCount = default(bool?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (includeCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include_count", includeCount));
            }

            localVarRequestOptions.Operation = "ContactTagsApi.GetAllTags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllTags200Response>("/contact_tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Details for All Tags Use this endpoint to get details for all tags in your account. Use the &lt;code&gt;include_count&lt;/code&gt; query parameter to include the total number of contacts assigned each tag. Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of tag results returned per page. To get the next page of results, copy the &lt;code&gt;cursor&#x3D;{the cursor ID}&lt;/code&gt; from the resulting href link and add it (&lt;code&gt;&amp;&lt;/code&gt;) to the URL. For example:  &lt;p&gt;&lt;code&gt;/v3/contact_tags?limit&#x3D;1&amp;cursor&#x3D;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ&#x3D;&lt;/code&gt;&lt;/p&gt; To learn more, see [Get Tags](/api_guide/tags_get.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (optional, default to 50)</param>
        /// <param name="includeCount">Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllTags200Response</returns>
        public async System.Threading.Tasks.Task<GetAllTags200Response> GetAllTagsAsync(int? limit = default(int?), bool? includeCount = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAllTags200Response> localVarResponse = await GetAllTagsWithHttpInfoAsync(limit, includeCount, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Details for All Tags Use this endpoint to get details for all tags in your account. Use the &lt;code&gt;include_count&lt;/code&gt; query parameter to include the total number of contacts assigned each tag. Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of tag results returned per page. To get the next page of results, copy the &lt;code&gt;cursor&#x3D;{the cursor ID}&lt;/code&gt; from the resulting href link and add it (&lt;code&gt;&amp;&lt;/code&gt;) to the URL. For example:  &lt;p&gt;&lt;code&gt;/v3/contact_tags?limit&#x3D;1&amp;cursor&#x3D;&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;bGltaXQ9MSZuZXh0PTJjZDgwMjdhLTc4YzAtMTFlOS1iZmQwLWZhMTYzZTZiMDFjMQ&#x3D;&lt;/code&gt;&lt;/p&gt; To learn more, see [Get Tags](/api_guide/tags_get.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use to specify the number of tag results (up to &#x60;500&#x60;) to display per page of output. The default is &#x60;50&#x60;. (optional, default to 50)</param>
        /// <param name="includeCount">Returns the total number of contacts (&#x60;contacts_count&#x60;) to which a tag applies. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllTags200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAllTags200Response>> GetAllTagsWithHttpInfoAsync(int? limit = default(int?), bool? includeCount = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (includeCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include_count", includeCount));
            }

            localVarRequestOptions.Operation = "ContactTagsApi.GetAllTags";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllTags200Response>("/contact_tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllTags", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Tag Details Use this method to get tag details for a specified &#x60;tag_id&#x60;. Use the &#x60;include_count&#x60; query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag&#39;s Details](/api_guide/tags_get_single.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag (UUID format).</param>
        /// <param name="includeCount">Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTag200Response</returns>
        public GetTag200Response GetTag(Guid tagId, bool? includeCount = default(bool?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetTag200Response> localVarResponse = GetTagWithHttpInfo(tagId, includeCount);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Tag Details Use this method to get tag details for a specified &#x60;tag_id&#x60;. Use the &#x60;include_count&#x60; query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag&#39;s Details](/api_guide/tags_get_single.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag (UUID format).</param>
        /// <param name="includeCount">Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTag200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetTag200Response> GetTagWithHttpInfo(Guid tagId, bool? includeCount = default(bool?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_id", ConstantContactApi.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            if (includeCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include_count", includeCount));
            }

            localVarRequestOptions.Operation = "ContactTagsApi.GetTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetTag200Response>("/contact_tags/{tag_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Tag Details Use this method to get tag details for a specified &#x60;tag_id&#x60;. Use the &#x60;include_count&#x60; query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag&#39;s Details](/api_guide/tags_get_single.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag (UUID format).</param>
        /// <param name="includeCount">Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTag200Response</returns>
        public async System.Threading.Tasks.Task<GetTag200Response> GetTagAsync(Guid tagId, bool? includeCount = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetTag200Response> localVarResponse = await GetTagWithHttpInfoAsync(tagId, includeCount, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Tag Details Use this method to get tag details for a specified &#x60;tag_id&#x60;. Use the &#x60;include_count&#x60; query parameter to include or exclude the total number of contacts to which this tag is assigned. To learn more, see  [Get a Tag&#39;s Details](/api_guide/tags_get_single.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The ID that uniquely identifies a tag (UUID format).</param>
        /// <param name="includeCount">Use to include (&#x60;true&#x60;) or exclude (&#x60;false&#x60;) the total number of tagged contacts (&#x60;contacts_count&#x60;) from the results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTag200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetTag200Response>> GetTagWithHttpInfoAsync(Guid tagId, bool? includeCount = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_id", ConstantContactApi.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            if (includeCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include_count", includeCount));
            }

            localVarRequestOptions.Operation = "ContactTagsApi.GetTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetTag200Response>("/contact_tags/{tag_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST (Create) a Tag Use this method to create a new tag. The tag &#x60;name&#x60; is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (&#x60;tag_source&#x60;) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postTagRequest">The JSON payload to use to create a new tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTag200Response</returns>
        public GetTag200Response PostTag(PostTagRequest postTagRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetTag200Response> localVarResponse = PostTagWithHttpInfo(postTagRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (Create) a Tag Use this method to create a new tag. The tag &#x60;name&#x60; is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (&#x60;tag_source&#x60;) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postTagRequest">The JSON payload to use to create a new tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTag200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetTag200Response> PostTagWithHttpInfo(PostTagRequest postTagRequest, int operationIndex = 0)
        {
            // verify the required parameter 'postTagRequest' is set
            if (postTagRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'postTagRequest' when calling ContactTagsApi->PostTag");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postTagRequest;

            localVarRequestOptions.Operation = "ContactTagsApi.PostTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetTag200Response>("/contact_tags", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST (Create) a Tag Use this method to create a new tag. The tag &#x60;name&#x60; is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (&#x60;tag_source&#x60;) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postTagRequest">The JSON payload to use to create a new tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTag200Response</returns>
        public async System.Threading.Tasks.Task<GetTag200Response> PostTagAsync(PostTagRequest postTagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetTag200Response> localVarResponse = await PostTagWithHttpInfoAsync(postTagRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (Create) a Tag Use this method to create a new tag. The tag &#x60;name&#x60; is required and must be unique and can include most common keyboard symbols. Optionally, when creating a new tag you can specify the source (&#x60;tag_source&#x60;) used to identify the contacts to tag in the request body. [Learn more](/api_guide/tags_create.html).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postTagRequest">The JSON payload to use to create a new tag.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTag200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetTag200Response>> PostTagWithHttpInfoAsync(PostTagRequest postTagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'postTagRequest' is set
            if (postTagRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'postTagRequest' when calling ContactTagsApi->PostTag");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postTagRequest;

            localVarRequestOptions.Operation = "ContactTagsApi.PostTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetTag200Response>("/contact_tags", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (Update) a Tag Use this method to rename an existing tag to a new unique tag name (&#x60;name&#x60;). The maximum length is 255 characters. The &#x60;tag_source&#x60; value cannot be updated using this method. You can set the &#x60;tag_source&#x60; value using the &#x60;POST contact_tags method&#x60;. [Learn more](/api_guide/tags_update.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The system generated ID used to uniquely identify the tag that you want to rename (UUID format).</param>
        /// <param name="putTagRequest">The JSON payload used to update the tag name (&#x60;name&#x60;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetTag200Response</returns>
        public GetTag200Response PutTag(Guid tagId, PutTagRequest putTagRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetTag200Response> localVarResponse = PutTagWithHttpInfo(tagId, putTagRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (Update) a Tag Use this method to rename an existing tag to a new unique tag name (&#x60;name&#x60;). The maximum length is 255 characters. The &#x60;tag_source&#x60; value cannot be updated using this method. You can set the &#x60;tag_source&#x60; value using the &#x60;POST contact_tags method&#x60;. [Learn more](/api_guide/tags_update.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The system generated ID used to uniquely identify the tag that you want to rename (UUID format).</param>
        /// <param name="putTagRequest">The JSON payload used to update the tag name (&#x60;name&#x60;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetTag200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetTag200Response> PutTagWithHttpInfo(Guid tagId, PutTagRequest putTagRequest, int operationIndex = 0)
        {
            // verify the required parameter 'putTagRequest' is set
            if (putTagRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'putTagRequest' when calling ContactTagsApi->PutTag");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_id", ConstantContactApi.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            localVarRequestOptions.Data = putTagRequest;

            localVarRequestOptions.Operation = "ContactTagsApi.PutTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GetTag200Response>("/contact_tags/{tag_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (Update) a Tag Use this method to rename an existing tag to a new unique tag name (&#x60;name&#x60;). The maximum length is 255 characters. The &#x60;tag_source&#x60; value cannot be updated using this method. You can set the &#x60;tag_source&#x60; value using the &#x60;POST contact_tags method&#x60;. [Learn more](/api_guide/tags_update.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The system generated ID used to uniquely identify the tag that you want to rename (UUID format).</param>
        /// <param name="putTagRequest">The JSON payload used to update the tag name (&#x60;name&#x60;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetTag200Response</returns>
        public async System.Threading.Tasks.Task<GetTag200Response> PutTagAsync(Guid tagId, PutTagRequest putTagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetTag200Response> localVarResponse = await PutTagWithHttpInfoAsync(tagId, putTagRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (Update) a Tag Use this method to rename an existing tag to a new unique tag name (&#x60;name&#x60;). The maximum length is 255 characters. The &#x60;tag_source&#x60; value cannot be updated using this method. You can set the &#x60;tag_source&#x60; value using the &#x60;POST contact_tags method&#x60;. [Learn more](/api_guide/tags_update.html)
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tagId">The system generated ID used to uniquely identify the tag that you want to rename (UUID format).</param>
        /// <param name="putTagRequest">The JSON payload used to update the tag name (&#x60;name&#x60;).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetTag200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetTag200Response>> PutTagWithHttpInfoAsync(Guid tagId, PutTagRequest putTagRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'putTagRequest' is set
            if (putTagRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'putTagRequest' when calling ContactTagsApi->PutTag");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("tag_id", ConstantContactApi.Client.ClientUtils.ParameterToString(tagId)); // path parameter
            localVarRequestOptions.Data = putTagRequest;

            localVarRequestOptions.Operation = "ContactTagsApi.PutTag";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GetTag200Response>("/contact_tags/{tag_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PutTag", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
