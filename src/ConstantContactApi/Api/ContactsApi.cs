/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// POST (create) a Contact
        /// </summary>
        /// <remarks>
        ///  Creates a new contact resource. You must include the &#x60;create_source&#x60; property and at least one of the following properties: &#x60;first_name&#x60;, &#x60;last_name&#x60;, a unique &#x60;email_address&#x60; (specified using the &#x60;EmailAddress&#x60; object), or the &#x60;sms_channel&#x60; property (specified using the &#x60;ContactSmsChannel&#x60; object).  &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;If &#x60;email_address&#x60; is specified: **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactRequest">The JSON payload defining the contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactById200Response</returns>
        GetContactById200Response CreateContact(CreateContactRequest createContactRequest, int operationIndex = 0);

        /// <summary>
        /// POST (create) a Contact
        /// </summary>
        /// <remarks>
        ///  Creates a new contact resource. You must include the &#x60;create_source&#x60; property and at least one of the following properties: &#x60;first_name&#x60;, &#x60;last_name&#x60;, a unique &#x60;email_address&#x60; (specified using the &#x60;EmailAddress&#x60; object), or the &#x60;sms_channel&#x60; property (specified using the &#x60;ContactSmsChannel&#x60; object).  &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;If &#x60;email_address&#x60; is specified: **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactRequest">The JSON payload defining the contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactById200Response</returns>
        ApiResponse<GetContactById200Response> CreateContactWithHttpInfo(CreateContactRequest createContactRequest, int operationIndex = 0);
        /// <summary>
        /// Create or Update a Contact
        /// </summary>
        /// <remarks>
        /// Use this method to create a new contact or update an existing contact. In the request body, this method requires including the &#x60;list_memberships&#x60; array as well as either the contact&#39;s &#x60;email_address&#x60; string or &#x60;sms_channel&#x60; object which includes the contact&#39;s SMS number. The information you specify determines if a new contact is either created (the email address or SMS number does not already exist in the account), or if an existing contact is updated (the email address or SMS number already exists). The SMS product feature does not need to be enabled to include a contacts SMS details.  Updates to existing contacts are partial updates. This method only updates the contact properties you include in the request body. Updates append new contact lists or custom fields to the existing &#x60;list_memberships&#x60; or &#x60;custom_fields&#x60; arrays. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt; When this method creates a new contact, it returns a 201 response code.When this method updates an existing contact, it returns a 200 response code. Updating a deleted contact restores the contact.  The method automatically modifies the contact&#39;s &#x60;permission_to_send&#x60; and &#x60;opt_in_source&#x60; properties depending on the [Confirmed Opt-In](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5533-obtain-permission-to-send-email-campaigns-to-your-contacts-by-using-confirmed-opt-in) Constant Contact account setting:  If Confirmed Opt-in is _enabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as &#x60;pending_confirmation&#x60; for new contacts. If Confirmed Opt-in is _disabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as explicit and the &#x60;opt_in_source&#x60; property as &#x60;Contact&#x60; for new contacts. Updated contacts have their &#x60;permission_to_send&#x60; property set as explicit.       
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateContactRequest">A JSON request body payload that contains the contact resource you are creating or updating. The request body must contain the &#x60;email_address&#x60; property and &#x60;list_memberships&#x60; array, or the &#x60;sms_channel&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateOrUpdateContact200Response</returns>
        CreateOrUpdateContact200Response CreateOrUpdateContact(CreateOrUpdateContactRequest createOrUpdateContactRequest, int operationIndex = 0);

        /// <summary>
        /// Create or Update a Contact
        /// </summary>
        /// <remarks>
        /// Use this method to create a new contact or update an existing contact. In the request body, this method requires including the &#x60;list_memberships&#x60; array as well as either the contact&#39;s &#x60;email_address&#x60; string or &#x60;sms_channel&#x60; object which includes the contact&#39;s SMS number. The information you specify determines if a new contact is either created (the email address or SMS number does not already exist in the account), or if an existing contact is updated (the email address or SMS number already exists). The SMS product feature does not need to be enabled to include a contacts SMS details.  Updates to existing contacts are partial updates. This method only updates the contact properties you include in the request body. Updates append new contact lists or custom fields to the existing &#x60;list_memberships&#x60; or &#x60;custom_fields&#x60; arrays. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt; When this method creates a new contact, it returns a 201 response code.When this method updates an existing contact, it returns a 200 response code. Updating a deleted contact restores the contact.  The method automatically modifies the contact&#39;s &#x60;permission_to_send&#x60; and &#x60;opt_in_source&#x60; properties depending on the [Confirmed Opt-In](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5533-obtain-permission-to-send-email-campaigns-to-your-contacts-by-using-confirmed-opt-in) Constant Contact account setting:  If Confirmed Opt-in is _enabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as &#x60;pending_confirmation&#x60; for new contacts. If Confirmed Opt-in is _disabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as explicit and the &#x60;opt_in_source&#x60; property as &#x60;Contact&#x60; for new contacts. Updated contacts have their &#x60;permission_to_send&#x60; property set as explicit.       
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateContactRequest">A JSON request body payload that contains the contact resource you are creating or updating. The request body must contain the &#x60;email_address&#x60; property and &#x60;list_memberships&#x60; array, or the &#x60;sms_channel&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateOrUpdateContact200Response</returns>
        ApiResponse<CreateOrUpdateContact200Response> CreateOrUpdateContactWithHttpInfo(CreateOrUpdateContactRequest createOrUpdateContactRequest, int operationIndex = 0);
        /// <summary>
        /// DELETE a Contact
        /// </summary>
        /// <remarks>
        /// Deletes the contact identified by the contact_id path parameter. Deleted contacts won&#39;t receive email from you, and they don&#39;t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be revived, or added back to an account. Learn how to [revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to DELETE</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteContact(string contactId, int operationIndex = 0);

        /// <summary>
        /// DELETE a Contact
        /// </summary>
        /// <remarks>
        /// Deletes the contact identified by the contact_id path parameter. Deleted contacts won&#39;t receive email from you, and they don&#39;t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be revived, or added back to an account. Learn how to [revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to DELETE</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteContactWithHttpInfo(string contactId, int operationIndex = 0);
        /// <summary>
        /// GET Contacts Collection
        /// </summary>
        /// <remarks>
        /// Use this method to return a collection of contacts. Use the query parameters to search for contacts that match specific contact properties and sub-resource properties as criteria. For example, you can search using the contact&#39;s &#x60;email&#x60; address, &#x60;lists&#x60; memberships, and by the date range that a contact was created or updated. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. Use the &#x60;include&#x60; query parameter to include contact sub-resources in the response and &#x60;include_count&#x60; to include the total number of contacts that meet your specified search criteria.  By default, this method returns all contacts that are not deleted. Use the &#x60;status&#x60; query parameter with the value &#x60;all&#x60; to return all contacts including deleted contacts.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Use the &#x60;status&#x60; query parameter to search for contacts by status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;active&#x60;, &#x60;deleted&#x60;, &#x60;not_set&#x60;, &#x60;pending_confirmation&#x60;, &#x60;temp_hold&#x60;, and &#x60;unsubscribed&#x60;. (optional)</param>
        /// <param name="email">Use the &#x60;email&#x60; query parameter to search for a contact using a specific email address. (optional)</param>
        /// <param name="lists">Use the &#x60;lists&#x60; query parameter to search for contacts that are members of one or more specified lists. Use a comma to separate multiple &#x60;list_id&#x60; values, up to a maximum of 25. (optional)</param>
        /// <param name="segmentId">Use to get contacts that meet the segment criteria for a single specified &#x60;segment_id&#x60;. This query parameter can only be combined with the limit query parameter. When using the &#x60;segment_id&#x60; query parameter, the V3 API may return a 202 response code instead of a 200 response. The 202 response code indicates that your request has been accepted, but not fully completed. Retry sending your API request to return the completed results and a 200 response code. (optional)</param>
        /// <param name="tags">Use to get contact details for up to 50 specified tags. Use a comma to separate each &#x60;tag_id&#x60;. (optional)</param>
        /// <param name="updatedAfter">Use &#x60;updated_after&#x60; to search for contacts that have been updated after the date you specify. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="updatedBefore">Use &#x60;updated_before&#x60; to search for contacts that have been updated before a specified date. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdAfter">Use &#x60;created_after&#x60; to search for contacts created after a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdBefore">Use &#x60;created_before&#x60; to search for contacts created before a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="optoutAfter">Use &#x60;optout_after&#x60; to search for contacts that unsubscribed after a specified date. (optional)</param>
        /// <param name="optoutBefore">Use &#x60;optout_before&#x60; to search for contacts that unsubscribed before a specified date. (optional)</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;taggings&#x60;, &#x60;notes&#x60;,&#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;. (optional)</param>
        /// <param name="smsStatus">Use to get contacts by their SMS status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;explicit&#x60;, &#x60;unsubscribed&#x60;, &#x60;pending_confirmation&#x60;, &#x60;not_set&#x60;. (optional)</param>
        /// <param name="includeCount">Set &#x60;include_count&#x3D;true&#x60; to include the total number of contacts (&#x60;contacts_count&#x60;) that meet all search criteria in the response body. (optional)</param>
        /// <param name="limit">Specifies the number of results displayed per page of output in the response, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllContacts200Response</returns>
        GetAllContacts200Response GetAllContacts(string? status = default(string?), string? email = default(string?), string? lists = default(string?), string? segmentId = default(string?), Guid? tags = default(Guid?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? optoutAfter = default(DateTime?), DateTime? optoutBefore = default(DateTime?), string? include = default(string?), string? smsStatus = default(string?), bool? includeCount = default(bool?), int? limit = default(int?), int operationIndex = 0);

        /// <summary>
        /// GET Contacts Collection
        /// </summary>
        /// <remarks>
        /// Use this method to return a collection of contacts. Use the query parameters to search for contacts that match specific contact properties and sub-resource properties as criteria. For example, you can search using the contact&#39;s &#x60;email&#x60; address, &#x60;lists&#x60; memberships, and by the date range that a contact was created or updated. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. Use the &#x60;include&#x60; query parameter to include contact sub-resources in the response and &#x60;include_count&#x60; to include the total number of contacts that meet your specified search criteria.  By default, this method returns all contacts that are not deleted. Use the &#x60;status&#x60; query parameter with the value &#x60;all&#x60; to return all contacts including deleted contacts.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Use the &#x60;status&#x60; query parameter to search for contacts by status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;active&#x60;, &#x60;deleted&#x60;, &#x60;not_set&#x60;, &#x60;pending_confirmation&#x60;, &#x60;temp_hold&#x60;, and &#x60;unsubscribed&#x60;. (optional)</param>
        /// <param name="email">Use the &#x60;email&#x60; query parameter to search for a contact using a specific email address. (optional)</param>
        /// <param name="lists">Use the &#x60;lists&#x60; query parameter to search for contacts that are members of one or more specified lists. Use a comma to separate multiple &#x60;list_id&#x60; values, up to a maximum of 25. (optional)</param>
        /// <param name="segmentId">Use to get contacts that meet the segment criteria for a single specified &#x60;segment_id&#x60;. This query parameter can only be combined with the limit query parameter. When using the &#x60;segment_id&#x60; query parameter, the V3 API may return a 202 response code instead of a 200 response. The 202 response code indicates that your request has been accepted, but not fully completed. Retry sending your API request to return the completed results and a 200 response code. (optional)</param>
        /// <param name="tags">Use to get contact details for up to 50 specified tags. Use a comma to separate each &#x60;tag_id&#x60;. (optional)</param>
        /// <param name="updatedAfter">Use &#x60;updated_after&#x60; to search for contacts that have been updated after the date you specify. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="updatedBefore">Use &#x60;updated_before&#x60; to search for contacts that have been updated before a specified date. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdAfter">Use &#x60;created_after&#x60; to search for contacts created after a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdBefore">Use &#x60;created_before&#x60; to search for contacts created before a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="optoutAfter">Use &#x60;optout_after&#x60; to search for contacts that unsubscribed after a specified date. (optional)</param>
        /// <param name="optoutBefore">Use &#x60;optout_before&#x60; to search for contacts that unsubscribed before a specified date. (optional)</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;taggings&#x60;, &#x60;notes&#x60;,&#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;. (optional)</param>
        /// <param name="smsStatus">Use to get contacts by their SMS status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;explicit&#x60;, &#x60;unsubscribed&#x60;, &#x60;pending_confirmation&#x60;, &#x60;not_set&#x60;. (optional)</param>
        /// <param name="includeCount">Set &#x60;include_count&#x3D;true&#x60; to include the total number of contacts (&#x60;contacts_count&#x60;) that meet all search criteria in the response body. (optional)</param>
        /// <param name="limit">Specifies the number of results displayed per page of output in the response, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllContacts200Response</returns>
        ApiResponse<GetAllContacts200Response> GetAllContactsWithHttpInfo(string? status = default(string?), string? email = default(string?), string? lists = default(string?), string? segmentId = default(string?), Guid? tags = default(Guid?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? optoutAfter = default(DateTime?), DateTime? optoutBefore = default(DateTime?), string? include = default(string?), string? smsStatus = default(string?), bool? includeCount = default(bool?), int? limit = default(int?), int operationIndex = 0);
        /// <summary>
        /// GET a Contact
        /// </summary>
        /// <remarks>
        /// This endpoint GETs a specific contact resource (contact_id). Use the &#x60;include&#x60; query parameter to add any of the available contact sub-resources to the response payload.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to GET</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;, &#x60;notes&#x60;, and &#x60;taggings&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactById200Response</returns>
        GetContactById200Response GetContactById(string contactId, string? include = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Contact
        /// </summary>
        /// <remarks>
        /// This endpoint GETs a specific contact resource (contact_id). Use the &#x60;include&#x60; query parameter to add any of the available contact sub-resources to the response payload.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to GET</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;, &#x60;notes&#x60;, and &#x60;taggings&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactById200Response</returns>
        ApiResponse<GetContactById200Response> GetContactByIdWithHttpInfo(string contactId, string? include = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET Contact Consent Counts
        /// </summary>
        /// <remarks>
        /// Use to get the total contacts count for the account and the total contact-consent counts for each consent state. Optionally, to include the total number of contacts that subscribed within the last 30 days in the results, use &#x60;new_subscribers&#x60; in the &#x60;include&#x60; query parameter. To optimize open rates, reduce spam reports, and help grow your business,  you must value your contact&#39;s consent to receive or to not receive your emails.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Use to return the total number of contacts that subscribed within the last 30 days in the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactCounts200Response</returns>
        GetContactCounts200Response GetContactCounts(string? include = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET Contact Consent Counts
        /// </summary>
        /// <remarks>
        /// Use to get the total contacts count for the account and the total contact-consent counts for each consent state. Optionally, to include the total number of contacts that subscribed within the last 30 days in the results, use &#x60;new_subscribers&#x60; in the &#x60;include&#x60; query parameter. To optimize open rates, reduce spam reports, and help grow your business,  you must value your contact&#39;s consent to receive or to not receive your emails.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Use to return the total number of contacts that subscribed within the last 30 days in the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactCounts200Response</returns>
        ApiResponse<GetContactCounts200Response> GetContactCountsWithHttpInfo(string? include = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET a collection of V2 and V3 API contact IDs
        /// </summary>
        /// <remarks>
        /// &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 contact ids to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  This GET call retrieves a collection of cross-referenced contact sequence IDs (&#x60;id&#x60; used in the V2 API) and UUIDs (&#x60;contact_id&#x60; used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the &#x60;sequence_ids&#x60; query parameter to specify a set of comma delimited V2 contacts ids to cross-referenced with their V3 &#x60;contact_ids&#x60;. See [Migrating to V3](/api_guide/migration_overview.html) to learn more.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceIds">Comma delimited list of V2 API contact &#x60;ids&#x60; to cross-reference with the V3 API &#x60;contact_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactIdXrefs200Response</returns>
        GetContactIdXrefs200Response GetContactIdXrefs(string sequenceIds, int operationIndex = 0);

        /// <summary>
        /// GET a collection of V2 and V3 API contact IDs
        /// </summary>
        /// <remarks>
        /// &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 contact ids to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  This GET call retrieves a collection of cross-referenced contact sequence IDs (&#x60;id&#x60; used in the V2 API) and UUIDs (&#x60;contact_id&#x60; used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the &#x60;sequence_ids&#x60; query parameter to specify a set of comma delimited V2 contacts ids to cross-referenced with their V3 &#x60;contact_ids&#x60;. See [Migrating to V3](/api_guide/migration_overview.html) to learn more.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceIds">Comma delimited list of V2 API contact &#x60;ids&#x60; to cross-reference with the V3 API &#x60;contact_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactIdXrefs200Response</returns>
        ApiResponse<GetContactIdXrefs200Response> GetContactIdXrefsWithHttpInfo(string sequenceIds, int operationIndex = 0);
        /// <summary>
        /// GET SMS Engagement History for a Contact
        /// </summary>
        /// <remarks>
        /// Use this method to return SMS engagement details for a contact, such as SMS consent and advertising frequency details.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s unique ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetSmsEngagementHistory200ResponseInner&gt;</returns>
        List<GetSmsEngagementHistory200ResponseInner> GetSmsEngagementHistory(string contactId, int operationIndex = 0);

        /// <summary>
        /// GET SMS Engagement History for a Contact
        /// </summary>
        /// <remarks>
        /// Use this method to return SMS engagement details for a contact, such as SMS consent and advertising frequency details.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s unique ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetSmsEngagementHistory200ResponseInner&gt;</returns>
        ApiResponse<List<GetSmsEngagementHistory200ResponseInner>> GetSmsEngagementHistoryWithHttpInfo(string contactId, int operationIndex = 0);
        /// <summary>
        /// PUT Resubscribe a Contact
        /// </summary>
        /// <remarks>
        /// Use this endpoint to send a confirmation resubscribe email to a contact in order to get their confirmation to resubscribe. This endpoint also adds the resubscribed contact to the contact lists you specify in the request body. You can only send a resubscribe email to the unsubscribed contact once. The contact is not resubscribed until after you receive their confirmation. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The ID that uniquely identifies the contact to resubscribe.</param>
        /// <param name="resubscribeContactRequest">The JSON payload used to specify one (or more) contact lists to which the contact requested to be resubscribed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ResubscribeContact(string contactId, ResubscribeContactRequest resubscribeContactRequest, int operationIndex = 0);

        /// <summary>
        /// PUT Resubscribe a Contact
        /// </summary>
        /// <remarks>
        /// Use this endpoint to send a confirmation resubscribe email to a contact in order to get their confirmation to resubscribe. This endpoint also adds the resubscribed contact to the contact lists you specify in the request body. You can only send a resubscribe email to the unsubscribed contact once. The contact is not resubscribed until after you receive their confirmation. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The ID that uniquely identifies the contact to resubscribe.</param>
        /// <param name="resubscribeContactRequest">The JSON payload used to specify one (or more) contact lists to which the contact requested to be resubscribed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ResubscribeContactWithHttpInfo(string contactId, ResubscribeContactRequest resubscribeContactRequest, int operationIndex = 0);
        /// <summary>
        /// PUT (update) a Contact
        /// </summary>
        /// <remarks>
        /// The PUT method updates an existing contact. You must include the &#x60;update_source&#x60; property in the PUT request payload. To restore  a deleted contact you must specify the &#x60;update_source&#x60; as &#x60;Account&#x60;. When updating any resource using PUT, all properties are updated, overwriting all previous values. Any properties left blank or not included in the request are overwritten with null value - however this does not apply to contact subresources.   Add or change any of the subresources by including them in the PUT request payload. Omitted subresources are not overwritten with null. If the contact being updated is deleted, the contact will be revived. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt; **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to update</param>
        /// <param name="updateContactRequest">JSON payload defining the contact object, with updates. Any properties left blank or not included in the PUT payload are overwritten with null value - does not apply to contact subresources.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactById200Response</returns>
        GetContactById200Response UpdateContact(string contactId, UpdateContactRequest updateContactRequest, int operationIndex = 0);

        /// <summary>
        /// PUT (update) a Contact
        /// </summary>
        /// <remarks>
        /// The PUT method updates an existing contact. You must include the &#x60;update_source&#x60; property in the PUT request payload. To restore  a deleted contact you must specify the &#x60;update_source&#x60; as &#x60;Account&#x60;. When updating any resource using PUT, all properties are updated, overwriting all previous values. Any properties left blank or not included in the request are overwritten with null value - however this does not apply to contact subresources.   Add or change any of the subresources by including them in the PUT request payload. Omitted subresources are not overwritten with null. If the contact being updated is deleted, the contact will be revived. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt; **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to update</param>
        /// <param name="updateContactRequest">JSON payload defining the contact object, with updates. Any properties left blank or not included in the PUT payload are overwritten with null value - does not apply to contact subresources.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactById200Response</returns>
        ApiResponse<GetContactById200Response> UpdateContactWithHttpInfo(string contactId, UpdateContactRequest updateContactRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// POST (create) a Contact
        /// </summary>
        /// <remarks>
        ///  Creates a new contact resource. You must include the &#x60;create_source&#x60; property and at least one of the following properties: &#x60;first_name&#x60;, &#x60;last_name&#x60;, a unique &#x60;email_address&#x60; (specified using the &#x60;EmailAddress&#x60; object), or the &#x60;sms_channel&#x60; property (specified using the &#x60;ContactSmsChannel&#x60; object).  &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;If &#x60;email_address&#x60; is specified: **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactRequest">The JSON payload defining the contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactById200Response</returns>
        System.Threading.Tasks.Task<GetContactById200Response> CreateContactAsync(CreateContactRequest createContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST (create) a Contact
        /// </summary>
        /// <remarks>
        ///  Creates a new contact resource. You must include the &#x60;create_source&#x60; property and at least one of the following properties: &#x60;first_name&#x60;, &#x60;last_name&#x60;, a unique &#x60;email_address&#x60; (specified using the &#x60;EmailAddress&#x60; object), or the &#x60;sms_channel&#x60; property (specified using the &#x60;ContactSmsChannel&#x60; object).  &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;If &#x60;email_address&#x60; is specified: **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactRequest">The JSON payload defining the contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactById200Response>> CreateContactWithHttpInfoAsync(CreateContactRequest createContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create or Update a Contact
        /// </summary>
        /// <remarks>
        /// Use this method to create a new contact or update an existing contact. In the request body, this method requires including the &#x60;list_memberships&#x60; array as well as either the contact&#39;s &#x60;email_address&#x60; string or &#x60;sms_channel&#x60; object which includes the contact&#39;s SMS number. The information you specify determines if a new contact is either created (the email address or SMS number does not already exist in the account), or if an existing contact is updated (the email address or SMS number already exists). The SMS product feature does not need to be enabled to include a contacts SMS details.  Updates to existing contacts are partial updates. This method only updates the contact properties you include in the request body. Updates append new contact lists or custom fields to the existing &#x60;list_memberships&#x60; or &#x60;custom_fields&#x60; arrays. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt; When this method creates a new contact, it returns a 201 response code.When this method updates an existing contact, it returns a 200 response code. Updating a deleted contact restores the contact.  The method automatically modifies the contact&#39;s &#x60;permission_to_send&#x60; and &#x60;opt_in_source&#x60; properties depending on the [Confirmed Opt-In](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5533-obtain-permission-to-send-email-campaigns-to-your-contacts-by-using-confirmed-opt-in) Constant Contact account setting:  If Confirmed Opt-in is _enabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as &#x60;pending_confirmation&#x60; for new contacts. If Confirmed Opt-in is _disabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as explicit and the &#x60;opt_in_source&#x60; property as &#x60;Contact&#x60; for new contacts. Updated contacts have their &#x60;permission_to_send&#x60; property set as explicit.       
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateContactRequest">A JSON request body payload that contains the contact resource you are creating or updating. The request body must contain the &#x60;email_address&#x60; property and &#x60;list_memberships&#x60; array, or the &#x60;sms_channel&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOrUpdateContact200Response</returns>
        System.Threading.Tasks.Task<CreateOrUpdateContact200Response> CreateOrUpdateContactAsync(CreateOrUpdateContactRequest createOrUpdateContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create or Update a Contact
        /// </summary>
        /// <remarks>
        /// Use this method to create a new contact or update an existing contact. In the request body, this method requires including the &#x60;list_memberships&#x60; array as well as either the contact&#39;s &#x60;email_address&#x60; string or &#x60;sms_channel&#x60; object which includes the contact&#39;s SMS number. The information you specify determines if a new contact is either created (the email address or SMS number does not already exist in the account), or if an existing contact is updated (the email address or SMS number already exists). The SMS product feature does not need to be enabled to include a contacts SMS details.  Updates to existing contacts are partial updates. This method only updates the contact properties you include in the request body. Updates append new contact lists or custom fields to the existing &#x60;list_memberships&#x60; or &#x60;custom_fields&#x60; arrays. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt; When this method creates a new contact, it returns a 201 response code.When this method updates an existing contact, it returns a 200 response code. Updating a deleted contact restores the contact.  The method automatically modifies the contact&#39;s &#x60;permission_to_send&#x60; and &#x60;opt_in_source&#x60; properties depending on the [Confirmed Opt-In](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5533-obtain-permission-to-send-email-campaigns-to-your-contacts-by-using-confirmed-opt-in) Constant Contact account setting:  If Confirmed Opt-in is _enabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as &#x60;pending_confirmation&#x60; for new contacts. If Confirmed Opt-in is _disabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as explicit and the &#x60;opt_in_source&#x60; property as &#x60;Contact&#x60; for new contacts. Updated contacts have their &#x60;permission_to_send&#x60; property set as explicit.       
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateContactRequest">A JSON request body payload that contains the contact resource you are creating or updating. The request body must contain the &#x60;email_address&#x60; property and &#x60;list_memberships&#x60; array, or the &#x60;sms_channel&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOrUpdateContact200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateOrUpdateContact200Response>> CreateOrUpdateContactWithHttpInfoAsync(CreateOrUpdateContactRequest createOrUpdateContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DELETE a Contact
        /// </summary>
        /// <remarks>
        /// Deletes the contact identified by the contact_id path parameter. Deleted contacts won&#39;t receive email from you, and they don&#39;t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be revived, or added back to an account. Learn how to [revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to DELETE</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteContactAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DELETE a Contact
        /// </summary>
        /// <remarks>
        /// Deletes the contact identified by the contact_id path parameter. Deleted contacts won&#39;t receive email from you, and they don&#39;t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be revived, or added back to an account. Learn how to [revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to DELETE</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteContactWithHttpInfoAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET Contacts Collection
        /// </summary>
        /// <remarks>
        /// Use this method to return a collection of contacts. Use the query parameters to search for contacts that match specific contact properties and sub-resource properties as criteria. For example, you can search using the contact&#39;s &#x60;email&#x60; address, &#x60;lists&#x60; memberships, and by the date range that a contact was created or updated. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. Use the &#x60;include&#x60; query parameter to include contact sub-resources in the response and &#x60;include_count&#x60; to include the total number of contacts that meet your specified search criteria.  By default, this method returns all contacts that are not deleted. Use the &#x60;status&#x60; query parameter with the value &#x60;all&#x60; to return all contacts including deleted contacts.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Use the &#x60;status&#x60; query parameter to search for contacts by status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;active&#x60;, &#x60;deleted&#x60;, &#x60;not_set&#x60;, &#x60;pending_confirmation&#x60;, &#x60;temp_hold&#x60;, and &#x60;unsubscribed&#x60;. (optional)</param>
        /// <param name="email">Use the &#x60;email&#x60; query parameter to search for a contact using a specific email address. (optional)</param>
        /// <param name="lists">Use the &#x60;lists&#x60; query parameter to search for contacts that are members of one or more specified lists. Use a comma to separate multiple &#x60;list_id&#x60; values, up to a maximum of 25. (optional)</param>
        /// <param name="segmentId">Use to get contacts that meet the segment criteria for a single specified &#x60;segment_id&#x60;. This query parameter can only be combined with the limit query parameter. When using the &#x60;segment_id&#x60; query parameter, the V3 API may return a 202 response code instead of a 200 response. The 202 response code indicates that your request has been accepted, but not fully completed. Retry sending your API request to return the completed results and a 200 response code. (optional)</param>
        /// <param name="tags">Use to get contact details for up to 50 specified tags. Use a comma to separate each &#x60;tag_id&#x60;. (optional)</param>
        /// <param name="updatedAfter">Use &#x60;updated_after&#x60; to search for contacts that have been updated after the date you specify. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="updatedBefore">Use &#x60;updated_before&#x60; to search for contacts that have been updated before a specified date. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdAfter">Use &#x60;created_after&#x60; to search for contacts created after a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdBefore">Use &#x60;created_before&#x60; to search for contacts created before a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="optoutAfter">Use &#x60;optout_after&#x60; to search for contacts that unsubscribed after a specified date. (optional)</param>
        /// <param name="optoutBefore">Use &#x60;optout_before&#x60; to search for contacts that unsubscribed before a specified date. (optional)</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;taggings&#x60;, &#x60;notes&#x60;,&#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;. (optional)</param>
        /// <param name="smsStatus">Use to get contacts by their SMS status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;explicit&#x60;, &#x60;unsubscribed&#x60;, &#x60;pending_confirmation&#x60;, &#x60;not_set&#x60;. (optional)</param>
        /// <param name="includeCount">Set &#x60;include_count&#x3D;true&#x60; to include the total number of contacts (&#x60;contacts_count&#x60;) that meet all search criteria in the response body. (optional)</param>
        /// <param name="limit">Specifies the number of results displayed per page of output in the response, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllContacts200Response</returns>
        System.Threading.Tasks.Task<GetAllContacts200Response> GetAllContactsAsync(string? status = default(string?), string? email = default(string?), string? lists = default(string?), string? segmentId = default(string?), Guid? tags = default(Guid?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? optoutAfter = default(DateTime?), DateTime? optoutBefore = default(DateTime?), string? include = default(string?), string? smsStatus = default(string?), bool? includeCount = default(bool?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Contacts Collection
        /// </summary>
        /// <remarks>
        /// Use this method to return a collection of contacts. Use the query parameters to search for contacts that match specific contact properties and sub-resource properties as criteria. For example, you can search using the contact&#39;s &#x60;email&#x60; address, &#x60;lists&#x60; memberships, and by the date range that a contact was created or updated. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. Use the &#x60;include&#x60; query parameter to include contact sub-resources in the response and &#x60;include_count&#x60; to include the total number of contacts that meet your specified search criteria.  By default, this method returns all contacts that are not deleted. Use the &#x60;status&#x60; query parameter with the value &#x60;all&#x60; to return all contacts including deleted contacts.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Use the &#x60;status&#x60; query parameter to search for contacts by status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;active&#x60;, &#x60;deleted&#x60;, &#x60;not_set&#x60;, &#x60;pending_confirmation&#x60;, &#x60;temp_hold&#x60;, and &#x60;unsubscribed&#x60;. (optional)</param>
        /// <param name="email">Use the &#x60;email&#x60; query parameter to search for a contact using a specific email address. (optional)</param>
        /// <param name="lists">Use the &#x60;lists&#x60; query parameter to search for contacts that are members of one or more specified lists. Use a comma to separate multiple &#x60;list_id&#x60; values, up to a maximum of 25. (optional)</param>
        /// <param name="segmentId">Use to get contacts that meet the segment criteria for a single specified &#x60;segment_id&#x60;. This query parameter can only be combined with the limit query parameter. When using the &#x60;segment_id&#x60; query parameter, the V3 API may return a 202 response code instead of a 200 response. The 202 response code indicates that your request has been accepted, but not fully completed. Retry sending your API request to return the completed results and a 200 response code. (optional)</param>
        /// <param name="tags">Use to get contact details for up to 50 specified tags. Use a comma to separate each &#x60;tag_id&#x60;. (optional)</param>
        /// <param name="updatedAfter">Use &#x60;updated_after&#x60; to search for contacts that have been updated after the date you specify. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="updatedBefore">Use &#x60;updated_before&#x60; to search for contacts that have been updated before a specified date. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdAfter">Use &#x60;created_after&#x60; to search for contacts created after a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdBefore">Use &#x60;created_before&#x60; to search for contacts created before a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="optoutAfter">Use &#x60;optout_after&#x60; to search for contacts that unsubscribed after a specified date. (optional)</param>
        /// <param name="optoutBefore">Use &#x60;optout_before&#x60; to search for contacts that unsubscribed before a specified date. (optional)</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;taggings&#x60;, &#x60;notes&#x60;,&#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;. (optional)</param>
        /// <param name="smsStatus">Use to get contacts by their SMS status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;explicit&#x60;, &#x60;unsubscribed&#x60;, &#x60;pending_confirmation&#x60;, &#x60;not_set&#x60;. (optional)</param>
        /// <param name="includeCount">Set &#x60;include_count&#x3D;true&#x60; to include the total number of contacts (&#x60;contacts_count&#x60;) that meet all search criteria in the response body. (optional)</param>
        /// <param name="limit">Specifies the number of results displayed per page of output in the response, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllContacts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllContacts200Response>> GetAllContactsWithHttpInfoAsync(string? status = default(string?), string? email = default(string?), string? lists = default(string?), string? segmentId = default(string?), Guid? tags = default(Guid?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? optoutAfter = default(DateTime?), DateTime? optoutBefore = default(DateTime?), string? include = default(string?), string? smsStatus = default(string?), bool? includeCount = default(bool?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Contact
        /// </summary>
        /// <remarks>
        /// This endpoint GETs a specific contact resource (contact_id). Use the &#x60;include&#x60; query parameter to add any of the available contact sub-resources to the response payload.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to GET</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;, &#x60;notes&#x60;, and &#x60;taggings&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactById200Response</returns>
        System.Threading.Tasks.Task<GetContactById200Response> GetContactByIdAsync(string contactId, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Contact
        /// </summary>
        /// <remarks>
        /// This endpoint GETs a specific contact resource (contact_id). Use the &#x60;include&#x60; query parameter to add any of the available contact sub-resources to the response payload.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to GET</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;, &#x60;notes&#x60;, and &#x60;taggings&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactById200Response>> GetContactByIdWithHttpInfoAsync(string contactId, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET Contact Consent Counts
        /// </summary>
        /// <remarks>
        /// Use to get the total contacts count for the account and the total contact-consent counts for each consent state. Optionally, to include the total number of contacts that subscribed within the last 30 days in the results, use &#x60;new_subscribers&#x60; in the &#x60;include&#x60; query parameter. To optimize open rates, reduce spam reports, and help grow your business,  you must value your contact&#39;s consent to receive or to not receive your emails.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Use to return the total number of contacts that subscribed within the last 30 days in the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactCounts200Response</returns>
        System.Threading.Tasks.Task<GetContactCounts200Response> GetContactCountsAsync(string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Contact Consent Counts
        /// </summary>
        /// <remarks>
        /// Use to get the total contacts count for the account and the total contact-consent counts for each consent state. Optionally, to include the total number of contacts that subscribed within the last 30 days in the results, use &#x60;new_subscribers&#x60; in the &#x60;include&#x60; query parameter. To optimize open rates, reduce spam reports, and help grow your business,  you must value your contact&#39;s consent to receive or to not receive your emails.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Use to return the total number of contacts that subscribed within the last 30 days in the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactCounts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactCounts200Response>> GetContactCountsWithHttpInfoAsync(string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a collection of V2 and V3 API contact IDs
        /// </summary>
        /// <remarks>
        /// &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 contact ids to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  This GET call retrieves a collection of cross-referenced contact sequence IDs (&#x60;id&#x60; used in the V2 API) and UUIDs (&#x60;contact_id&#x60; used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the &#x60;sequence_ids&#x60; query parameter to specify a set of comma delimited V2 contacts ids to cross-referenced with their V3 &#x60;contact_ids&#x60;. See [Migrating to V3](/api_guide/migration_overview.html) to learn more.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceIds">Comma delimited list of V2 API contact &#x60;ids&#x60; to cross-reference with the V3 API &#x60;contact_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactIdXrefs200Response</returns>
        System.Threading.Tasks.Task<GetContactIdXrefs200Response> GetContactIdXrefsAsync(string sequenceIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a collection of V2 and V3 API contact IDs
        /// </summary>
        /// <remarks>
        /// &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 contact ids to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  This GET call retrieves a collection of cross-referenced contact sequence IDs (&#x60;id&#x60; used in the V2 API) and UUIDs (&#x60;contact_id&#x60; used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the &#x60;sequence_ids&#x60; query parameter to specify a set of comma delimited V2 contacts ids to cross-referenced with their V3 &#x60;contact_ids&#x60;. See [Migrating to V3](/api_guide/migration_overview.html) to learn more.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceIds">Comma delimited list of V2 API contact &#x60;ids&#x60; to cross-reference with the V3 API &#x60;contact_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactIdXrefs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactIdXrefs200Response>> GetContactIdXrefsWithHttpInfoAsync(string sequenceIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET SMS Engagement History for a Contact
        /// </summary>
        /// <remarks>
        /// Use this method to return SMS engagement details for a contact, such as SMS consent and advertising frequency details.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s unique ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetSmsEngagementHistory200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetSmsEngagementHistory200ResponseInner>> GetSmsEngagementHistoryAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET SMS Engagement History for a Contact
        /// </summary>
        /// <remarks>
        /// Use this method to return SMS engagement details for a contact, such as SMS consent and advertising frequency details.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s unique ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetSmsEngagementHistory200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetSmsEngagementHistory200ResponseInner>>> GetSmsEngagementHistoryWithHttpInfoAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PUT Resubscribe a Contact
        /// </summary>
        /// <remarks>
        /// Use this endpoint to send a confirmation resubscribe email to a contact in order to get their confirmation to resubscribe. This endpoint also adds the resubscribed contact to the contact lists you specify in the request body. You can only send a resubscribe email to the unsubscribed contact once. The contact is not resubscribed until after you receive their confirmation. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The ID that uniquely identifies the contact to resubscribe.</param>
        /// <param name="resubscribeContactRequest">The JSON payload used to specify one (or more) contact lists to which the contact requested to be resubscribed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ResubscribeContactAsync(string contactId, ResubscribeContactRequest resubscribeContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PUT Resubscribe a Contact
        /// </summary>
        /// <remarks>
        /// Use this endpoint to send a confirmation resubscribe email to a contact in order to get their confirmation to resubscribe. This endpoint also adds the resubscribed contact to the contact lists you specify in the request body. You can only send a resubscribe email to the unsubscribed contact once. The contact is not resubscribed until after you receive their confirmation. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The ID that uniquely identifies the contact to resubscribe.</param>
        /// <param name="resubscribeContactRequest">The JSON payload used to specify one (or more) contact lists to which the contact requested to be resubscribed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ResubscribeContactWithHttpInfoAsync(string contactId, ResubscribeContactRequest resubscribeContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PUT (update) a Contact
        /// </summary>
        /// <remarks>
        /// The PUT method updates an existing contact. You must include the &#x60;update_source&#x60; property in the PUT request payload. To restore  a deleted contact you must specify the &#x60;update_source&#x60; as &#x60;Account&#x60;. When updating any resource using PUT, all properties are updated, overwriting all previous values. Any properties left blank or not included in the request are overwritten with null value - however this does not apply to contact subresources.   Add or change any of the subresources by including them in the PUT request payload. Omitted subresources are not overwritten with null. If the contact being updated is deleted, the contact will be revived. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt; **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to update</param>
        /// <param name="updateContactRequest">JSON payload defining the contact object, with updates. Any properties left blank or not included in the PUT payload are overwritten with null value - does not apply to contact subresources.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactById200Response</returns>
        System.Threading.Tasks.Task<GetContactById200Response> UpdateContactAsync(string contactId, UpdateContactRequest updateContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PUT (update) a Contact
        /// </summary>
        /// <remarks>
        /// The PUT method updates an existing contact. You must include the &#x60;update_source&#x60; property in the PUT request payload. To restore  a deleted contact you must specify the &#x60;update_source&#x60; as &#x60;Account&#x60;. When updating any resource using PUT, all properties are updated, overwriting all previous values. Any properties left blank or not included in the request are overwritten with null value - however this does not apply to contact subresources.   Add or change any of the subresources by including them in the PUT request payload. Omitted subresources are not overwritten with null. If the contact being updated is deleted, the contact will be revived. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt; **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to update</param>
        /// <param name="updateContactRequest">JSON payload defining the contact object, with updates. Any properties left blank or not included in the PUT payload are overwritten with null value - does not apply to contact subresources.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactById200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactById200Response>> UpdateContactWithHttpInfoAsync(string contactId, UpdateContactRequest updateContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContactsApi : IContactsApiSync, IContactsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContactsApi : IContactsApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContactsApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContactsApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContactsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContactsApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// POST (create) a Contact  Creates a new contact resource. You must include the &#x60;create_source&#x60; property and at least one of the following properties: &#x60;first_name&#x60;, &#x60;last_name&#x60;, a unique &#x60;email_address&#x60; (specified using the &#x60;EmailAddress&#x60; object), or the &#x60;sms_channel&#x60; property (specified using the &#x60;ContactSmsChannel&#x60; object).  &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;If &#x60;email_address&#x60; is specified: **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactRequest">The JSON payload defining the contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactById200Response</returns>
        public GetContactById200Response CreateContact(CreateContactRequest createContactRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetContactById200Response> localVarResponse = CreateContactWithHttpInfo(createContactRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (create) a Contact  Creates a new contact resource. You must include the &#x60;create_source&#x60; property and at least one of the following properties: &#x60;first_name&#x60;, &#x60;last_name&#x60;, a unique &#x60;email_address&#x60; (specified using the &#x60;EmailAddress&#x60; object), or the &#x60;sms_channel&#x60; property (specified using the &#x60;ContactSmsChannel&#x60; object).  &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;If &#x60;email_address&#x60; is specified: **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactRequest">The JSON payload defining the contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactById200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetContactById200Response> CreateContactWithHttpInfo(CreateContactRequest createContactRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createContactRequest' is set
            if (createContactRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createContactRequest' when calling ContactsApi->CreateContact");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createContactRequest;

            localVarRequestOptions.Operation = "ContactsApi.CreateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetContactById200Response>("/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST (create) a Contact  Creates a new contact resource. You must include the &#x60;create_source&#x60; property and at least one of the following properties: &#x60;first_name&#x60;, &#x60;last_name&#x60;, a unique &#x60;email_address&#x60; (specified using the &#x60;EmailAddress&#x60; object), or the &#x60;sms_channel&#x60; property (specified using the &#x60;ContactSmsChannel&#x60; object).  &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;If &#x60;email_address&#x60; is specified: **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactRequest">The JSON payload defining the contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactById200Response</returns>
        public async System.Threading.Tasks.Task<GetContactById200Response> CreateContactAsync(CreateContactRequest createContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetContactById200Response> localVarResponse = await CreateContactWithHttpInfoAsync(createContactRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (create) a Contact  Creates a new contact resource. You must include the &#x60;create_source&#x60; property and at least one of the following properties: &#x60;first_name&#x60;, &#x60;last_name&#x60;, a unique &#x60;email_address&#x60; (specified using the &#x60;EmailAddress&#x60; object), or the &#x60;sms_channel&#x60; property (specified using the &#x60;ContactSmsChannel&#x60; object).  &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;If &#x60;email_address&#x60; is specified: **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createContactRequest">The JSON payload defining the contact</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactById200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetContactById200Response>> CreateContactWithHttpInfoAsync(CreateContactRequest createContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createContactRequest' is set
            if (createContactRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createContactRequest' when calling ContactsApi->CreateContact");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createContactRequest;

            localVarRequestOptions.Operation = "ContactsApi.CreateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<GetContactById200Response>("/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or Update a Contact Use this method to create a new contact or update an existing contact. In the request body, this method requires including the &#x60;list_memberships&#x60; array as well as either the contact&#39;s &#x60;email_address&#x60; string or &#x60;sms_channel&#x60; object which includes the contact&#39;s SMS number. The information you specify determines if a new contact is either created (the email address or SMS number does not already exist in the account), or if an existing contact is updated (the email address or SMS number already exists). The SMS product feature does not need to be enabled to include a contacts SMS details.  Updates to existing contacts are partial updates. This method only updates the contact properties you include in the request body. Updates append new contact lists or custom fields to the existing &#x60;list_memberships&#x60; or &#x60;custom_fields&#x60; arrays. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt; When this method creates a new contact, it returns a 201 response code.When this method updates an existing contact, it returns a 200 response code. Updating a deleted contact restores the contact.  The method automatically modifies the contact&#39;s &#x60;permission_to_send&#x60; and &#x60;opt_in_source&#x60; properties depending on the [Confirmed Opt-In](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5533-obtain-permission-to-send-email-campaigns-to-your-contacts-by-using-confirmed-opt-in) Constant Contact account setting:  If Confirmed Opt-in is _enabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as &#x60;pending_confirmation&#x60; for new contacts. If Confirmed Opt-in is _disabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as explicit and the &#x60;opt_in_source&#x60; property as &#x60;Contact&#x60; for new contacts. Updated contacts have their &#x60;permission_to_send&#x60; property set as explicit.       
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateContactRequest">A JSON request body payload that contains the contact resource you are creating or updating. The request body must contain the &#x60;email_address&#x60; property and &#x60;list_memberships&#x60; array, or the &#x60;sms_channel&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateOrUpdateContact200Response</returns>
        public CreateOrUpdateContact200Response CreateOrUpdateContact(CreateOrUpdateContactRequest createOrUpdateContactRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateOrUpdateContact200Response> localVarResponse = CreateOrUpdateContactWithHttpInfo(createOrUpdateContactRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or Update a Contact Use this method to create a new contact or update an existing contact. In the request body, this method requires including the &#x60;list_memberships&#x60; array as well as either the contact&#39;s &#x60;email_address&#x60; string or &#x60;sms_channel&#x60; object which includes the contact&#39;s SMS number. The information you specify determines if a new contact is either created (the email address or SMS number does not already exist in the account), or if an existing contact is updated (the email address or SMS number already exists). The SMS product feature does not need to be enabled to include a contacts SMS details.  Updates to existing contacts are partial updates. This method only updates the contact properties you include in the request body. Updates append new contact lists or custom fields to the existing &#x60;list_memberships&#x60; or &#x60;custom_fields&#x60; arrays. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt; When this method creates a new contact, it returns a 201 response code.When this method updates an existing contact, it returns a 200 response code. Updating a deleted contact restores the contact.  The method automatically modifies the contact&#39;s &#x60;permission_to_send&#x60; and &#x60;opt_in_source&#x60; properties depending on the [Confirmed Opt-In](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5533-obtain-permission-to-send-email-campaigns-to-your-contacts-by-using-confirmed-opt-in) Constant Contact account setting:  If Confirmed Opt-in is _enabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as &#x60;pending_confirmation&#x60; for new contacts. If Confirmed Opt-in is _disabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as explicit and the &#x60;opt_in_source&#x60; property as &#x60;Contact&#x60; for new contacts. Updated contacts have their &#x60;permission_to_send&#x60; property set as explicit.       
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateContactRequest">A JSON request body payload that contains the contact resource you are creating or updating. The request body must contain the &#x60;email_address&#x60; property and &#x60;list_memberships&#x60; array, or the &#x60;sms_channel&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateOrUpdateContact200Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateOrUpdateContact200Response> CreateOrUpdateContactWithHttpInfo(CreateOrUpdateContactRequest createOrUpdateContactRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createOrUpdateContactRequest' is set
            if (createOrUpdateContactRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createOrUpdateContactRequest' when calling ContactsApi->CreateOrUpdateContact");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrUpdateContactRequest;

            localVarRequestOptions.Operation = "ContactsApi.CreateOrUpdateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateOrUpdateContact200Response>("/contacts/sign_up_form", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create or Update a Contact Use this method to create a new contact or update an existing contact. In the request body, this method requires including the &#x60;list_memberships&#x60; array as well as either the contact&#39;s &#x60;email_address&#x60; string or &#x60;sms_channel&#x60; object which includes the contact&#39;s SMS number. The information you specify determines if a new contact is either created (the email address or SMS number does not already exist in the account), or if an existing contact is updated (the email address or SMS number already exists). The SMS product feature does not need to be enabled to include a contacts SMS details.  Updates to existing contacts are partial updates. This method only updates the contact properties you include in the request body. Updates append new contact lists or custom fields to the existing &#x60;list_memberships&#x60; or &#x60;custom_fields&#x60; arrays. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt; When this method creates a new contact, it returns a 201 response code.When this method updates an existing contact, it returns a 200 response code. Updating a deleted contact restores the contact.  The method automatically modifies the contact&#39;s &#x60;permission_to_send&#x60; and &#x60;opt_in_source&#x60; properties depending on the [Confirmed Opt-In](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5533-obtain-permission-to-send-email-campaigns-to-your-contacts-by-using-confirmed-opt-in) Constant Contact account setting:  If Confirmed Opt-in is _enabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as &#x60;pending_confirmation&#x60; for new contacts. If Confirmed Opt-in is _disabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as explicit and the &#x60;opt_in_source&#x60; property as &#x60;Contact&#x60; for new contacts. Updated contacts have their &#x60;permission_to_send&#x60; property set as explicit.       
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateContactRequest">A JSON request body payload that contains the contact resource you are creating or updating. The request body must contain the &#x60;email_address&#x60; property and &#x60;list_memberships&#x60; array, or the &#x60;sms_channel&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateOrUpdateContact200Response</returns>
        public async System.Threading.Tasks.Task<CreateOrUpdateContact200Response> CreateOrUpdateContactAsync(CreateOrUpdateContactRequest createOrUpdateContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateOrUpdateContact200Response> localVarResponse = await CreateOrUpdateContactWithHttpInfoAsync(createOrUpdateContactRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create or Update a Contact Use this method to create a new contact or update an existing contact. In the request body, this method requires including the &#x60;list_memberships&#x60; array as well as either the contact&#39;s &#x60;email_address&#x60; string or &#x60;sms_channel&#x60; object which includes the contact&#39;s SMS number. The information you specify determines if a new contact is either created (the email address or SMS number does not already exist in the account), or if an existing contact is updated (the email address or SMS number already exists). The SMS product feature does not need to be enabled to include a contacts SMS details.  Updates to existing contacts are partial updates. This method only updates the contact properties you include in the request body. Updates append new contact lists or custom fields to the existing &#x60;list_memberships&#x60; or &#x60;custom_fields&#x60; arrays. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt; When this method creates a new contact, it returns a 201 response code.When this method updates an existing contact, it returns a 200 response code. Updating a deleted contact restores the contact.  The method automatically modifies the contact&#39;s &#x60;permission_to_send&#x60; and &#x60;opt_in_source&#x60; properties depending on the [Confirmed Opt-In](https://knowledgebase.constantcontact.com/articles/KnowledgeBase/5533-obtain-permission-to-send-email-campaigns-to-your-contacts-by-using-confirmed-opt-in) Constant Contact account setting:  If Confirmed Opt-in is _enabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as &#x60;pending_confirmation&#x60; for new contacts. If Confirmed Opt-in is _disabled_, this method automatically sets the &#x60;permission_to_send&#x60; property as explicit and the &#x60;opt_in_source&#x60; property as &#x60;Contact&#x60; for new contacts. Updated contacts have their &#x60;permission_to_send&#x60; property set as explicit.       
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createOrUpdateContactRequest">A JSON request body payload that contains the contact resource you are creating or updating. The request body must contain the &#x60;email_address&#x60; property and &#x60;list_memberships&#x60; array, or the &#x60;sms_channel&#x60; object.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateOrUpdateContact200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateOrUpdateContact200Response>> CreateOrUpdateContactWithHttpInfoAsync(CreateOrUpdateContactRequest createOrUpdateContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createOrUpdateContactRequest' is set
            if (createOrUpdateContactRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createOrUpdateContactRequest' when calling ContactsApi->CreateOrUpdateContact");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createOrUpdateContactRequest;

            localVarRequestOptions.Operation = "ContactsApi.CreateOrUpdateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateOrUpdateContact200Response>("/contacts/sign_up_form", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateOrUpdateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE a Contact Deletes the contact identified by the contact_id path parameter. Deleted contacts won&#39;t receive email from you, and they don&#39;t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be revived, or added back to an account. Learn how to [revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to DELETE</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteContact(string contactId, int operationIndex = 0)
        {
            DeleteContactWithHttpInfo(contactId);
        }

        /// <summary>
        /// DELETE a Contact Deletes the contact identified by the contact_id path parameter. Deleted contacts won&#39;t receive email from you, and they don&#39;t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be revived, or added back to an account. Learn how to [revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to DELETE</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ConstantContactApi.Client.ApiResponse<Object> DeleteContactWithHttpInfo(string contactId, int operationIndex = 0)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->DeleteContact");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.DeleteContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/contacts/{contact_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE a Contact Deletes the contact identified by the contact_id path parameter. Deleted contacts won&#39;t receive email from you, and they don&#39;t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be revived, or added back to an account. Learn how to [revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to DELETE</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteContactAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteContactWithHttpInfoAsync(contactId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// DELETE a Contact Deletes the contact identified by the contact_id path parameter. Deleted contacts won&#39;t receive email from you, and they don&#39;t count as active contacts. Unlike unsubscribed contacts, deleted contacts can be revived, or added back to an account. Learn how to [revive deleted contacts](/api_guide/contacts_delete.html#revive).
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to DELETE</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<Object>> DeleteContactWithHttpInfoAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->DeleteContact");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.DeleteContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/contacts/{contact_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Contacts Collection Use this method to return a collection of contacts. Use the query parameters to search for contacts that match specific contact properties and sub-resource properties as criteria. For example, you can search using the contact&#39;s &#x60;email&#x60; address, &#x60;lists&#x60; memberships, and by the date range that a contact was created or updated. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. Use the &#x60;include&#x60; query parameter to include contact sub-resources in the response and &#x60;include_count&#x60; to include the total number of contacts that meet your specified search criteria.  By default, this method returns all contacts that are not deleted. Use the &#x60;status&#x60; query parameter with the value &#x60;all&#x60; to return all contacts including deleted contacts.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Use the &#x60;status&#x60; query parameter to search for contacts by status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;active&#x60;, &#x60;deleted&#x60;, &#x60;not_set&#x60;, &#x60;pending_confirmation&#x60;, &#x60;temp_hold&#x60;, and &#x60;unsubscribed&#x60;. (optional)</param>
        /// <param name="email">Use the &#x60;email&#x60; query parameter to search for a contact using a specific email address. (optional)</param>
        /// <param name="lists">Use the &#x60;lists&#x60; query parameter to search for contacts that are members of one or more specified lists. Use a comma to separate multiple &#x60;list_id&#x60; values, up to a maximum of 25. (optional)</param>
        /// <param name="segmentId">Use to get contacts that meet the segment criteria for a single specified &#x60;segment_id&#x60;. This query parameter can only be combined with the limit query parameter. When using the &#x60;segment_id&#x60; query parameter, the V3 API may return a 202 response code instead of a 200 response. The 202 response code indicates that your request has been accepted, but not fully completed. Retry sending your API request to return the completed results and a 200 response code. (optional)</param>
        /// <param name="tags">Use to get contact details for up to 50 specified tags. Use a comma to separate each &#x60;tag_id&#x60;. (optional)</param>
        /// <param name="updatedAfter">Use &#x60;updated_after&#x60; to search for contacts that have been updated after the date you specify. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="updatedBefore">Use &#x60;updated_before&#x60; to search for contacts that have been updated before a specified date. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdAfter">Use &#x60;created_after&#x60; to search for contacts created after a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdBefore">Use &#x60;created_before&#x60; to search for contacts created before a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="optoutAfter">Use &#x60;optout_after&#x60; to search for contacts that unsubscribed after a specified date. (optional)</param>
        /// <param name="optoutBefore">Use &#x60;optout_before&#x60; to search for contacts that unsubscribed before a specified date. (optional)</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;taggings&#x60;, &#x60;notes&#x60;,&#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;. (optional)</param>
        /// <param name="smsStatus">Use to get contacts by their SMS status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;explicit&#x60;, &#x60;unsubscribed&#x60;, &#x60;pending_confirmation&#x60;, &#x60;not_set&#x60;. (optional)</param>
        /// <param name="includeCount">Set &#x60;include_count&#x3D;true&#x60; to include the total number of contacts (&#x60;contacts_count&#x60;) that meet all search criteria in the response body. (optional)</param>
        /// <param name="limit">Specifies the number of results displayed per page of output in the response, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllContacts200Response</returns>
        public GetAllContacts200Response GetAllContacts(string? status = default(string?), string? email = default(string?), string? lists = default(string?), string? segmentId = default(string?), Guid? tags = default(Guid?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? optoutAfter = default(DateTime?), DateTime? optoutBefore = default(DateTime?), string? include = default(string?), string? smsStatus = default(string?), bool? includeCount = default(bool?), int? limit = default(int?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAllContacts200Response> localVarResponse = GetAllContactsWithHttpInfo(status, email, lists, segmentId, tags, updatedAfter, updatedBefore, createdAfter, createdBefore, optoutAfter, optoutBefore, include, smsStatus, includeCount, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Contacts Collection Use this method to return a collection of contacts. Use the query parameters to search for contacts that match specific contact properties and sub-resource properties as criteria. For example, you can search using the contact&#39;s &#x60;email&#x60; address, &#x60;lists&#x60; memberships, and by the date range that a contact was created or updated. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. Use the &#x60;include&#x60; query parameter to include contact sub-resources in the response and &#x60;include_count&#x60; to include the total number of contacts that meet your specified search criteria.  By default, this method returns all contacts that are not deleted. Use the &#x60;status&#x60; query parameter with the value &#x60;all&#x60; to return all contacts including deleted contacts.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Use the &#x60;status&#x60; query parameter to search for contacts by status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;active&#x60;, &#x60;deleted&#x60;, &#x60;not_set&#x60;, &#x60;pending_confirmation&#x60;, &#x60;temp_hold&#x60;, and &#x60;unsubscribed&#x60;. (optional)</param>
        /// <param name="email">Use the &#x60;email&#x60; query parameter to search for a contact using a specific email address. (optional)</param>
        /// <param name="lists">Use the &#x60;lists&#x60; query parameter to search for contacts that are members of one or more specified lists. Use a comma to separate multiple &#x60;list_id&#x60; values, up to a maximum of 25. (optional)</param>
        /// <param name="segmentId">Use to get contacts that meet the segment criteria for a single specified &#x60;segment_id&#x60;. This query parameter can only be combined with the limit query parameter. When using the &#x60;segment_id&#x60; query parameter, the V3 API may return a 202 response code instead of a 200 response. The 202 response code indicates that your request has been accepted, but not fully completed. Retry sending your API request to return the completed results and a 200 response code. (optional)</param>
        /// <param name="tags">Use to get contact details for up to 50 specified tags. Use a comma to separate each &#x60;tag_id&#x60;. (optional)</param>
        /// <param name="updatedAfter">Use &#x60;updated_after&#x60; to search for contacts that have been updated after the date you specify. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="updatedBefore">Use &#x60;updated_before&#x60; to search for contacts that have been updated before a specified date. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdAfter">Use &#x60;created_after&#x60; to search for contacts created after a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdBefore">Use &#x60;created_before&#x60; to search for contacts created before a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="optoutAfter">Use &#x60;optout_after&#x60; to search for contacts that unsubscribed after a specified date. (optional)</param>
        /// <param name="optoutBefore">Use &#x60;optout_before&#x60; to search for contacts that unsubscribed before a specified date. (optional)</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;taggings&#x60;, &#x60;notes&#x60;,&#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;. (optional)</param>
        /// <param name="smsStatus">Use to get contacts by their SMS status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;explicit&#x60;, &#x60;unsubscribed&#x60;, &#x60;pending_confirmation&#x60;, &#x60;not_set&#x60;. (optional)</param>
        /// <param name="includeCount">Set &#x60;include_count&#x3D;true&#x60; to include the total number of contacts (&#x60;contacts_count&#x60;) that meet all search criteria in the response body. (optional)</param>
        /// <param name="limit">Specifies the number of results displayed per page of output in the response, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllContacts200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetAllContacts200Response> GetAllContactsWithHttpInfo(string? status = default(string?), string? email = default(string?), string? lists = default(string?), string? segmentId = default(string?), Guid? tags = default(Guid?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? optoutAfter = default(DateTime?), DateTime? optoutBefore = default(DateTime?), string? include = default(string?), string? smsStatus = default(string?), bool? includeCount = default(bool?), int? limit = default(int?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (lists != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "lists", lists));
            }
            if (segmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "segment_id", segmentId));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "updated_after", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "updated_before", updatedBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (optoutAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "optout_after", optoutAfter));
            }
            if (optoutBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "optout_before", optoutBefore));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (smsStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "sms_status", smsStatus));
            }
            if (includeCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include_count", includeCount));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ContactsApi.GetAllContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllContacts200Response>("/contacts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Contacts Collection Use this method to return a collection of contacts. Use the query parameters to search for contacts that match specific contact properties and sub-resource properties as criteria. For example, you can search using the contact&#39;s &#x60;email&#x60; address, &#x60;lists&#x60; memberships, and by the date range that a contact was created or updated. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. Use the &#x60;include&#x60; query parameter to include contact sub-resources in the response and &#x60;include_count&#x60; to include the total number of contacts that meet your specified search criteria.  By default, this method returns all contacts that are not deleted. Use the &#x60;status&#x60; query parameter with the value &#x60;all&#x60; to return all contacts including deleted contacts.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Use the &#x60;status&#x60; query parameter to search for contacts by status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;active&#x60;, &#x60;deleted&#x60;, &#x60;not_set&#x60;, &#x60;pending_confirmation&#x60;, &#x60;temp_hold&#x60;, and &#x60;unsubscribed&#x60;. (optional)</param>
        /// <param name="email">Use the &#x60;email&#x60; query parameter to search for a contact using a specific email address. (optional)</param>
        /// <param name="lists">Use the &#x60;lists&#x60; query parameter to search for contacts that are members of one or more specified lists. Use a comma to separate multiple &#x60;list_id&#x60; values, up to a maximum of 25. (optional)</param>
        /// <param name="segmentId">Use to get contacts that meet the segment criteria for a single specified &#x60;segment_id&#x60;. This query parameter can only be combined with the limit query parameter. When using the &#x60;segment_id&#x60; query parameter, the V3 API may return a 202 response code instead of a 200 response. The 202 response code indicates that your request has been accepted, but not fully completed. Retry sending your API request to return the completed results and a 200 response code. (optional)</param>
        /// <param name="tags">Use to get contact details for up to 50 specified tags. Use a comma to separate each &#x60;tag_id&#x60;. (optional)</param>
        /// <param name="updatedAfter">Use &#x60;updated_after&#x60; to search for contacts that have been updated after the date you specify. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="updatedBefore">Use &#x60;updated_before&#x60; to search for contacts that have been updated before a specified date. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdAfter">Use &#x60;created_after&#x60; to search for contacts created after a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdBefore">Use &#x60;created_before&#x60; to search for contacts created before a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="optoutAfter">Use &#x60;optout_after&#x60; to search for contacts that unsubscribed after a specified date. (optional)</param>
        /// <param name="optoutBefore">Use &#x60;optout_before&#x60; to search for contacts that unsubscribed before a specified date. (optional)</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;taggings&#x60;, &#x60;notes&#x60;,&#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;. (optional)</param>
        /// <param name="smsStatus">Use to get contacts by their SMS status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;explicit&#x60;, &#x60;unsubscribed&#x60;, &#x60;pending_confirmation&#x60;, &#x60;not_set&#x60;. (optional)</param>
        /// <param name="includeCount">Set &#x60;include_count&#x3D;true&#x60; to include the total number of contacts (&#x60;contacts_count&#x60;) that meet all search criteria in the response body. (optional)</param>
        /// <param name="limit">Specifies the number of results displayed per page of output in the response, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllContacts200Response</returns>
        public async System.Threading.Tasks.Task<GetAllContacts200Response> GetAllContactsAsync(string? status = default(string?), string? email = default(string?), string? lists = default(string?), string? segmentId = default(string?), Guid? tags = default(Guid?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? optoutAfter = default(DateTime?), DateTime? optoutBefore = default(DateTime?), string? include = default(string?), string? smsStatus = default(string?), bool? includeCount = default(bool?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAllContacts200Response> localVarResponse = await GetAllContactsWithHttpInfoAsync(status, email, lists, segmentId, tags, updatedAfter, updatedBefore, createdAfter, createdBefore, optoutAfter, optoutBefore, include, smsStatus, includeCount, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Contacts Collection Use this method to return a collection of contacts. Use the query parameters to search for contacts that match specific contact properties and sub-resource properties as criteria. For example, you can search using the contact&#39;s &#x60;email&#x60; address, &#x60;lists&#x60; memberships, and by the date range that a contact was created or updated. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. Use the &#x60;include&#x60; query parameter to include contact sub-resources in the response and &#x60;include_count&#x60; to include the total number of contacts that meet your specified search criteria.  By default, this method returns all contacts that are not deleted. Use the &#x60;status&#x60; query parameter with the value &#x60;all&#x60; to return all contacts including deleted contacts.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="status">Use the &#x60;status&#x60; query parameter to search for contacts by status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;active&#x60;, &#x60;deleted&#x60;, &#x60;not_set&#x60;, &#x60;pending_confirmation&#x60;, &#x60;temp_hold&#x60;, and &#x60;unsubscribed&#x60;. (optional)</param>
        /// <param name="email">Use the &#x60;email&#x60; query parameter to search for a contact using a specific email address. (optional)</param>
        /// <param name="lists">Use the &#x60;lists&#x60; query parameter to search for contacts that are members of one or more specified lists. Use a comma to separate multiple &#x60;list_id&#x60; values, up to a maximum of 25. (optional)</param>
        /// <param name="segmentId">Use to get contacts that meet the segment criteria for a single specified &#x60;segment_id&#x60;. This query parameter can only be combined with the limit query parameter. When using the &#x60;segment_id&#x60; query parameter, the V3 API may return a 202 response code instead of a 200 response. The 202 response code indicates that your request has been accepted, but not fully completed. Retry sending your API request to return the completed results and a 200 response code. (optional)</param>
        /// <param name="tags">Use to get contact details for up to 50 specified tags. Use a comma to separate each &#x60;tag_id&#x60;. (optional)</param>
        /// <param name="updatedAfter">Use &#x60;updated_after&#x60; to search for contacts that have been updated after the date you specify. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="updatedBefore">Use &#x60;updated_before&#x60; to search for contacts that have been updated before a specified date. To search for updated contacts within a date range, specify both &#x60;updated_after&#x60; and &#x60;updated_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdAfter">Use &#x60;created_after&#x60; to search for contacts created after a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="createdBefore">Use &#x60;created_before&#x60; to search for contacts created before a specified date. To search for contacts created within a date range, specify both &#x60;created_after&#x60; and &#x60;created_before&#x60; dates. Accepts ISO-8601 formatted dates. (optional)</param>
        /// <param name="optoutAfter">Use &#x60;optout_after&#x60; to search for contacts that unsubscribed after a specified date. (optional)</param>
        /// <param name="optoutBefore">Use &#x60;optout_before&#x60; to search for contacts that unsubscribed before a specified date. (optional)</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;taggings&#x60;, &#x60;notes&#x60;,&#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;. (optional)</param>
        /// <param name="smsStatus">Use to get contacts by their SMS status. This parameter accepts one or more comma separated values: &#x60;all&#x60;, &#x60;explicit&#x60;, &#x60;unsubscribed&#x60;, &#x60;pending_confirmation&#x60;, &#x60;not_set&#x60;. (optional)</param>
        /// <param name="includeCount">Set &#x60;include_count&#x3D;true&#x60; to include the total number of contacts (&#x60;contacts_count&#x60;) that meet all search criteria in the response body. (optional)</param>
        /// <param name="limit">Specifies the number of results displayed per page of output in the response, from 1 - 500, default &#x3D; 50. (optional, default to 50)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllContacts200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAllContacts200Response>> GetAllContactsWithHttpInfoAsync(string? status = default(string?), string? email = default(string?), string? lists = default(string?), string? segmentId = default(string?), Guid? tags = default(Guid?), DateTime? updatedAfter = default(DateTime?), DateTime? updatedBefore = default(DateTime?), DateTime? createdAfter = default(DateTime?), DateTime? createdBefore = default(DateTime?), DateTime? optoutAfter = default(DateTime?), DateTime? optoutBefore = default(DateTime?), string? include = default(string?), string? smsStatus = default(string?), bool? includeCount = default(bool?), int? limit = default(int?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (status != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "status", status));
            }
            if (email != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "email", email));
            }
            if (lists != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "lists", lists));
            }
            if (segmentId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "segment_id", segmentId));
            }
            if (tags != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "tags", tags));
            }
            if (updatedAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "updated_after", updatedAfter));
            }
            if (updatedBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "updated_before", updatedBefore));
            }
            if (createdAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "created_after", createdAfter));
            }
            if (createdBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "created_before", createdBefore));
            }
            if (optoutAfter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "optout_after", optoutAfter));
            }
            if (optoutBefore != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "optout_before", optoutBefore));
            }
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }
            if (smsStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "sms_status", smsStatus));
            }
            if (includeCount != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include_count", includeCount));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "ContactsApi.GetAllContacts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllContacts200Response>("/contacts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllContacts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Contact This endpoint GETs a specific contact resource (contact_id). Use the &#x60;include&#x60; query parameter to add any of the available contact sub-resources to the response payload.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to GET</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;, &#x60;notes&#x60;, and &#x60;taggings&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactById200Response</returns>
        public GetContactById200Response GetContactById(string contactId, string? include = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetContactById200Response> localVarResponse = GetContactByIdWithHttpInfo(contactId, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Contact This endpoint GETs a specific contact resource (contact_id). Use the &#x60;include&#x60; query parameter to add any of the available contact sub-resources to the response payload.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to GET</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;, &#x60;notes&#x60;, and &#x60;taggings&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactById200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetContactById200Response> GetContactByIdWithHttpInfo(string contactId, string? include = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetContactById");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "ContactsApi.GetContactById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContactById200Response>("/contacts/{contact_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Contact This endpoint GETs a specific contact resource (contact_id). Use the &#x60;include&#x60; query parameter to add any of the available contact sub-resources to the response payload.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to GET</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;, &#x60;notes&#x60;, and &#x60;taggings&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactById200Response</returns>
        public async System.Threading.Tasks.Task<GetContactById200Response> GetContactByIdAsync(string contactId, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetContactById200Response> localVarResponse = await GetContactByIdWithHttpInfoAsync(contactId, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Contact This endpoint GETs a specific contact resource (contact_id). Use the &#x60;include&#x60; query parameter to add any of the available contact sub-resources to the response payload.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to GET</param>
        /// <param name="include">Use &#x60;include&#x60; to specify which contact sub-resources to include in the response. Use a comma to separate multiple sub-resources. Valid values: &#x60;custom_fields&#x60;, &#x60;list_memberships&#x60;, &#x60;phone_numbers&#x60;, &#x60;street_addresses&#x60;, &#x60;notes&#x60;, and &#x60;taggings&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactById200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetContactById200Response>> GetContactByIdWithHttpInfoAsync(string contactId, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetContactById");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "ContactsApi.GetContactById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContactById200Response>("/contacts/{contact_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Contact Consent Counts Use to get the total contacts count for the account and the total contact-consent counts for each consent state. Optionally, to include the total number of contacts that subscribed within the last 30 days in the results, use &#x60;new_subscribers&#x60; in the &#x60;include&#x60; query parameter. To optimize open rates, reduce spam reports, and help grow your business,  you must value your contact&#39;s consent to receive or to not receive your emails.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Use to return the total number of contacts that subscribed within the last 30 days in the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactCounts200Response</returns>
        public GetContactCounts200Response GetContactCounts(string? include = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetContactCounts200Response> localVarResponse = GetContactCountsWithHttpInfo(include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Contact Consent Counts Use to get the total contacts count for the account and the total contact-consent counts for each consent state. Optionally, to include the total number of contacts that subscribed within the last 30 days in the results, use &#x60;new_subscribers&#x60; in the &#x60;include&#x60; query parameter. To optimize open rates, reduce spam reports, and help grow your business,  you must value your contact&#39;s consent to receive or to not receive your emails.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Use to return the total number of contacts that subscribed within the last 30 days in the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactCounts200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetContactCounts200Response> GetContactCountsWithHttpInfo(string? include = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "ContactsApi.GetContactCounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContactCounts200Response>("/contacts/counts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactCounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Contact Consent Counts Use to get the total contacts count for the account and the total contact-consent counts for each consent state. Optionally, to include the total number of contacts that subscribed within the last 30 days in the results, use &#x60;new_subscribers&#x60; in the &#x60;include&#x60; query parameter. To optimize open rates, reduce spam reports, and help grow your business,  you must value your contact&#39;s consent to receive or to not receive your emails.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Use to return the total number of contacts that subscribed within the last 30 days in the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactCounts200Response</returns>
        public async System.Threading.Tasks.Task<GetContactCounts200Response> GetContactCountsAsync(string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetContactCounts200Response> localVarResponse = await GetContactCountsWithHttpInfoAsync(include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Contact Consent Counts Use to get the total contacts count for the account and the total contact-consent counts for each consent state. Optionally, to include the total number of contacts that subscribed within the last 30 days in the results, use &#x60;new_subscribers&#x60; in the &#x60;include&#x60; query parameter. To optimize open rates, reduce spam reports, and help grow your business,  you must value your contact&#39;s consent to receive or to not receive your emails.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="include">Use to return the total number of contacts that subscribed within the last 30 days in the results. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactCounts200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetContactCounts200Response>> GetContactCountsWithHttpInfoAsync(string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "ContactsApi.GetContactCounts";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContactCounts200Response>("/contacts/counts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactCounts", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a collection of V2 and V3 API contact IDs &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 contact ids to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  This GET call retrieves a collection of cross-referenced contact sequence IDs (&#x60;id&#x60; used in the V2 API) and UUIDs (&#x60;contact_id&#x60; used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the &#x60;sequence_ids&#x60; query parameter to specify a set of comma delimited V2 contacts ids to cross-referenced with their V3 &#x60;contact_ids&#x60;. See [Migrating to V3](/api_guide/migration_overview.html) to learn more.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceIds">Comma delimited list of V2 API contact &#x60;ids&#x60; to cross-reference with the V3 API &#x60;contact_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactIdXrefs200Response</returns>
        public GetContactIdXrefs200Response GetContactIdXrefs(string sequenceIds, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetContactIdXrefs200Response> localVarResponse = GetContactIdXrefsWithHttpInfo(sequenceIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a collection of V2 and V3 API contact IDs &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 contact ids to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  This GET call retrieves a collection of cross-referenced contact sequence IDs (&#x60;id&#x60; used in the V2 API) and UUIDs (&#x60;contact_id&#x60; used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the &#x60;sequence_ids&#x60; query parameter to specify a set of comma delimited V2 contacts ids to cross-referenced with their V3 &#x60;contact_ids&#x60;. See [Migrating to V3](/api_guide/migration_overview.html) to learn more.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceIds">Comma delimited list of V2 API contact &#x60;ids&#x60; to cross-reference with the V3 API &#x60;contact_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactIdXrefs200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetContactIdXrefs200Response> GetContactIdXrefsWithHttpInfo(string sequenceIds, int operationIndex = 0)
        {
            // verify the required parameter 'sequenceIds' is set
            if (sequenceIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'sequenceIds' when calling ContactsApi->GetContactIdXrefs");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "sequence_ids", sequenceIds));

            localVarRequestOptions.Operation = "ContactsApi.GetContactIdXrefs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContactIdXrefs200Response>("/contacts/contact_id_xrefs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactIdXrefs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a collection of V2 and V3 API contact IDs &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 contact ids to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  This GET call retrieves a collection of cross-referenced contact sequence IDs (&#x60;id&#x60; used in the V2 API) and UUIDs (&#x60;contact_id&#x60; used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the &#x60;sequence_ids&#x60; query parameter to specify a set of comma delimited V2 contacts ids to cross-referenced with their V3 &#x60;contact_ids&#x60;. See [Migrating to V3](/api_guide/migration_overview.html) to learn more.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceIds">Comma delimited list of V2 API contact &#x60;ids&#x60; to cross-reference with the V3 API &#x60;contact_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactIdXrefs200Response</returns>
        public async System.Threading.Tasks.Task<GetContactIdXrefs200Response> GetContactIdXrefsAsync(string sequenceIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetContactIdXrefs200Response> localVarResponse = await GetContactIdXrefsWithHttpInfoAsync(sequenceIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a collection of V2 and V3 API contact IDs &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 contact ids to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  This GET call retrieves a collection of cross-referenced contact sequence IDs (&#x60;id&#x60; used in the V2 API) and UUIDs (&#x60;contact_id&#x60; used in the V3 API). This endpoint is intended for developers who have an existing V2 API integration, and are migrating their users to a new V3 API integration. The V2 and V3 APIs use different resource ID formats. Use the &#x60;sequence_ids&#x60; query parameter to specify a set of comma delimited V2 contacts ids to cross-referenced with their V3 &#x60;contact_ids&#x60;. See [Migrating to V3](/api_guide/migration_overview.html) to learn more.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sequenceIds">Comma delimited list of V2 API contact &#x60;ids&#x60; to cross-reference with the V3 API &#x60;contact_id&#x60; value. Endpoint accepts a maximum of 500 ids at a time.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactIdXrefs200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetContactIdXrefs200Response>> GetContactIdXrefsWithHttpInfoAsync(string sequenceIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'sequenceIds' is set
            if (sequenceIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'sequenceIds' when calling ContactsApi->GetContactIdXrefs");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "sequence_ids", sequenceIds));

            localVarRequestOptions.Operation = "ContactsApi.GetContactIdXrefs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContactIdXrefs200Response>("/contacts/contact_id_xrefs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactIdXrefs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET SMS Engagement History for a Contact Use this method to return SMS engagement details for a contact, such as SMS consent and advertising frequency details.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s unique ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetSmsEngagementHistory200ResponseInner&gt;</returns>
        public List<GetSmsEngagementHistory200ResponseInner> GetSmsEngagementHistory(string contactId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<List<GetSmsEngagementHistory200ResponseInner>> localVarResponse = GetSmsEngagementHistoryWithHttpInfo(contactId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET SMS Engagement History for a Contact Use this method to return SMS engagement details for a contact, such as SMS consent and advertising frequency details.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s unique ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetSmsEngagementHistory200ResponseInner&gt;</returns>
        public ConstantContactApi.Client.ApiResponse<List<GetSmsEngagementHistory200ResponseInner>> GetSmsEngagementHistoryWithHttpInfo(string contactId, int operationIndex = 0)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetSmsEngagementHistory");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.GetSmsEngagementHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetSmsEngagementHistory200ResponseInner>>("/contacts/sms_engagement_history/{contact_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmsEngagementHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET SMS Engagement History for a Contact Use this method to return SMS engagement details for a contact, such as SMS consent and advertising frequency details.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s unique ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetSmsEngagementHistory200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetSmsEngagementHistory200ResponseInner>> GetSmsEngagementHistoryAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<List<GetSmsEngagementHistory200ResponseInner>> localVarResponse = await GetSmsEngagementHistoryWithHttpInfoAsync(contactId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET SMS Engagement History for a Contact Use this method to return SMS engagement details for a contact, such as SMS consent and advertising frequency details.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The contact&#39;s unique ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetSmsEngagementHistory200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<List<GetSmsEngagementHistory200ResponseInner>>> GetSmsEngagementHistoryWithHttpInfoAsync(string contactId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->GetSmsEngagementHistory");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter

            localVarRequestOptions.Operation = "ContactsApi.GetSmsEngagementHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetSmsEngagementHistory200ResponseInner>>("/contacts/sms_engagement_history/{contact_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSmsEngagementHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT Resubscribe a Contact Use this endpoint to send a confirmation resubscribe email to a contact in order to get their confirmation to resubscribe. This endpoint also adds the resubscribed contact to the contact lists you specify in the request body. You can only send a resubscribe email to the unsubscribed contact once. The contact is not resubscribed until after you receive their confirmation. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The ID that uniquely identifies the contact to resubscribe.</param>
        /// <param name="resubscribeContactRequest">The JSON payload used to specify one (or more) contact lists to which the contact requested to be resubscribed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ResubscribeContact(string contactId, ResubscribeContactRequest resubscribeContactRequest, int operationIndex = 0)
        {
            ResubscribeContactWithHttpInfo(contactId, resubscribeContactRequest);
        }

        /// <summary>
        /// PUT Resubscribe a Contact Use this endpoint to send a confirmation resubscribe email to a contact in order to get their confirmation to resubscribe. This endpoint also adds the resubscribed contact to the contact lists you specify in the request body. You can only send a resubscribe email to the unsubscribed contact once. The contact is not resubscribed until after you receive their confirmation. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The ID that uniquely identifies the contact to resubscribe.</param>
        /// <param name="resubscribeContactRequest">The JSON payload used to specify one (or more) contact lists to which the contact requested to be resubscribed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ConstantContactApi.Client.ApiResponse<Object> ResubscribeContactWithHttpInfo(string contactId, ResubscribeContactRequest resubscribeContactRequest, int operationIndex = 0)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->ResubscribeContact");
            }

            // verify the required parameter 'resubscribeContactRequest' is set
            if (resubscribeContactRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'resubscribeContactRequest' when calling ContactsApi->ResubscribeContact");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = resubscribeContactRequest;

            localVarRequestOptions.Operation = "ContactsApi.ResubscribeContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/contacts/resubscribe/{contact_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResubscribeContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT Resubscribe a Contact Use this endpoint to send a confirmation resubscribe email to a contact in order to get their confirmation to resubscribe. This endpoint also adds the resubscribed contact to the contact lists you specify in the request body. You can only send a resubscribe email to the unsubscribed contact once. The contact is not resubscribed until after you receive their confirmation. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The ID that uniquely identifies the contact to resubscribe.</param>
        /// <param name="resubscribeContactRequest">The JSON payload used to specify one (or more) contact lists to which the contact requested to be resubscribed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ResubscribeContactAsync(string contactId, ResubscribeContactRequest resubscribeContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ResubscribeContactWithHttpInfoAsync(contactId, resubscribeContactRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// PUT Resubscribe a Contact Use this endpoint to send a confirmation resubscribe email to a contact in order to get their confirmation to resubscribe. This endpoint also adds the resubscribed contact to the contact lists you specify in the request body. You can only send a resubscribe email to the unsubscribed contact once. The contact is not resubscribed until after you receive their confirmation. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">The ID that uniquely identifies the contact to resubscribe.</param>
        /// <param name="resubscribeContactRequest">The JSON payload used to specify one (or more) contact lists to which the contact requested to be resubscribed.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<Object>> ResubscribeContactWithHttpInfoAsync(string contactId, ResubscribeContactRequest resubscribeContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->ResubscribeContact");
            }

            // verify the required parameter 'resubscribeContactRequest' is set
            if (resubscribeContactRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'resubscribeContactRequest' when calling ContactsApi->ResubscribeContact");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = resubscribeContactRequest;

            localVarRequestOptions.Operation = "ContactsApi.ResubscribeContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/contacts/resubscribe/{contact_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ResubscribeContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) a Contact The PUT method updates an existing contact. You must include the &#x60;update_source&#x60; property in the PUT request payload. To restore  a deleted contact you must specify the &#x60;update_source&#x60; as &#x60;Account&#x60;. When updating any resource using PUT, all properties are updated, overwriting all previous values. Any properties left blank or not included in the request are overwritten with null value - however this does not apply to contact subresources.   Add or change any of the subresources by including them in the PUT request payload. Omitted subresources are not overwritten with null. If the contact being updated is deleted, the contact will be revived. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt; **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to update</param>
        /// <param name="updateContactRequest">JSON payload defining the contact object, with updates. Any properties left blank or not included in the PUT payload are overwritten with null value - does not apply to contact subresources.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactById200Response</returns>
        public GetContactById200Response UpdateContact(string contactId, UpdateContactRequest updateContactRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetContactById200Response> localVarResponse = UpdateContactWithHttpInfo(contactId, updateContactRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) a Contact The PUT method updates an existing contact. You must include the &#x60;update_source&#x60; property in the PUT request payload. To restore  a deleted contact you must specify the &#x60;update_source&#x60; as &#x60;Account&#x60;. When updating any resource using PUT, all properties are updated, overwriting all previous values. Any properties left blank or not included in the request are overwritten with null value - however this does not apply to contact subresources.   Add or change any of the subresources by including them in the PUT request payload. Omitted subresources are not overwritten with null. If the contact being updated is deleted, the contact will be revived. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt; **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to update</param>
        /// <param name="updateContactRequest">JSON payload defining the contact object, with updates. Any properties left blank or not included in the PUT payload are overwritten with null value - does not apply to contact subresources.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactById200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetContactById200Response> UpdateContactWithHttpInfo(string contactId, UpdateContactRequest updateContactRequest, int operationIndex = 0)
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->UpdateContact");
            }

            // verify the required parameter 'updateContactRequest' is set
            if (updateContactRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateContactRequest' when calling ContactsApi->UpdateContact");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = updateContactRequest;

            localVarRequestOptions.Operation = "ContactsApi.UpdateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GetContactById200Response>("/contacts/{contact_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) a Contact The PUT method updates an existing contact. You must include the &#x60;update_source&#x60; property in the PUT request payload. To restore  a deleted contact you must specify the &#x60;update_source&#x60; as &#x60;Account&#x60;. When updating any resource using PUT, all properties are updated, overwriting all previous values. Any properties left blank or not included in the request are overwritten with null value - however this does not apply to contact subresources.   Add or change any of the subresources by including them in the PUT request payload. Omitted subresources are not overwritten with null. If the contact being updated is deleted, the contact will be revived. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt; **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to update</param>
        /// <param name="updateContactRequest">JSON payload defining the contact object, with updates. Any properties left blank or not included in the PUT payload are overwritten with null value - does not apply to contact subresources.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactById200Response</returns>
        public async System.Threading.Tasks.Task<GetContactById200Response> UpdateContactAsync(string contactId, UpdateContactRequest updateContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetContactById200Response> localVarResponse = await UpdateContactWithHttpInfoAsync(contactId, updateContactRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) a Contact The PUT method updates an existing contact. You must include the &#x60;update_source&#x60; property in the PUT request payload. To restore  a deleted contact you must specify the &#x60;update_source&#x60; as &#x60;Account&#x60;. When updating any resource using PUT, all properties are updated, overwriting all previous values. Any properties left blank or not included in the request are overwritten with null value - however this does not apply to contact subresources.   Add or change any of the subresources by including them in the PUT request payload. Omitted subresources are not overwritten with null. If the contact being updated is deleted, the contact will be revived. If &#x60;email_address&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt; **Only use this method when a contact gives you their explicit permission to send them an email. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;  If &#x60;sms_channel&#x60; is specified: &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Only use this method when a contact gives you their explicit permission to send them an SMS. It is a violation of anti-spam and telemarketing laws, as well as a serious violation of the Constant Contact Terms of Service to use the Opt-in features of the API to opt a contact back in without his or her own action and consent.&lt;/p&gt;&lt;/div&gt;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contactId">Unique ID of contact to update</param>
        /// <param name="updateContactRequest">JSON payload defining the contact object, with updates. Any properties left blank or not included in the PUT payload are overwritten with null value - does not apply to contact subresources.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactById200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetContactById200Response>> UpdateContactWithHttpInfoAsync(string contactId, UpdateContactRequest updateContactRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'contactId' is set
            if (contactId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'contactId' when calling ContactsApi->UpdateContact");
            }

            // verify the required parameter 'updateContactRequest' is set
            if (updateContactRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateContactRequest' when calling ContactsApi->UpdateContact");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("contact_id", ConstantContactApi.Client.ClientUtils.ParameterToString(contactId)); // path parameter
            localVarRequestOptions.Data = updateContactRequest;

            localVarRequestOptions.Operation = "ContactsApi.UpdateContact";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GetContactById200Response>("/contacts/{contact_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateContact", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
