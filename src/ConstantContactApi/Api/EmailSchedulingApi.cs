/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailSchedulingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GET the HTML Preview of an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (&#x60;format_type&#x60; 5) use the Constant Contact account owner&#39;s contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignActivityPreview200Response</returns>
        GetEmailCampaignActivityPreview200Response GetEmailCampaignActivityPreview(Guid campaignActivityId, int operationIndex = 0);

        /// <summary>
        /// GET the HTML Preview of an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (&#x60;format_type&#x60; 5) use the Constant Contact account owner&#39;s contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignActivityPreview200Response</returns>
        ApiResponse<GetEmailCampaignActivityPreview200Response> GetEmailCampaignActivityPreviewWithHttpInfo(Guid campaignActivityId, int operationIndex = 0);
        /// <summary>
        /// GET an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in &#x60;SCHEDULED&#x60; status, this method returns an empty array and a 200 response code.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        List<GetEmailCampaignActivitySchedule200ResponseInner> GetEmailCampaignActivitySchedule(Guid campaignActivityId, int operationIndex = 0);

        /// <summary>
        /// GET an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in &#x60;SCHEDULED&#x60; status, this method returns an empty array and a 200 response code.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>> GetEmailCampaignActivityScheduleWithHttpInfo(Guid campaignActivityId, int operationIndex = 0);
        /// <summary>
        /// GET the Send History of an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEmailCampaignActivitySendHistory200ResponseInner&gt;</returns>
        List<GetEmailCampaignActivitySendHistory200ResponseInner> GetEmailCampaignActivitySendHistory(string campaignActivityId, int operationIndex = 0);

        /// <summary>
        /// GET the Send History of an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEmailCampaignActivitySendHistory200ResponseInner&gt;</returns>
        ApiResponse<List<GetEmailCampaignActivitySendHistory200ResponseInner>> GetEmailCampaignActivitySendHistoryWithHttpInfo(string campaignActivityId, int operationIndex = 0);
        /// <summary>
        /// POST (Create) an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the &#x60;scheduled_date&#x60; request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the &#x60;contact_list_ids&#x60; or &#x60;segment_ids&#x60; array to add contacts.  You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role and are in &#x60;DRAFT&#x60;, &#x60;DONE&#x60;, or &#x60;ERROR&#x60; status. When you schedule an email campaign activity in &#x60;DONE&#x60; status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="scheduleEmailCampaignActivityRequest">A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        List<GetEmailCampaignActivitySchedule200ResponseInner> ScheduleEmailCampaignActivity(Guid campaignActivityId, ScheduleEmailCampaignActivityRequest scheduleEmailCampaignActivityRequest, int operationIndex = 0);

        /// <summary>
        /// POST (Create) an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the &#x60;scheduled_date&#x60; request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the &#x60;contact_list_ids&#x60; or &#x60;segment_ids&#x60; array to add contacts.  You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role and are in &#x60;DRAFT&#x60;, &#x60;DONE&#x60;, or &#x60;ERROR&#x60; status. When you schedule an email campaign activity in &#x60;DONE&#x60; status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="scheduleEmailCampaignActivityRequest">A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>> ScheduleEmailCampaignActivityWithHttpInfo(Guid campaignActivityId, ScheduleEmailCampaignActivityRequest scheduleEmailCampaignActivityRequest, int operationIndex = 0);
        /// <summary>
        /// POST Test Send an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the &#x60;email_addresses&#x60; array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the &#x60;email_addresses&#x60; array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="testSendEmailCampaignActivityRequest">A JSON request body that contains the recipients of the test email and an optional personal message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void TestSendEmailCampaignActivity(Guid campaignActivityId, TestSendEmailCampaignActivityRequest testSendEmailCampaignActivityRequest, int operationIndex = 0);

        /// <summary>
        /// POST Test Send an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the &#x60;email_addresses&#x60; array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the &#x60;email_addresses&#x60; array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="testSendEmailCampaignActivityRequest">A JSON request body that contains the recipients of the test email and an optional personal message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TestSendEmailCampaignActivityWithHttpInfo(Guid campaignActivityId, TestSendEmailCampaignActivityRequest testSendEmailCampaignActivityRequest, int operationIndex = 0);
        /// <summary>
        /// DELETE an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in &#x60;SCHEDULED&#x60; status. Unscheduling reverts the email campaign activity to the status prior to &#x60;SCHEDULED&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void UnscheduleEmailCampaignActivity(Guid campaignActivityId, int operationIndex = 0);

        /// <summary>
        /// DELETE an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in &#x60;SCHEDULED&#x60; status. Unscheduling reverts the email campaign activity to the status prior to &#x60;SCHEDULED&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UnscheduleEmailCampaignActivityWithHttpInfo(Guid campaignActivityId, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailSchedulingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GET the HTML Preview of an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (&#x60;format_type&#x60; 5) use the Constant Contact account owner&#39;s contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignActivityPreview200Response</returns>
        System.Threading.Tasks.Task<GetEmailCampaignActivityPreview200Response> GetEmailCampaignActivityPreviewAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET the HTML Preview of an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (&#x60;format_type&#x60; 5) use the Constant Contact account owner&#39;s contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignActivityPreview200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailCampaignActivityPreview200Response>> GetEmailCampaignActivityPreviewWithHttpInfoAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in &#x60;SCHEDULED&#x60; status, this method returns an empty array and a 200 response code.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetEmailCampaignActivitySchedule200ResponseInner>> GetEmailCampaignActivityScheduleAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in &#x60;SCHEDULED&#x60; status, this method returns an empty array and a 200 response code.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>>> GetEmailCampaignActivityScheduleWithHttpInfoAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET the Send History of an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEmailCampaignActivitySendHistory200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetEmailCampaignActivitySendHistory200ResponseInner>> GetEmailCampaignActivitySendHistoryAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET the Send History of an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEmailCampaignActivitySendHistory200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetEmailCampaignActivitySendHistory200ResponseInner>>> GetEmailCampaignActivitySendHistoryWithHttpInfoAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// POST (Create) an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the &#x60;scheduled_date&#x60; request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the &#x60;contact_list_ids&#x60; or &#x60;segment_ids&#x60; array to add contacts.  You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role and are in &#x60;DRAFT&#x60;, &#x60;DONE&#x60;, or &#x60;ERROR&#x60; status. When you schedule an email campaign activity in &#x60;DONE&#x60; status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="scheduleEmailCampaignActivityRequest">A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetEmailCampaignActivitySchedule200ResponseInner>> ScheduleEmailCampaignActivityAsync(Guid campaignActivityId, ScheduleEmailCampaignActivityRequest scheduleEmailCampaignActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST (Create) an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the &#x60;scheduled_date&#x60; request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the &#x60;contact_list_ids&#x60; or &#x60;segment_ids&#x60; array to add contacts.  You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role and are in &#x60;DRAFT&#x60;, &#x60;DONE&#x60;, or &#x60;ERROR&#x60; status. When you schedule an email campaign activity in &#x60;DONE&#x60; status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="scheduleEmailCampaignActivityRequest">A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>>> ScheduleEmailCampaignActivityWithHttpInfoAsync(Guid campaignActivityId, ScheduleEmailCampaignActivityRequest scheduleEmailCampaignActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// POST Test Send an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the &#x60;email_addresses&#x60; array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the &#x60;email_addresses&#x60; array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="testSendEmailCampaignActivityRequest">A JSON request body that contains the recipients of the test email and an optional personal message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TestSendEmailCampaignActivityAsync(Guid campaignActivityId, TestSendEmailCampaignActivityRequest testSendEmailCampaignActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST Test Send an Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the &#x60;email_addresses&#x60; array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the &#x60;email_addresses&#x60; array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="testSendEmailCampaignActivityRequest">A JSON request body that contains the recipients of the test email and an optional personal message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TestSendEmailCampaignActivityWithHttpInfoAsync(Guid campaignActivityId, TestSendEmailCampaignActivityRequest testSendEmailCampaignActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DELETE an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in &#x60;SCHEDULED&#x60; status. Unscheduling reverts the email campaign activity to the status prior to &#x60;SCHEDULED&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UnscheduleEmailCampaignActivityAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DELETE an Email Campaign Activity Schedule
        /// </summary>
        /// <remarks>
        /// Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in &#x60;SCHEDULED&#x60; status. Unscheduling reverts the email campaign activity to the status prior to &#x60;SCHEDULED&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UnscheduleEmailCampaignActivityWithHttpInfoAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailSchedulingApi : IEmailSchedulingApiSync, IEmailSchedulingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailSchedulingApi : IEmailSchedulingApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSchedulingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailSchedulingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSchedulingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailSchedulingApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSchedulingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailSchedulingApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailSchedulingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailSchedulingApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GET the HTML Preview of an Email Campaign Activity Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (&#x60;format_type&#x60; 5) use the Constant Contact account owner&#39;s contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignActivityPreview200Response</returns>
        public GetEmailCampaignActivityPreview200Response GetEmailCampaignActivityPreview(Guid campaignActivityId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivityPreview200Response> localVarResponse = GetEmailCampaignActivityPreviewWithHttpInfo(campaignActivityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET the HTML Preview of an Email Campaign Activity Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (&#x60;format_type&#x60; 5) use the Constant Contact account owner&#39;s contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignActivityPreview200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivityPreview200Response> GetEmailCampaignActivityPreviewWithHttpInfo(Guid campaignActivityId, int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailSchedulingApi.GetEmailCampaignActivityPreview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailCampaignActivityPreview200Response>("/emails/activities/{campaign_activity_id}/previews", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivityPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET the HTML Preview of an Email Campaign Activity Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (&#x60;format_type&#x60; 5) use the Constant Contact account owner&#39;s contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignActivityPreview200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailCampaignActivityPreview200Response> GetEmailCampaignActivityPreviewAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivityPreview200Response> localVarResponse = await GetEmailCampaignActivityPreviewWithHttpInfoAsync(campaignActivityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET the HTML Preview of an Email Campaign Activity Use this method to get the HTML preview of an email campaign activity. The HTML preview allows you to verify how the email campaign activity will look before you send it to contacts.  Custom code emails (&#x60;format_type&#x60; 5) use the Constant Contact account owner&#39;s contact information to process contact, custom field, and account variables in the preview.  This method returns the HTML preview encoded as a JSON string. You will need to decode the string before you can use it as valid HTML. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignActivityPreview200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivityPreview200Response>> GetEmailCampaignActivityPreviewWithHttpInfoAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailSchedulingApi.GetEmailCampaignActivityPreview";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailCampaignActivityPreview200Response>("/emails/activities/{campaign_activity_id}/previews", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivityPreview", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Campaign Activity Schedule Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in &#x60;SCHEDULED&#x60; status, this method returns an empty array and a 200 response code.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        public List<GetEmailCampaignActivitySchedule200ResponseInner> GetEmailCampaignActivitySchedule(Guid campaignActivityId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>> localVarResponse = GetEmailCampaignActivityScheduleWithHttpInfo(campaignActivityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Campaign Activity Schedule Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in &#x60;SCHEDULED&#x60; status, this method returns an empty array and a 200 response code.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        public ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>> GetEmailCampaignActivityScheduleWithHttpInfo(Guid campaignActivityId, int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailSchedulingApi.GetEmailCampaignActivitySchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetEmailCampaignActivitySchedule200ResponseInner>>("/emails/activities/{campaign_activity_id}/schedules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivitySchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Campaign Activity Schedule Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in &#x60;SCHEDULED&#x60; status, this method returns an empty array and a 200 response code.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetEmailCampaignActivitySchedule200ResponseInner>> GetEmailCampaignActivityScheduleAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>> localVarResponse = await GetEmailCampaignActivityScheduleWithHttpInfoAsync(campaignActivityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Campaign Activity Schedule Use this method to return the current schedule for an email campaign activity. This schedule contains the date that Constant Contact will send the email campaign activity to contacts. If the email campaign activity is not in &#x60;SCHEDULED&#x60; status, this method returns an empty array and a 200 response code.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>>> GetEmailCampaignActivityScheduleWithHttpInfoAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailSchedulingApi.GetEmailCampaignActivitySchedule";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetEmailCampaignActivitySchedule200ResponseInner>>("/emails/activities/{campaign_activity_id}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivitySchedule", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET the Send History of an Email Campaign Activity Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEmailCampaignActivitySendHistory200ResponseInner&gt;</returns>
        public List<GetEmailCampaignActivitySendHistory200ResponseInner> GetEmailCampaignActivitySendHistory(string campaignActivityId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySendHistory200ResponseInner>> localVarResponse = GetEmailCampaignActivitySendHistoryWithHttpInfo(campaignActivityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET the Send History of an Email Campaign Activity Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEmailCampaignActivitySendHistory200ResponseInner&gt;</returns>
        public ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySendHistory200ResponseInner>> GetEmailCampaignActivitySendHistoryWithHttpInfo(string campaignActivityId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailSchedulingApi->GetEmailCampaignActivitySendHistory");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailSchedulingApi.GetEmailCampaignActivitySendHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetEmailCampaignActivitySendHistory200ResponseInner>>("/emails/activities/{campaign_activity_id}/send_history", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivitySendHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET the Send History of an Email Campaign Activity Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEmailCampaignActivitySendHistory200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetEmailCampaignActivitySendHistory200ResponseInner>> GetEmailCampaignActivitySendHistoryAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySendHistory200ResponseInner>> localVarResponse = await GetEmailCampaignActivitySendHistoryWithHttpInfoAsync(campaignActivityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET the Send History of an Email Campaign Activity Use this method to return the send history of an email campaign activity. This method returns the send history as an array containing an object for each time you sent a specific email campaign activity to contacts.   Each send history object contains the email campaign activity send date, the number of contacts it was sent to, and the contact lists or segments used to send it. Each send history object also includes if the send attempt completed or encountered an error, and the reason why each error occurred. This method returns results in ascending order starting with the first send attempt.   If the email campaign activity has not been sent to contacts, this method returns a 200 response and an empty array. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can return the send history for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEmailCampaignActivitySendHistory200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySendHistory200ResponseInner>>> GetEmailCampaignActivitySendHistoryWithHttpInfoAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailSchedulingApi->GetEmailCampaignActivitySendHistory");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailSchedulingApi.GetEmailCampaignActivitySendHistory";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetEmailCampaignActivitySendHistory200ResponseInner>>("/emails/activities/{campaign_activity_id}/send_history", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivitySendHistory", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST (Create) an Email Campaign Activity Schedule Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the &#x60;scheduled_date&#x60; request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the &#x60;contact_list_ids&#x60; or &#x60;segment_ids&#x60; array to add contacts.  You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role and are in &#x60;DRAFT&#x60;, &#x60;DONE&#x60;, or &#x60;ERROR&#x60; status. When you schedule an email campaign activity in &#x60;DONE&#x60; status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="scheduleEmailCampaignActivityRequest">A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        public List<GetEmailCampaignActivitySchedule200ResponseInner> ScheduleEmailCampaignActivity(Guid campaignActivityId, ScheduleEmailCampaignActivityRequest scheduleEmailCampaignActivityRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>> localVarResponse = ScheduleEmailCampaignActivityWithHttpInfo(campaignActivityId, scheduleEmailCampaignActivityRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (Create) an Email Campaign Activity Schedule Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the &#x60;scheduled_date&#x60; request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the &#x60;contact_list_ids&#x60; or &#x60;segment_ids&#x60; array to add contacts.  You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role and are in &#x60;DRAFT&#x60;, &#x60;DONE&#x60;, or &#x60;ERROR&#x60; status. When you schedule an email campaign activity in &#x60;DONE&#x60; status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="scheduleEmailCampaignActivityRequest">A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        public ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>> ScheduleEmailCampaignActivityWithHttpInfo(Guid campaignActivityId, ScheduleEmailCampaignActivityRequest scheduleEmailCampaignActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'scheduleEmailCampaignActivityRequest' is set
            if (scheduleEmailCampaignActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'scheduleEmailCampaignActivityRequest' when calling EmailSchedulingApi->ScheduleEmailCampaignActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = scheduleEmailCampaignActivityRequest;

            localVarRequestOptions.Operation = "EmailSchedulingApi.ScheduleEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<GetEmailCampaignActivitySchedule200ResponseInner>>("/emails/activities/{campaign_activity_id}/schedules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST (Create) an Email Campaign Activity Schedule Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the &#x60;scheduled_date&#x60; request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the &#x60;contact_list_ids&#x60; or &#x60;segment_ids&#x60; array to add contacts.  You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role and are in &#x60;DRAFT&#x60;, &#x60;DONE&#x60;, or &#x60;ERROR&#x60; status. When you schedule an email campaign activity in &#x60;DONE&#x60; status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="scheduleEmailCampaignActivityRequest">A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetEmailCampaignActivitySchedule200ResponseInner>> ScheduleEmailCampaignActivityAsync(Guid campaignActivityId, ScheduleEmailCampaignActivityRequest scheduleEmailCampaignActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>> localVarResponse = await ScheduleEmailCampaignActivityWithHttpInfoAsync(campaignActivityId, scheduleEmailCampaignActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (Create) an Email Campaign Activity Schedule Use this method to schedule when Constant Contact will send an email campaign activity to contacts. Use the &#x60;scheduled_date&#x60; request body property to enter the ISO-8601 format date that you want Constant Contact to send the email campaign activity on.   Before you schedule an email campaign activity, you must update the email campaign activity and specify which contacts you want Constant Contact to send the email to. When you make a PUT call to update an email campaign activity, use the &#x60;contact_list_ids&#x60; or &#x60;segment_ids&#x60; array to add contacts.  You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role and are in &#x60;DRAFT&#x60;, &#x60;DONE&#x60;, or &#x60;ERROR&#x60; status. When you schedule an email campaign activity in &#x60;DONE&#x60; status, Constant Contact does not send the email campaign activity to contacts that already received it. Constant Contact only sends the email campaign activity to any new contacts in the contact lists or segment you use. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only schedule email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="scheduleEmailCampaignActivityRequest">A request body payload that contains the date that you want Constant Contact to send your email campaign activity on. Use &#x60;\&quot;0\&quot;&#x60; as the date to have Constant Contact immediately send the email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetEmailCampaignActivitySchedule200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<List<GetEmailCampaignActivitySchedule200ResponseInner>>> ScheduleEmailCampaignActivityWithHttpInfoAsync(Guid campaignActivityId, ScheduleEmailCampaignActivityRequest scheduleEmailCampaignActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'scheduleEmailCampaignActivityRequest' is set
            if (scheduleEmailCampaignActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'scheduleEmailCampaignActivityRequest' when calling EmailSchedulingApi->ScheduleEmailCampaignActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = scheduleEmailCampaignActivityRequest;

            localVarRequestOptions.Operation = "EmailSchedulingApi.ScheduleEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<GetEmailCampaignActivitySchedule200ResponseInner>>("/emails/activities/{campaign_activity_id}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ScheduleEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST Test Send an Email Campaign Activity Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the &#x60;email_addresses&#x60; array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the &#x60;email_addresses&#x60; array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="testSendEmailCampaignActivityRequest">A JSON request body that contains the recipients of the test email and an optional personal message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void TestSendEmailCampaignActivity(Guid campaignActivityId, TestSendEmailCampaignActivityRequest testSendEmailCampaignActivityRequest, int operationIndex = 0)
        {
            TestSendEmailCampaignActivityWithHttpInfo(campaignActivityId, testSendEmailCampaignActivityRequest);
        }

        /// <summary>
        /// POST Test Send an Email Campaign Activity Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the &#x60;email_addresses&#x60; array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the &#x60;email_addresses&#x60; array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="testSendEmailCampaignActivityRequest">A JSON request body that contains the recipients of the test email and an optional personal message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ConstantContactApi.Client.ApiResponse<Object> TestSendEmailCampaignActivityWithHttpInfo(Guid campaignActivityId, TestSendEmailCampaignActivityRequest testSendEmailCampaignActivityRequest, int operationIndex = 0)
        {
            // verify the required parameter 'testSendEmailCampaignActivityRequest' is set
            if (testSendEmailCampaignActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'testSendEmailCampaignActivityRequest' when calling EmailSchedulingApi->TestSendEmailCampaignActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = testSendEmailCampaignActivityRequest;

            localVarRequestOptions.Operation = "EmailSchedulingApi.TestSendEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/emails/activities/{campaign_activity_id}/tests", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestSendEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST Test Send an Email Campaign Activity Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the &#x60;email_addresses&#x60; array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the &#x60;email_addresses&#x60; array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="testSendEmailCampaignActivityRequest">A JSON request body that contains the recipients of the test email and an optional personal message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TestSendEmailCampaignActivityAsync(Guid campaignActivityId, TestSendEmailCampaignActivityRequest testSendEmailCampaignActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await TestSendEmailCampaignActivityWithHttpInfoAsync(campaignActivityId, testSendEmailCampaignActivityRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// POST Test Send an Email Campaign Activity Use this method to send a test email to specific email addresses. Test emails allow you to verify how the email campaign activity will look before you send it to contacts. This method uses the &#x60;email_addresses&#x60; array in the request body to determine the recipients of the test email. The test email does not process any dynamic content in the email campaign activity. Dynamic content includes contact and custom field variables.  You can send up to 50 test emails each day. Each recipient you add to the &#x60;email_addresses&#x60; array in the request body counts towards this limit. Successfully sending a test email returns a 204 response code without a response body. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity. You can only test send email campaign activities that have the &#x60;primary_email&#x60; role.</param>
        /// <param name="testSendEmailCampaignActivityRequest">A JSON request body that contains the recipients of the test email and an optional personal message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<Object>> TestSendEmailCampaignActivityWithHttpInfoAsync(Guid campaignActivityId, TestSendEmailCampaignActivityRequest testSendEmailCampaignActivityRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'testSendEmailCampaignActivityRequest' is set
            if (testSendEmailCampaignActivityRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'testSendEmailCampaignActivityRequest' when calling EmailSchedulingApi->TestSendEmailCampaignActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = testSendEmailCampaignActivityRequest;

            localVarRequestOptions.Operation = "EmailSchedulingApi.TestSendEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/emails/activities/{campaign_activity_id}/tests", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TestSendEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE an Email Campaign Activity Schedule Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in &#x60;SCHEDULED&#x60; status. Unscheduling reverts the email campaign activity to the status prior to &#x60;SCHEDULED&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void UnscheduleEmailCampaignActivity(Guid campaignActivityId, int operationIndex = 0)
        {
            UnscheduleEmailCampaignActivityWithHttpInfo(campaignActivityId);
        }

        /// <summary>
        /// DELETE an Email Campaign Activity Schedule Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in &#x60;SCHEDULED&#x60; status. Unscheduling reverts the email campaign activity to the status prior to &#x60;SCHEDULED&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ConstantContactApi.Client.ApiResponse<Object> UnscheduleEmailCampaignActivityWithHttpInfo(Guid campaignActivityId, int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailSchedulingApi.UnscheduleEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/emails/activities/{campaign_activity_id}/schedules", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnscheduleEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE an Email Campaign Activity Schedule Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in &#x60;SCHEDULED&#x60; status. Unscheduling reverts the email campaign activity to the status prior to &#x60;SCHEDULED&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UnscheduleEmailCampaignActivityAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await UnscheduleEmailCampaignActivityWithHttpInfoAsync(campaignActivityId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// DELETE an Email Campaign Activity Schedule Use this method to unschedule an email campaign activity by deleting the schedule. You can only unschedule email campaign activities that are in &#x60;SCHEDULED&#x60; status. Unscheduling reverts the email campaign activity to the status prior to &#x60;SCHEDULED&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<Object>> UnscheduleEmailCampaignActivityWithHttpInfoAsync(Guid campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailSchedulingApi.UnscheduleEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/emails/activities/{campaign_activity_id}/schedules", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UnscheduleEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
