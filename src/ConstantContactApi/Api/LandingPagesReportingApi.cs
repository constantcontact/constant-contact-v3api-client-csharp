/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.185
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILandingPagesReportingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GET a Unique Contacts Adds Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by &#x60;contact_id&#x60;. The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactAdds200Response</returns>
        GetContactAdds200Response GetContactAdds(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Unique Contacts Adds Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by &#x60;contact_id&#x60;. The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactAdds200Response</returns>
        ApiResponse<GetContactAdds200Response> GetContactAddsWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET a Contacts Opens Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactOpens200Response</returns>
        GetUniqueContactOpens200Response GetContactOpens(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Contacts Opens Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactOpens200Response</returns>
        ApiResponse<GetUniqueContactOpens200Response> GetContactOpensWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET a Unique Contacts Clicks Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the &#x60;contact_id&#x60; and &#x60;url_id&#x60;. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactClicks200Response</returns>
        GetUniqueContactClicks200Response GetUniqueContactClicks(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Unique Contacts Clicks Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the &#x60;contact_id&#x60; and &#x60;url_id&#x60;. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactClicks200Response</returns>
        ApiResponse<GetUniqueContactClicks200Response> GetUniqueContactClicksWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET a Unique Contacts Opens Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactOpens200Response</returns>
        GetUniqueContactOpens200Response GetUniqueContactOpens(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Unique Contacts Opens Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactOpens200Response</returns>
        ApiResponse<GetUniqueContactOpens200Response> GetUniqueContactOpensWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET a Unique Contacts SMS Opt-In Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by &#x60;contact_id&#x60;&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactSMSOptIns200Response</returns>
        GetUniqueContactSMSOptIns200Response GetUniqueContactSMSOptIns(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Unique Contacts SMS Opt-In Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by &#x60;contact_id&#x60;&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactSMSOptIns200Response</returns>
        ApiResponse<GetUniqueContactSMSOptIns200Response> GetUniqueContactSMSOptInsWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET a Unique Contacts Updates Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactUpdates200Response</returns>
        GetUniqueContactUpdates200Response GetUniqueContactUpdates(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Unique Contacts Updates Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactUpdates200Response</returns>
        ApiResponse<GetUniqueContactUpdates200Response> GetUniqueContactUpdatesWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILandingPagesReportingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GET a Unique Contacts Adds Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by &#x60;contact_id&#x60;. The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactAdds200Response</returns>
        System.Threading.Tasks.Task<GetContactAdds200Response> GetContactAddsAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Unique Contacts Adds Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by &#x60;contact_id&#x60;. The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactAdds200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetContactAdds200Response>> GetContactAddsWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Contacts Opens Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactOpens200Response</returns>
        System.Threading.Tasks.Task<GetUniqueContactOpens200Response> GetContactOpensAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Contacts Opens Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactOpens200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniqueContactOpens200Response>> GetContactOpensWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Unique Contacts Clicks Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the &#x60;contact_id&#x60; and &#x60;url_id&#x60;. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactClicks200Response</returns>
        System.Threading.Tasks.Task<GetUniqueContactClicks200Response> GetUniqueContactClicksAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Unique Contacts Clicks Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the &#x60;contact_id&#x60; and &#x60;url_id&#x60;. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactClicks200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniqueContactClicks200Response>> GetUniqueContactClicksWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Unique Contacts Opens Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactOpens200Response</returns>
        System.Threading.Tasks.Task<GetUniqueContactOpens200Response> GetUniqueContactOpensAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Unique Contacts Opens Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactOpens200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniqueContactOpens200Response>> GetUniqueContactOpensWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Unique Contacts SMS Opt-In Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by &#x60;contact_id&#x60;&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactSMSOptIns200Response</returns>
        System.Threading.Tasks.Task<GetUniqueContactSMSOptIns200Response> GetUniqueContactSMSOptInsAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Unique Contacts SMS Opt-In Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by &#x60;contact_id&#x60;&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactSMSOptIns200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniqueContactSMSOptIns200Response>> GetUniqueContactSMSOptInsWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Unique Contacts Updates Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactUpdates200Response</returns>
        System.Threading.Tasks.Task<GetUniqueContactUpdates200Response> GetUniqueContactUpdatesAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Unique Contacts Updates Landing Page Report
        /// </summary>
        /// <remarks>
        /// Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactUpdates200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetUniqueContactUpdates200Response>> GetUniqueContactUpdatesWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILandingPagesReportingApi : ILandingPagesReportingApiSync, ILandingPagesReportingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LandingPagesReportingApi : ILandingPagesReportingApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="LandingPagesReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LandingPagesReportingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LandingPagesReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LandingPagesReportingApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LandingPagesReportingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public LandingPagesReportingApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="LandingPagesReportingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public LandingPagesReportingApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GET a Unique Contacts Adds Landing Page Report Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by &#x60;contact_id&#x60;. The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetContactAdds200Response</returns>
        public GetContactAdds200Response GetContactAdds(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetContactAdds200Response> localVarResponse = GetContactAddsWithHttpInfo(campaignActivityId, limit, contactsFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts Adds Landing Page Report Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by &#x60;contact_id&#x60;. The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetContactAdds200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetContactAdds200Response> GetContactAddsWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetContactAdds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetContactAdds200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_adds", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactAdds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Unique Contacts Adds Landing Page Report Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by &#x60;contact_id&#x60;. The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetContactAdds200Response</returns>
        public async System.Threading.Tasks.Task<GetContactAdds200Response> GetContactAddsAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetContactAdds200Response> localVarResponse = await GetContactAddsWithHttpInfoAsync(campaignActivityId, limit, contactsFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts Adds Landing Page Report Use this method to get details about each contact added to the account from a specified landing page. Contacts are identified by &#x60;contact_id&#x60;. The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetContactAdds200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetContactAdds200Response>> GetContactAddsWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetContactAdds";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetContactAdds200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_adds", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactAdds", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Contacts Opens Landing Page Report Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactOpens200Response</returns>
        public GetUniqueContactOpens200Response GetContactOpens(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactOpens200Response> localVarResponse = GetContactOpensWithHttpInfo(campaignActivityId, limit, contactsFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Contacts Opens Landing Page Report Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactOpens200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetUniqueContactOpens200Response> GetContactOpensWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetContactOpens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUniqueContactOpens200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_contact_opens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactOpens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Contacts Opens Landing Page Report Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactOpens200Response</returns>
        public async System.Threading.Tasks.Task<GetUniqueContactOpens200Response> GetContactOpensAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactOpens200Response> localVarResponse = await GetContactOpensWithHttpInfoAsync(campaignActivityId, limit, contactsFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Contacts Opens Landing Page Report Use this method get contact details for each time a contact opens a link on a landing page.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactOpens200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetUniqueContactOpens200Response>> GetContactOpensWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetContactOpens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUniqueContactOpens200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_contact_opens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetContactOpens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Unique Contacts Clicks Landing Page Report Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the &#x60;contact_id&#x60; and &#x60;url_id&#x60;. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactClicks200Response</returns>
        public GetUniqueContactClicks200Response GetUniqueContactClicks(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactClicks200Response> localVarResponse = GetUniqueContactClicksWithHttpInfo(campaignActivityId, limit, contactsFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts Clicks Landing Page Report Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the &#x60;contact_id&#x60; and &#x60;url_id&#x60;. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactClicks200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetUniqueContactClicks200Response> GetUniqueContactClicksWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetUniqueContactClicks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUniqueContactClicks200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_clicks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueContactClicks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Unique Contacts Clicks Landing Page Report Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the &#x60;contact_id&#x60; and &#x60;url_id&#x60;. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactClicks200Response</returns>
        public async System.Threading.Tasks.Task<GetUniqueContactClicks200Response> GetUniqueContactClicksAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactClicks200Response> localVarResponse = await GetUniqueContactClicksWithHttpInfoAsync(campaignActivityId, limit, contactsFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts Clicks Landing Page Report Use this method get details about each contact that clicked a link on a landing page campaign activity. Unique contact clicks are identified by both the &#x60;contact_id&#x60; and &#x60;url_id&#x60;. The same contact may appear more than once in the results, if they clicked more than one link on the landing page. The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactClicks200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetUniqueContactClicks200Response>> GetUniqueContactClicksWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetUniqueContactClicks";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUniqueContactClicks200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_clicks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueContactClicks", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Unique Contacts Opens Landing Page Report Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactOpens200Response</returns>
        public GetUniqueContactOpens200Response GetUniqueContactOpens(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactOpens200Response> localVarResponse = GetUniqueContactOpensWithHttpInfo(campaignActivityId, limit, contactsFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts Opens Landing Page Report Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactOpens200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetUniqueContactOpens200Response> GetUniqueContactOpensWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetUniqueContactOpens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUniqueContactOpens200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_opens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueContactOpens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Unique Contacts Opens Landing Page Report Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactOpens200Response</returns>
        public async System.Threading.Tasks.Task<GetUniqueContactOpens200Response> GetUniqueContactOpensAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactOpens200Response> localVarResponse = await GetUniqueContactOpensWithHttpInfoAsync(campaignActivityId, limit, contactsFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts Opens Landing Page Report Use this method get details about each contact that opens a link on a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactOpens200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetUniqueContactOpens200Response>> GetUniqueContactOpensWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetUniqueContactOpens";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUniqueContactOpens200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_opens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueContactOpens", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Unique Contacts SMS Opt-In Landing Page Report Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by &#x60;contact_id&#x60;&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactSMSOptIns200Response</returns>
        public GetUniqueContactSMSOptIns200Response GetUniqueContactSMSOptIns(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactSMSOptIns200Response> localVarResponse = GetUniqueContactSMSOptInsWithHttpInfo(campaignActivityId, limit, contactsFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts SMS Opt-In Landing Page Report Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by &#x60;contact_id&#x60;&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactSMSOptIns200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetUniqueContactSMSOptIns200Response> GetUniqueContactSMSOptInsWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetUniqueContactSMSOptIns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUniqueContactSMSOptIns200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_sms_optins", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueContactSMSOptIns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Unique Contacts SMS Opt-In Landing Page Report Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by &#x60;contact_id&#x60;&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactSMSOptIns200Response</returns>
        public async System.Threading.Tasks.Task<GetUniqueContactSMSOptIns200Response> GetUniqueContactSMSOptInsAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactSMSOptIns200Response> localVarResponse = await GetUniqueContactSMSOptInsWithHttpInfoAsync(campaignActivityId, limit, contactsFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts SMS Opt-In Landing Page Report Use this method get details about unique contacts that click a link on a landing page to opt in to receiving SMS text messages. Contacts are uniquely identified by &#x60;contact_id&#x60;&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact click results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to return only contacts that match a contacts full or partial first or last name, or email. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactSMSOptIns200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetUniqueContactSMSOptIns200Response>> GetUniqueContactSMSOptInsWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetUniqueContactSMSOptIns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUniqueContactSMSOptIns200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_sms_optins", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueContactSMSOptIns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Unique Contacts Updates Landing Page Report Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUniqueContactUpdates200Response</returns>
        public GetUniqueContactUpdates200Response GetUniqueContactUpdates(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactUpdates200Response> localVarResponse = GetUniqueContactUpdatesWithHttpInfo(campaignActivityId, limit, contactsFilter);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts Updates Landing Page Report Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUniqueContactUpdates200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetUniqueContactUpdates200Response> GetUniqueContactUpdatesWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetUniqueContactUpdates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUniqueContactUpdates200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_updates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueContactUpdates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Unique Contacts Updates Landing Page Report Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUniqueContactUpdates200Response</returns>
        public async System.Threading.Tasks.Task<GetUniqueContactUpdates200Response> GetUniqueContactUpdatesAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetUniqueContactUpdates200Response> localVarResponse = await GetUniqueContactUpdatesWithHttpInfoAsync(campaignActivityId, limit, contactsFilter, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Unique Contacts Updates Landing Page Report Use this method to get contact details for each contact that updated their contact data from a landing page. Contacts are uniquely identified by &#x60;contact_id&#x60;.  The resulting contact data is listed with most recent activity first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The landing page &#x60;campaign_activity_id&#x60; (UUID&#39;s) to use to get unique contact open results.</param>
        /// <param name="limit">Use to limit the number of contact tracking activities to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="contactsFilter">Use to filter the results to only include contacts that contain a certain value. This parameter does full and partial matches and applies to the contact first name, last name, and email fields. For example: Josie or Jo. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUniqueContactUpdates200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetUniqueContactUpdates200Response>> GetUniqueContactUpdatesWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), string? contactsFilter = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (contactsFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "contacts_filter", contactsFilter));
            }

            localVarRequestOptions.Operation = "LandingPagesReportingApi.GetUniqueContactUpdates";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetUniqueContactUpdates200Response>("/reports/landing_pages/campaign_details/{campaign_activity_id}/p_unique_contact_updates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueContactUpdates", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
