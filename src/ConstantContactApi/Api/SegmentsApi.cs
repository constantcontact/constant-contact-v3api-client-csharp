/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISegmentsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// POST (create) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to create a new segment. You create segments to target a subset of your contacts that meet your specific criteria for a marketing campaign. The segment &#x60;name&#x60; must be unique. The &#x60;segment_criteria&#x60; requires single-string escaped JSON. Constant Contact uses the contact data that you specify in the &#x60;segment_criteria&#x60; to evaluate and identify the contacts you want to target. Contact data can be grouped from different data sources, including:    -  **&#x60;tracking&#x60;**: Supports **or** and **and** groups.     -  **&#x60;contact&#x60;**: Supports **or** and **and** groups.     -  **&#x60;list_membership&#x60;**: Supports **or** groups.    -  **&#x60;tags&#x60;**: Supports **or** groups.  If you do not specify &#x60;list_membership&#x60; as criteria, Constant Contact evaluates all contacts in your account. To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated.  For more use case information, see the [Segments Overview](/api_guide/segments_overview.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSegmentRequest">The segment &#x60;name&#x60; and &#x60;segment_criteria&#x60; (requires single-string escaped JSON).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegment201Response</returns>
        CreateSegment201Response CreateSegment(CreateSegmentRequest createSegmentRequest, int operationIndex = 0);

        /// <summary>
        /// POST (create) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to create a new segment. You create segments to target a subset of your contacts that meet your specific criteria for a marketing campaign. The segment &#x60;name&#x60; must be unique. The &#x60;segment_criteria&#x60; requires single-string escaped JSON. Constant Contact uses the contact data that you specify in the &#x60;segment_criteria&#x60; to evaluate and identify the contacts you want to target. Contact data can be grouped from different data sources, including:    -  **&#x60;tracking&#x60;**: Supports **or** and **and** groups.     -  **&#x60;contact&#x60;**: Supports **or** and **and** groups.     -  **&#x60;list_membership&#x60;**: Supports **or** groups.    -  **&#x60;tags&#x60;**: Supports **or** groups.  If you do not specify &#x60;list_membership&#x60; as criteria, Constant Contact evaluates all contacts in your account. To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated.  For more use case information, see the [Segments Overview](/api_guide/segments_overview.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSegmentRequest">The segment &#x60;name&#x60; and &#x60;segment_criteria&#x60; (requires single-string escaped JSON).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegment201Response</returns>
        ApiResponse<CreateSegment201Response> CreateSegmentWithHttpInfo(CreateSegmentRequest createSegmentRequest, int operationIndex = 0);
        /// <summary>
        /// DELETE a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to delete a segment from your account. Before deleting a segment, verify that the segment is not associated with a scheduled campaign.  Deleted segments do not display in the results when using the &#x60;GET /segments&#x60; endpoint. If you know the &#x60;segment_id&#x60;, you can use the &#x60;GET /segments/{segment_id}&#x60; endpoint to view the deleted segment&#39;s details. A segment&#39;s details are preserved for external reference purposes, such as displaying the segment name in a campaign&#39;s history. For more use case information, see [Delete a Segment](/api_guide/segment_delete.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteSegment(int segmentId, int operationIndex = 0);

        /// <summary>
        /// DELETE a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to delete a segment from your account. Before deleting a segment, verify that the segment is not associated with a scheduled campaign.  Deleted segments do not display in the results when using the &#x60;GET /segments&#x60; endpoint. If you know the &#x60;segment_id&#x60;, you can use the &#x60;GET /segments/{segment_id}&#x60; endpoint to view the deleted segment&#39;s details. A segment&#39;s details are preserved for external reference purposes, such as displaying the segment name in a campaign&#39;s history. For more use case information, see [Delete a Segment](/api_guide/segment_delete.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteSegmentWithHttpInfo(int segmentId, int operationIndex = 0);
        /// <summary>
        /// GET all Segments
        /// </summary>
        /// <remarks>
        /// Use this method to get a list of all segments associated with the account. You can sort segment results and limit the number of segments that display per page. Deleted segments are excluded from the results. For more use case information, see [Get All Segments](/api_guide/segment_get_all.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of segments to return on a page. (optional, default to &quot;1000&quot;)</param>
        /// <param name="sortBy">Specify the segment sort order to use. Sort by name (&#x60;sort_by&#x3D;name&#x60;) in ascending order, or sort by date (&#x60;sort_by&#x3D;date&#x60;) in descending order with the most recently updated segments listed first. (optional, default to &quot;date&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllSegments200Response</returns>
        GetAllSegments200Response GetAllSegments(string? limit = default(string?), string? sortBy = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET all Segments
        /// </summary>
        /// <remarks>
        /// Use this method to get a list of all segments associated with the account. You can sort segment results and limit the number of segments that display per page. Deleted segments are excluded from the results. For more use case information, see [Get All Segments](/api_guide/segment_get_all.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of segments to return on a page. (optional, default to &quot;1000&quot;)</param>
        /// <param name="sortBy">Specify the segment sort order to use. Sort by name (&#x60;sort_by&#x3D;name&#x60;) in ascending order, or sort by date (&#x60;sort_by&#x3D;date&#x60;) in descending order with the most recently updated segments listed first. (optional, default to &quot;date&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllSegments200Response</returns>
        ApiResponse<GetAllSegments200Response> GetAllSegmentsWithHttpInfo(string? limit = default(string?), string? sortBy = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET a Segment&#39;s Details
        /// </summary>
        /// <remarks>
        /// Use this method to get details about a segment, including the segment criteria. If you know the &#x60;segment_id&#x60; You can also use this method to get details about a deleted segment. For more use case information, see [Get a Segment&#39;s Details](/api_guide/segment_get.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system-generated unique ID that identifies a segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegment201Response</returns>
        CreateSegment201Response GetSegmentById(int segmentId, int operationIndex = 0);

        /// <summary>
        /// GET a Segment&#39;s Details
        /// </summary>
        /// <remarks>
        /// Use this method to get details about a segment, including the segment criteria. If you know the &#x60;segment_id&#x60; You can also use this method to get details about a deleted segment. For more use case information, see [Get a Segment&#39;s Details](/api_guide/segment_get.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system-generated unique ID that identifies a segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegment201Response</returns>
        ApiResponse<CreateSegment201Response> GetSegmentByIdWithHttpInfo(int segmentId, int operationIndex = 0);
        /// <summary>
        /// PUT (update) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to update an existing segment&#39;s name (&#x60;name&#x60;) and/or contact selection criteria (&#x60;segment_criteria&#x60;). You must specify both the &#x60;name&#x60; and the &#x60;segment_criteria&#x60; in the request body, even if you don&#39;t plan to update both. The segment&#39;s name must be unique and the JSON must be valid (requires single-string escaped JSON). To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated. For more use case information, see [Update Segment Details](/api_guide/segment_update.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="createSegmentRequest">Include both the &#x60;name&#x60; and &#x60;segment_criteria&#x60; (single-string escaped JSON) in the body request, then make updates to either or both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegment201Response</returns>
        CreateSegment201Response UpdateSegment(int segmentId, CreateSegmentRequest createSegmentRequest, int operationIndex = 0);

        /// <summary>
        /// PUT (update) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to update an existing segment&#39;s name (&#x60;name&#x60;) and/or contact selection criteria (&#x60;segment_criteria&#x60;). You must specify both the &#x60;name&#x60; and the &#x60;segment_criteria&#x60; in the request body, even if you don&#39;t plan to update both. The segment&#39;s name must be unique and the JSON must be valid (requires single-string escaped JSON). To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated. For more use case information, see [Update Segment Details](/api_guide/segment_update.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="createSegmentRequest">Include both the &#x60;name&#x60; and &#x60;segment_criteria&#x60; (single-string escaped JSON) in the body request, then make updates to either or both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegment201Response</returns>
        ApiResponse<CreateSegment201Response> UpdateSegmentWithHttpInfo(int segmentId, CreateSegmentRequest createSegmentRequest, int operationIndex = 0);
        /// <summary>
        /// PATCH (rename) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to update an existing segment &#x60;name&#x60; with a new unique name in the request body. For more use case information, see [Rename a Segment](/api_guide/segment_rename.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="updateSegmentNameRequest">Include the existing segment &#x60;name&#x60; in the body request, then rename the segment using a unique new name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegment201Response</returns>
        CreateSegment201Response UpdateSegmentName(int segmentId, UpdateSegmentNameRequest updateSegmentNameRequest, int operationIndex = 0);

        /// <summary>
        /// PATCH (rename) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to update an existing segment &#x60;name&#x60; with a new unique name in the request body. For more use case information, see [Rename a Segment](/api_guide/segment_rename.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="updateSegmentNameRequest">Include the existing segment &#x60;name&#x60; in the body request, then rename the segment using a unique new name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegment201Response</returns>
        ApiResponse<CreateSegment201Response> UpdateSegmentNameWithHttpInfo(int segmentId, UpdateSegmentNameRequest updateSegmentNameRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISegmentsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// POST (create) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to create a new segment. You create segments to target a subset of your contacts that meet your specific criteria for a marketing campaign. The segment &#x60;name&#x60; must be unique. The &#x60;segment_criteria&#x60; requires single-string escaped JSON. Constant Contact uses the contact data that you specify in the &#x60;segment_criteria&#x60; to evaluate and identify the contacts you want to target. Contact data can be grouped from different data sources, including:    -  **&#x60;tracking&#x60;**: Supports **or** and **and** groups.     -  **&#x60;contact&#x60;**: Supports **or** and **and** groups.     -  **&#x60;list_membership&#x60;**: Supports **or** groups.    -  **&#x60;tags&#x60;**: Supports **or** groups.  If you do not specify &#x60;list_membership&#x60; as criteria, Constant Contact evaluates all contacts in your account. To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated.  For more use case information, see the [Segments Overview](/api_guide/segments_overview.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSegmentRequest">The segment &#x60;name&#x60; and &#x60;segment_criteria&#x60; (requires single-string escaped JSON).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegment201Response</returns>
        System.Threading.Tasks.Task<CreateSegment201Response> CreateSegmentAsync(CreateSegmentRequest createSegmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST (create) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to create a new segment. You create segments to target a subset of your contacts that meet your specific criteria for a marketing campaign. The segment &#x60;name&#x60; must be unique. The &#x60;segment_criteria&#x60; requires single-string escaped JSON. Constant Contact uses the contact data that you specify in the &#x60;segment_criteria&#x60; to evaluate and identify the contacts you want to target. Contact data can be grouped from different data sources, including:    -  **&#x60;tracking&#x60;**: Supports **or** and **and** groups.     -  **&#x60;contact&#x60;**: Supports **or** and **and** groups.     -  **&#x60;list_membership&#x60;**: Supports **or** groups.    -  **&#x60;tags&#x60;**: Supports **or** groups.  If you do not specify &#x60;list_membership&#x60; as criteria, Constant Contact evaluates all contacts in your account. To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated.  For more use case information, see the [Segments Overview](/api_guide/segments_overview.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSegmentRequest">The segment &#x60;name&#x60; and &#x60;segment_criteria&#x60; (requires single-string escaped JSON).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegment201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSegment201Response>> CreateSegmentWithHttpInfoAsync(CreateSegmentRequest createSegmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DELETE a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to delete a segment from your account. Before deleting a segment, verify that the segment is not associated with a scheduled campaign.  Deleted segments do not display in the results when using the &#x60;GET /segments&#x60; endpoint. If you know the &#x60;segment_id&#x60;, you can use the &#x60;GET /segments/{segment_id}&#x60; endpoint to view the deleted segment&#39;s details. A segment&#39;s details are preserved for external reference purposes, such as displaying the segment name in a campaign&#39;s history. For more use case information, see [Delete a Segment](/api_guide/segment_delete.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteSegmentAsync(int segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DELETE a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to delete a segment from your account. Before deleting a segment, verify that the segment is not associated with a scheduled campaign.  Deleted segments do not display in the results when using the &#x60;GET /segments&#x60; endpoint. If you know the &#x60;segment_id&#x60;, you can use the &#x60;GET /segments/{segment_id}&#x60; endpoint to view the deleted segment&#39;s details. A segment&#39;s details are preserved for external reference purposes, such as displaying the segment name in a campaign&#39;s history. For more use case information, see [Delete a Segment](/api_guide/segment_delete.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteSegmentWithHttpInfoAsync(int segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET all Segments
        /// </summary>
        /// <remarks>
        /// Use this method to get a list of all segments associated with the account. You can sort segment results and limit the number of segments that display per page. Deleted segments are excluded from the results. For more use case information, see [Get All Segments](/api_guide/segment_get_all.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of segments to return on a page. (optional, default to &quot;1000&quot;)</param>
        /// <param name="sortBy">Specify the segment sort order to use. Sort by name (&#x60;sort_by&#x3D;name&#x60;) in ascending order, or sort by date (&#x60;sort_by&#x3D;date&#x60;) in descending order with the most recently updated segments listed first. (optional, default to &quot;date&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllSegments200Response</returns>
        System.Threading.Tasks.Task<GetAllSegments200Response> GetAllSegmentsAsync(string? limit = default(string?), string? sortBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET all Segments
        /// </summary>
        /// <remarks>
        /// Use this method to get a list of all segments associated with the account. You can sort segment results and limit the number of segments that display per page. Deleted segments are excluded from the results. For more use case information, see [Get All Segments](/api_guide/segment_get_all.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of segments to return on a page. (optional, default to &quot;1000&quot;)</param>
        /// <param name="sortBy">Specify the segment sort order to use. Sort by name (&#x60;sort_by&#x3D;name&#x60;) in ascending order, or sort by date (&#x60;sort_by&#x3D;date&#x60;) in descending order with the most recently updated segments listed first. (optional, default to &quot;date&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllSegments200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllSegments200Response>> GetAllSegmentsWithHttpInfoAsync(string? limit = default(string?), string? sortBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Segment&#39;s Details
        /// </summary>
        /// <remarks>
        /// Use this method to get details about a segment, including the segment criteria. If you know the &#x60;segment_id&#x60; You can also use this method to get details about a deleted segment. For more use case information, see [Get a Segment&#39;s Details](/api_guide/segment_get.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system-generated unique ID that identifies a segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegment201Response</returns>
        System.Threading.Tasks.Task<CreateSegment201Response> GetSegmentByIdAsync(int segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Segment&#39;s Details
        /// </summary>
        /// <remarks>
        /// Use this method to get details about a segment, including the segment criteria. If you know the &#x60;segment_id&#x60; You can also use this method to get details about a deleted segment. For more use case information, see [Get a Segment&#39;s Details](/api_guide/segment_get.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system-generated unique ID that identifies a segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegment201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSegment201Response>> GetSegmentByIdWithHttpInfoAsync(int segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PUT (update) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to update an existing segment&#39;s name (&#x60;name&#x60;) and/or contact selection criteria (&#x60;segment_criteria&#x60;). You must specify both the &#x60;name&#x60; and the &#x60;segment_criteria&#x60; in the request body, even if you don&#39;t plan to update both. The segment&#39;s name must be unique and the JSON must be valid (requires single-string escaped JSON). To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated. For more use case information, see [Update Segment Details](/api_guide/segment_update.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="createSegmentRequest">Include both the &#x60;name&#x60; and &#x60;segment_criteria&#x60; (single-string escaped JSON) in the body request, then make updates to either or both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegment201Response</returns>
        System.Threading.Tasks.Task<CreateSegment201Response> UpdateSegmentAsync(int segmentId, CreateSegmentRequest createSegmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PUT (update) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to update an existing segment&#39;s name (&#x60;name&#x60;) and/or contact selection criteria (&#x60;segment_criteria&#x60;). You must specify both the &#x60;name&#x60; and the &#x60;segment_criteria&#x60; in the request body, even if you don&#39;t plan to update both. The segment&#39;s name must be unique and the JSON must be valid (requires single-string escaped JSON). To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated. For more use case information, see [Update Segment Details](/api_guide/segment_update.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="createSegmentRequest">Include both the &#x60;name&#x60; and &#x60;segment_criteria&#x60; (single-string escaped JSON) in the body request, then make updates to either or both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegment201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSegment201Response>> UpdateSegmentWithHttpInfoAsync(int segmentId, CreateSegmentRequest createSegmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PATCH (rename) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to update an existing segment &#x60;name&#x60; with a new unique name in the request body. For more use case information, see [Rename a Segment](/api_guide/segment_rename.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="updateSegmentNameRequest">Include the existing segment &#x60;name&#x60; in the body request, then rename the segment using a unique new name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegment201Response</returns>
        System.Threading.Tasks.Task<CreateSegment201Response> UpdateSegmentNameAsync(int segmentId, UpdateSegmentNameRequest updateSegmentNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PATCH (rename) a Segment
        /// </summary>
        /// <remarks>
        /// Use this method to update an existing segment &#x60;name&#x60; with a new unique name in the request body. For more use case information, see [Rename a Segment](/api_guide/segment_rename.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="updateSegmentNameRequest">Include the existing segment &#x60;name&#x60; in the body request, then rename the segment using a unique new name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegment201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSegment201Response>> UpdateSegmentNameWithHttpInfoAsync(int segmentId, UpdateSegmentNameRequest updateSegmentNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISegmentsApi : ISegmentsApiSync, ISegmentsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SegmentsApi : ISegmentsApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SegmentsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SegmentsApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SegmentsApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SegmentsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SegmentsApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// POST (create) a Segment Use this method to create a new segment. You create segments to target a subset of your contacts that meet your specific criteria for a marketing campaign. The segment &#x60;name&#x60; must be unique. The &#x60;segment_criteria&#x60; requires single-string escaped JSON. Constant Contact uses the contact data that you specify in the &#x60;segment_criteria&#x60; to evaluate and identify the contacts you want to target. Contact data can be grouped from different data sources, including:    -  **&#x60;tracking&#x60;**: Supports **or** and **and** groups.     -  **&#x60;contact&#x60;**: Supports **or** and **and** groups.     -  **&#x60;list_membership&#x60;**: Supports **or** groups.    -  **&#x60;tags&#x60;**: Supports **or** groups.  If you do not specify &#x60;list_membership&#x60; as criteria, Constant Contact evaluates all contacts in your account. To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated.  For more use case information, see the [Segments Overview](/api_guide/segments_overview.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSegmentRequest">The segment &#x60;name&#x60; and &#x60;segment_criteria&#x60; (requires single-string escaped JSON).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegment201Response</returns>
        public CreateSegment201Response CreateSegment(CreateSegmentRequest createSegmentRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateSegment201Response> localVarResponse = CreateSegmentWithHttpInfo(createSegmentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (create) a Segment Use this method to create a new segment. You create segments to target a subset of your contacts that meet your specific criteria for a marketing campaign. The segment &#x60;name&#x60; must be unique. The &#x60;segment_criteria&#x60; requires single-string escaped JSON. Constant Contact uses the contact data that you specify in the &#x60;segment_criteria&#x60; to evaluate and identify the contacts you want to target. Contact data can be grouped from different data sources, including:    -  **&#x60;tracking&#x60;**: Supports **or** and **and** groups.     -  **&#x60;contact&#x60;**: Supports **or** and **and** groups.     -  **&#x60;list_membership&#x60;**: Supports **or** groups.    -  **&#x60;tags&#x60;**: Supports **or** groups.  If you do not specify &#x60;list_membership&#x60; as criteria, Constant Contact evaluates all contacts in your account. To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated.  For more use case information, see the [Segments Overview](/api_guide/segments_overview.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSegmentRequest">The segment &#x60;name&#x60; and &#x60;segment_criteria&#x60; (requires single-string escaped JSON).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegment201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateSegment201Response> CreateSegmentWithHttpInfo(CreateSegmentRequest createSegmentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createSegmentRequest' is set
            if (createSegmentRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createSegmentRequest' when calling SegmentsApi->CreateSegment");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSegmentRequest;

            localVarRequestOptions.Operation = "SegmentsApi.CreateSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSegment201Response>("/segments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST (create) a Segment Use this method to create a new segment. You create segments to target a subset of your contacts that meet your specific criteria for a marketing campaign. The segment &#x60;name&#x60; must be unique. The &#x60;segment_criteria&#x60; requires single-string escaped JSON. Constant Contact uses the contact data that you specify in the &#x60;segment_criteria&#x60; to evaluate and identify the contacts you want to target. Contact data can be grouped from different data sources, including:    -  **&#x60;tracking&#x60;**: Supports **or** and **and** groups.     -  **&#x60;contact&#x60;**: Supports **or** and **and** groups.     -  **&#x60;list_membership&#x60;**: Supports **or** groups.    -  **&#x60;tags&#x60;**: Supports **or** groups.  If you do not specify &#x60;list_membership&#x60; as criteria, Constant Contact evaluates all contacts in your account. To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated.  For more use case information, see the [Segments Overview](/api_guide/segments_overview.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSegmentRequest">The segment &#x60;name&#x60; and &#x60;segment_criteria&#x60; (requires single-string escaped JSON).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegment201Response</returns>
        public async System.Threading.Tasks.Task<CreateSegment201Response> CreateSegmentAsync(CreateSegmentRequest createSegmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateSegment201Response> localVarResponse = await CreateSegmentWithHttpInfoAsync(createSegmentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (create) a Segment Use this method to create a new segment. You create segments to target a subset of your contacts that meet your specific criteria for a marketing campaign. The segment &#x60;name&#x60; must be unique. The &#x60;segment_criteria&#x60; requires single-string escaped JSON. Constant Contact uses the contact data that you specify in the &#x60;segment_criteria&#x60; to evaluate and identify the contacts you want to target. Contact data can be grouped from different data sources, including:    -  **&#x60;tracking&#x60;**: Supports **or** and **and** groups.     -  **&#x60;contact&#x60;**: Supports **or** and **and** groups.     -  **&#x60;list_membership&#x60;**: Supports **or** groups.    -  **&#x60;tags&#x60;**: Supports **or** groups.  If you do not specify &#x60;list_membership&#x60; as criteria, Constant Contact evaluates all contacts in your account. To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated.  For more use case information, see the [Segments Overview](/api_guide/segments_overview.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createSegmentRequest">The segment &#x60;name&#x60; and &#x60;segment_criteria&#x60; (requires single-string escaped JSON).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegment201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateSegment201Response>> CreateSegmentWithHttpInfoAsync(CreateSegmentRequest createSegmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createSegmentRequest' is set
            if (createSegmentRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createSegmentRequest' when calling SegmentsApi->CreateSegment");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createSegmentRequest;

            localVarRequestOptions.Operation = "SegmentsApi.CreateSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateSegment201Response>("/segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE a Segment Use this method to delete a segment from your account. Before deleting a segment, verify that the segment is not associated with a scheduled campaign.  Deleted segments do not display in the results when using the &#x60;GET /segments&#x60; endpoint. If you know the &#x60;segment_id&#x60;, you can use the &#x60;GET /segments/{segment_id}&#x60; endpoint to view the deleted segment&#39;s details. A segment&#39;s details are preserved for external reference purposes, such as displaying the segment name in a campaign&#39;s history. For more use case information, see [Delete a Segment](/api_guide/segment_delete.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteSegment(int segmentId, int operationIndex = 0)
        {
            DeleteSegmentWithHttpInfo(segmentId);
        }

        /// <summary>
        /// DELETE a Segment Use this method to delete a segment from your account. Before deleting a segment, verify that the segment is not associated with a scheduled campaign.  Deleted segments do not display in the results when using the &#x60;GET /segments&#x60; endpoint. If you know the &#x60;segment_id&#x60;, you can use the &#x60;GET /segments/{segment_id}&#x60; endpoint to view the deleted segment&#39;s details. A segment&#39;s details are preserved for external reference purposes, such as displaying the segment name in a campaign&#39;s history. For more use case information, see [Delete a Segment](/api_guide/segment_delete.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ConstantContactApi.Client.ApiResponse<Object> DeleteSegmentWithHttpInfo(int segmentId, int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("segment_id", ConstantContactApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter

            localVarRequestOptions.Operation = "SegmentsApi.DeleteSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/segments/{segment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE a Segment Use this method to delete a segment from your account. Before deleting a segment, verify that the segment is not associated with a scheduled campaign.  Deleted segments do not display in the results when using the &#x60;GET /segments&#x60; endpoint. If you know the &#x60;segment_id&#x60;, you can use the &#x60;GET /segments/{segment_id}&#x60; endpoint to view the deleted segment&#39;s details. A segment&#39;s details are preserved for external reference purposes, such as displaying the segment name in a campaign&#39;s history. For more use case information, see [Delete a Segment](/api_guide/segment_delete.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteSegmentAsync(int segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteSegmentWithHttpInfoAsync(segmentId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// DELETE a Segment Use this method to delete a segment from your account. Before deleting a segment, verify that the segment is not associated with a scheduled campaign.  Deleted segments do not display in the results when using the &#x60;GET /segments&#x60; endpoint. If you know the &#x60;segment_id&#x60;, you can use the &#x60;GET /segments/{segment_id}&#x60; endpoint to view the deleted segment&#39;s details. A segment&#39;s details are preserved for external reference purposes, such as displaying the segment name in a campaign&#39;s history. For more use case information, see [Delete a Segment](/api_guide/segment_delete.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<Object>> DeleteSegmentWithHttpInfoAsync(int segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("segment_id", ConstantContactApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter

            localVarRequestOptions.Operation = "SegmentsApi.DeleteSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/segments/{segment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET all Segments Use this method to get a list of all segments associated with the account. You can sort segment results and limit the number of segments that display per page. Deleted segments are excluded from the results. For more use case information, see [Get All Segments](/api_guide/segment_get_all.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of segments to return on a page. (optional, default to &quot;1000&quot;)</param>
        /// <param name="sortBy">Specify the segment sort order to use. Sort by name (&#x60;sort_by&#x3D;name&#x60;) in ascending order, or sort by date (&#x60;sort_by&#x3D;date&#x60;) in descending order with the most recently updated segments listed first. (optional, default to &quot;date&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllSegments200Response</returns>
        public GetAllSegments200Response GetAllSegments(string? limit = default(string?), string? sortBy = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAllSegments200Response> localVarResponse = GetAllSegmentsWithHttpInfo(limit, sortBy);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET all Segments Use this method to get a list of all segments associated with the account. You can sort segment results and limit the number of segments that display per page. Deleted segments are excluded from the results. For more use case information, see [Get All Segments](/api_guide/segment_get_all.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of segments to return on a page. (optional, default to &quot;1000&quot;)</param>
        /// <param name="sortBy">Specify the segment sort order to use. Sort by name (&#x60;sort_by&#x3D;name&#x60;) in ascending order, or sort by date (&#x60;sort_by&#x3D;date&#x60;) in descending order with the most recently updated segments listed first. (optional, default to &quot;date&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllSegments200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetAllSegments200Response> GetAllSegmentsWithHttpInfo(string? limit = default(string?), string? sortBy = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            localVarRequestOptions.Operation = "SegmentsApi.GetAllSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllSegments200Response>("/segments", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET all Segments Use this method to get a list of all segments associated with the account. You can sort segment results and limit the number of segments that display per page. Deleted segments are excluded from the results. For more use case information, see [Get All Segments](/api_guide/segment_get_all.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of segments to return on a page. (optional, default to &quot;1000&quot;)</param>
        /// <param name="sortBy">Specify the segment sort order to use. Sort by name (&#x60;sort_by&#x3D;name&#x60;) in ascending order, or sort by date (&#x60;sort_by&#x3D;date&#x60;) in descending order with the most recently updated segments listed first. (optional, default to &quot;date&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllSegments200Response</returns>
        public async System.Threading.Tasks.Task<GetAllSegments200Response> GetAllSegmentsAsync(string? limit = default(string?), string? sortBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAllSegments200Response> localVarResponse = await GetAllSegmentsWithHttpInfoAsync(limit, sortBy, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET all Segments Use this method to get a list of all segments associated with the account. You can sort segment results and limit the number of segments that display per page. Deleted segments are excluded from the results. For more use case information, see [Get All Segments](/api_guide/segment_get_all.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of segments to return on a page. (optional, default to &quot;1000&quot;)</param>
        /// <param name="sortBy">Specify the segment sort order to use. Sort by name (&#x60;sort_by&#x3D;name&#x60;) in ascending order, or sort by date (&#x60;sort_by&#x3D;date&#x60;) in descending order with the most recently updated segments listed first. (optional, default to &quot;date&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllSegments200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAllSegments200Response>> GetAllSegmentsWithHttpInfoAsync(string? limit = default(string?), string? sortBy = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (sortBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "sort_by", sortBy));
            }

            localVarRequestOptions.Operation = "SegmentsApi.GetAllSegments";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllSegments200Response>("/segments", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllSegments", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Segment&#39;s Details Use this method to get details about a segment, including the segment criteria. If you know the &#x60;segment_id&#x60; You can also use this method to get details about a deleted segment. For more use case information, see [Get a Segment&#39;s Details](/api_guide/segment_get.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system-generated unique ID that identifies a segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegment201Response</returns>
        public CreateSegment201Response GetSegmentById(int segmentId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateSegment201Response> localVarResponse = GetSegmentByIdWithHttpInfo(segmentId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Segment&#39;s Details Use this method to get details about a segment, including the segment criteria. If you know the &#x60;segment_id&#x60; You can also use this method to get details about a deleted segment. For more use case information, see [Get a Segment&#39;s Details](/api_guide/segment_get.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system-generated unique ID that identifies a segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegment201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateSegment201Response> GetSegmentByIdWithHttpInfo(int segmentId, int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("segment_id", ConstantContactApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter

            localVarRequestOptions.Operation = "SegmentsApi.GetSegmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CreateSegment201Response>("/segments/{segment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Segment&#39;s Details Use this method to get details about a segment, including the segment criteria. If you know the &#x60;segment_id&#x60; You can also use this method to get details about a deleted segment. For more use case information, see [Get a Segment&#39;s Details](/api_guide/segment_get.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system-generated unique ID that identifies a segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegment201Response</returns>
        public async System.Threading.Tasks.Task<CreateSegment201Response> GetSegmentByIdAsync(int segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateSegment201Response> localVarResponse = await GetSegmentByIdWithHttpInfoAsync(segmentId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Segment&#39;s Details Use this method to get details about a segment, including the segment criteria. If you know the &#x60;segment_id&#x60; You can also use this method to get details about a deleted segment. For more use case information, see [Get a Segment&#39;s Details](/api_guide/segment_get.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system-generated unique ID that identifies a segment.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegment201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateSegment201Response>> GetSegmentByIdWithHttpInfoAsync(int segmentId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("segment_id", ConstantContactApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter

            localVarRequestOptions.Operation = "SegmentsApi.GetSegmentById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CreateSegment201Response>("/segments/{segment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetSegmentById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) a Segment Use this method to update an existing segment&#39;s name (&#x60;name&#x60;) and/or contact selection criteria (&#x60;segment_criteria&#x60;). You must specify both the &#x60;name&#x60; and the &#x60;segment_criteria&#x60; in the request body, even if you don&#39;t plan to update both. The segment&#39;s name must be unique and the JSON must be valid (requires single-string escaped JSON). To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated. For more use case information, see [Update Segment Details](/api_guide/segment_update.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="createSegmentRequest">Include both the &#x60;name&#x60; and &#x60;segment_criteria&#x60; (single-string escaped JSON) in the body request, then make updates to either or both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegment201Response</returns>
        public CreateSegment201Response UpdateSegment(int segmentId, CreateSegmentRequest createSegmentRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateSegment201Response> localVarResponse = UpdateSegmentWithHttpInfo(segmentId, createSegmentRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) a Segment Use this method to update an existing segment&#39;s name (&#x60;name&#x60;) and/or contact selection criteria (&#x60;segment_criteria&#x60;). You must specify both the &#x60;name&#x60; and the &#x60;segment_criteria&#x60; in the request body, even if you don&#39;t plan to update both. The segment&#39;s name must be unique and the JSON must be valid (requires single-string escaped JSON). To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated. For more use case information, see [Update Segment Details](/api_guide/segment_update.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="createSegmentRequest">Include both the &#x60;name&#x60; and &#x60;segment_criteria&#x60; (single-string escaped JSON) in the body request, then make updates to either or both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegment201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateSegment201Response> UpdateSegmentWithHttpInfo(int segmentId, CreateSegmentRequest createSegmentRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createSegmentRequest' is set
            if (createSegmentRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createSegmentRequest' when calling SegmentsApi->UpdateSegment");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("segment_id", ConstantContactApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter
            localVarRequestOptions.Data = createSegmentRequest;

            localVarRequestOptions.Operation = "SegmentsApi.UpdateSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<CreateSegment201Response>("/segments/{segment_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (update) a Segment Use this method to update an existing segment&#39;s name (&#x60;name&#x60;) and/or contact selection criteria (&#x60;segment_criteria&#x60;). You must specify both the &#x60;name&#x60; and the &#x60;segment_criteria&#x60; in the request body, even if you don&#39;t plan to update both. The segment&#39;s name must be unique and the JSON must be valid (requires single-string escaped JSON). To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated. For more use case information, see [Update Segment Details](/api_guide/segment_update.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="createSegmentRequest">Include both the &#x60;name&#x60; and &#x60;segment_criteria&#x60; (single-string escaped JSON) in the body request, then make updates to either or both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegment201Response</returns>
        public async System.Threading.Tasks.Task<CreateSegment201Response> UpdateSegmentAsync(int segmentId, CreateSegmentRequest createSegmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateSegment201Response> localVarResponse = await UpdateSegmentWithHttpInfoAsync(segmentId, createSegmentRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (update) a Segment Use this method to update an existing segment&#39;s name (&#x60;name&#x60;) and/or contact selection criteria (&#x60;segment_criteria&#x60;). You must specify both the &#x60;name&#x60; and the &#x60;segment_criteria&#x60; in the request body, even if you don&#39;t plan to update both. The segment&#39;s name must be unique and the JSON must be valid (requires single-string escaped JSON). To avoid returning a 400 error response, when specifying the &#x60;segment_criteria&#x60; do not request more than 500 email campaigns or a date range greater than 1825 days (5 years) be evaluated. For more use case information, see [Update Segment Details](/api_guide/segment_update.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="createSegmentRequest">Include both the &#x60;name&#x60; and &#x60;segment_criteria&#x60; (single-string escaped JSON) in the body request, then make updates to either or both.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegment201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateSegment201Response>> UpdateSegmentWithHttpInfoAsync(int segmentId, CreateSegmentRequest createSegmentRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createSegmentRequest' is set
            if (createSegmentRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createSegmentRequest' when calling SegmentsApi->UpdateSegment");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("segment_id", ConstantContactApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter
            localVarRequestOptions.Data = createSegmentRequest;

            localVarRequestOptions.Operation = "SegmentsApi.UpdateSegment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<CreateSegment201Response>("/segments/{segment_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSegment", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PATCH (rename) a Segment Use this method to update an existing segment &#x60;name&#x60; with a new unique name in the request body. For more use case information, see [Rename a Segment](/api_guide/segment_rename.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="updateSegmentNameRequest">Include the existing segment &#x60;name&#x60; in the body request, then rename the segment using a unique new name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateSegment201Response</returns>
        public CreateSegment201Response UpdateSegmentName(int segmentId, UpdateSegmentNameRequest updateSegmentNameRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateSegment201Response> localVarResponse = UpdateSegmentNameWithHttpInfo(segmentId, updateSegmentNameRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PATCH (rename) a Segment Use this method to update an existing segment &#x60;name&#x60; with a new unique name in the request body. For more use case information, see [Rename a Segment](/api_guide/segment_rename.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="updateSegmentNameRequest">Include the existing segment &#x60;name&#x60; in the body request, then rename the segment using a unique new name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateSegment201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateSegment201Response> UpdateSegmentNameWithHttpInfo(int segmentId, UpdateSegmentNameRequest updateSegmentNameRequest, int operationIndex = 0)
        {
            // verify the required parameter 'updateSegmentNameRequest' is set
            if (updateSegmentNameRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateSegmentNameRequest' when calling SegmentsApi->UpdateSegmentName");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("segment_id", ConstantContactApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter
            localVarRequestOptions.Data = updateSegmentNameRequest;

            localVarRequestOptions.Operation = "SegmentsApi.UpdateSegmentName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CreateSegment201Response>("/segments/{segment_id}/name", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSegmentName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PATCH (rename) a Segment Use this method to update an existing segment &#x60;name&#x60; with a new unique name in the request body. For more use case information, see [Rename a Segment](/api_guide/segment_rename.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="updateSegmentNameRequest">Include the existing segment &#x60;name&#x60; in the body request, then rename the segment using a unique new name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSegment201Response</returns>
        public async System.Threading.Tasks.Task<CreateSegment201Response> UpdateSegmentNameAsync(int segmentId, UpdateSegmentNameRequest updateSegmentNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateSegment201Response> localVarResponse = await UpdateSegmentNameWithHttpInfoAsync(segmentId, updateSegmentNameRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PATCH (rename) a Segment Use this method to update an existing segment &#x60;name&#x60; with a new unique name in the request body. For more use case information, see [Rename a Segment](/api_guide/segment_rename.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="segmentId">The system generated ID that uniquely identifies the segment that you want to modify.</param>
        /// <param name="updateSegmentNameRequest">Include the existing segment &#x60;name&#x60; in the body request, then rename the segment using a unique new name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSegment201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateSegment201Response>> UpdateSegmentNameWithHttpInfoAsync(int segmentId, UpdateSegmentNameRequest updateSegmentNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'updateSegmentNameRequest' is set
            if (updateSegmentNameRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'updateSegmentNameRequest' when calling SegmentsApi->UpdateSegmentName");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("segment_id", ConstantContactApi.Client.ClientUtils.ParameterToString(segmentId)); // path parameter
            localVarRequestOptions.Data = updateSegmentNameRequest;

            localVarRequestOptions.Operation = "SegmentsApi.UpdateSegmentName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CreateSegment201Response>("/segments/{segment_id}/name", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateSegmentName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
