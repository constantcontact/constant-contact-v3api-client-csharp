/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.53
 *
 * The version of the OpenAPI document: 1.0.171
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSReportingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GET an SMS Campaigns Summary Report
        /// </summary>
        /// <remarks>
        /// Use this method to get SMS campaign summary details, including the total number of times that each contact uniquely interacted with each tracked campaign activity and aggregate tracking statistics. Results are sorted in descending order by the date the SMS was last sent (&#x60;last_sent_date&#x60;). The &#x60;start_at&#x60; date is required. Use both the &#x60;start_at&#x60; and &#x60;end_at&#x60; date query parameters to return only SMS campaign summary details that occurred within a specified date range. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or after the required &#x60;start_at&#x60; date you specify. ISO 8601 format.</param>
        /// <param name="limit">Use to limit the number of results to return on a single page (from 1 to 50). The default setting is 50. (optional, default to &quot;50&quot;)</param>
        /// <param name="endAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or before the &#x60;end_at&#x60; date you specify. ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllBulkSmsCampaignSummaries200Response</returns>
        GetAllBulkSmsCampaignSummaries200Response GetAllBulkSmsCampaignSummaries(string startAt, string? limit = default(string?), string? endAt = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an SMS Campaigns Summary Report
        /// </summary>
        /// <remarks>
        /// Use this method to get SMS campaign summary details, including the total number of times that each contact uniquely interacted with each tracked campaign activity and aggregate tracking statistics. Results are sorted in descending order by the date the SMS was last sent (&#x60;last_sent_date&#x60;). The &#x60;start_at&#x60; date is required. Use both the &#x60;start_at&#x60; and &#x60;end_at&#x60; date query parameters to return only SMS campaign summary details that occurred within a specified date range. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or after the required &#x60;start_at&#x60; date you specify. ISO 8601 format.</param>
        /// <param name="limit">Use to limit the number of results to return on a single page (from 1 to 50). The default setting is 50. (optional, default to &quot;50&quot;)</param>
        /// <param name="endAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or before the &#x60;end_at&#x60; date you specify. ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllBulkSmsCampaignSummaries200Response</returns>
        ApiResponse<GetAllBulkSmsCampaignSummaries200Response> GetAllBulkSmsCampaignSummariesWithHttpInfo(string startAt, string? limit = default(string?), string? endAt = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSReportingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GET an SMS Campaigns Summary Report
        /// </summary>
        /// <remarks>
        /// Use this method to get SMS campaign summary details, including the total number of times that each contact uniquely interacted with each tracked campaign activity and aggregate tracking statistics. Results are sorted in descending order by the date the SMS was last sent (&#x60;last_sent_date&#x60;). The &#x60;start_at&#x60; date is required. Use both the &#x60;start_at&#x60; and &#x60;end_at&#x60; date query parameters to return only SMS campaign summary details that occurred within a specified date range. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or after the required &#x60;start_at&#x60; date you specify. ISO 8601 format.</param>
        /// <param name="limit">Use to limit the number of results to return on a single page (from 1 to 50). The default setting is 50. (optional, default to &quot;50&quot;)</param>
        /// <param name="endAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or before the &#x60;end_at&#x60; date you specify. ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllBulkSmsCampaignSummaries200Response</returns>
        System.Threading.Tasks.Task<GetAllBulkSmsCampaignSummaries200Response> GetAllBulkSmsCampaignSummariesAsync(string startAt, string? limit = default(string?), string? endAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an SMS Campaigns Summary Report
        /// </summary>
        /// <remarks>
        /// Use this method to get SMS campaign summary details, including the total number of times that each contact uniquely interacted with each tracked campaign activity and aggregate tracking statistics. Results are sorted in descending order by the date the SMS was last sent (&#x60;last_sent_date&#x60;). The &#x60;start_at&#x60; date is required. Use both the &#x60;start_at&#x60; and &#x60;end_at&#x60; date query parameters to return only SMS campaign summary details that occurred within a specified date range. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or after the required &#x60;start_at&#x60; date you specify. ISO 8601 format.</param>
        /// <param name="limit">Use to limit the number of results to return on a single page (from 1 to 50). The default setting is 50. (optional, default to &quot;50&quot;)</param>
        /// <param name="endAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or before the &#x60;end_at&#x60; date you specify. ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllBulkSmsCampaignSummaries200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllBulkSmsCampaignSummaries200Response>> GetAllBulkSmsCampaignSummariesWithHttpInfoAsync(string startAt, string? limit = default(string?), string? endAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISMSReportingApi : ISMSReportingApiSync, ISMSReportingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SMSReportingApi : ISMSReportingApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SMSReportingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SMSReportingApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSReportingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SMSReportingApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SMSReportingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SMSReportingApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GET an SMS Campaigns Summary Report Use this method to get SMS campaign summary details, including the total number of times that each contact uniquely interacted with each tracked campaign activity and aggregate tracking statistics. Results are sorted in descending order by the date the SMS was last sent (&#x60;last_sent_date&#x60;). The &#x60;start_at&#x60; date is required. Use both the &#x60;start_at&#x60; and &#x60;end_at&#x60; date query parameters to return only SMS campaign summary details that occurred within a specified date range. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or after the required &#x60;start_at&#x60; date you specify. ISO 8601 format.</param>
        /// <param name="limit">Use to limit the number of results to return on a single page (from 1 to 50). The default setting is 50. (optional, default to &quot;50&quot;)</param>
        /// <param name="endAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or before the &#x60;end_at&#x60; date you specify. ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllBulkSmsCampaignSummaries200Response</returns>
        public GetAllBulkSmsCampaignSummaries200Response GetAllBulkSmsCampaignSummaries(string startAt, string? limit = default(string?), string? endAt = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAllBulkSmsCampaignSummaries200Response> localVarResponse = GetAllBulkSmsCampaignSummariesWithHttpInfo(startAt, limit, endAt);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an SMS Campaigns Summary Report Use this method to get SMS campaign summary details, including the total number of times that each contact uniquely interacted with each tracked campaign activity and aggregate tracking statistics. Results are sorted in descending order by the date the SMS was last sent (&#x60;last_sent_date&#x60;). The &#x60;start_at&#x60; date is required. Use both the &#x60;start_at&#x60; and &#x60;end_at&#x60; date query parameters to return only SMS campaign summary details that occurred within a specified date range. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or after the required &#x60;start_at&#x60; date you specify. ISO 8601 format.</param>
        /// <param name="limit">Use to limit the number of results to return on a single page (from 1 to 50). The default setting is 50. (optional, default to &quot;50&quot;)</param>
        /// <param name="endAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or before the &#x60;end_at&#x60; date you specify. ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllBulkSmsCampaignSummaries200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetAllBulkSmsCampaignSummaries200Response> GetAllBulkSmsCampaignSummariesWithHttpInfo(string startAt, string? limit = default(string?), string? endAt = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'startAt' is set
            if (startAt == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'startAt' when calling SMSReportingApi->GetAllBulkSmsCampaignSummaries");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            localVarRequestOptions.Operation = "SMSReportingApi.GetAllBulkSmsCampaignSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllBulkSmsCampaignSummaries200Response>("/reports/summary_reports/sms_campaign_summaries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllBulkSmsCampaignSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an SMS Campaigns Summary Report Use this method to get SMS campaign summary details, including the total number of times that each contact uniquely interacted with each tracked campaign activity and aggregate tracking statistics. Results are sorted in descending order by the date the SMS was last sent (&#x60;last_sent_date&#x60;). The &#x60;start_at&#x60; date is required. Use both the &#x60;start_at&#x60; and &#x60;end_at&#x60; date query parameters to return only SMS campaign summary details that occurred within a specified date range. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or after the required &#x60;start_at&#x60; date you specify. ISO 8601 format.</param>
        /// <param name="limit">Use to limit the number of results to return on a single page (from 1 to 50). The default setting is 50. (optional, default to &quot;50&quot;)</param>
        /// <param name="endAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or before the &#x60;end_at&#x60; date you specify. ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllBulkSmsCampaignSummaries200Response</returns>
        public async System.Threading.Tasks.Task<GetAllBulkSmsCampaignSummaries200Response> GetAllBulkSmsCampaignSummariesAsync(string startAt, string? limit = default(string?), string? endAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAllBulkSmsCampaignSummaries200Response> localVarResponse = await GetAllBulkSmsCampaignSummariesWithHttpInfoAsync(startAt, limit, endAt, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an SMS Campaigns Summary Report Use this method to get SMS campaign summary details, including the total number of times that each contact uniquely interacted with each tracked campaign activity and aggregate tracking statistics. Results are sorted in descending order by the date the SMS was last sent (&#x60;last_sent_date&#x60;). The &#x60;start_at&#x60; date is required. Use both the &#x60;start_at&#x60; and &#x60;end_at&#x60; date query parameters to return only SMS campaign summary details that occurred within a specified date range. Use the &#x60;limit&#x60; query parameter to limit the number of results returned per page. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="startAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or after the required &#x60;start_at&#x60; date you specify. ISO 8601 format.</param>
        /// <param name="limit">Use to limit the number of results to return on a single page (from 1 to 50). The default setting is 50. (optional, default to &quot;50&quot;)</param>
        /// <param name="endAt">Use to limit the results to include SMS campaign summary details for SMS campaigns sent on or before the &#x60;end_at&#x60; date you specify. ISO 8601 format. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllBulkSmsCampaignSummaries200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAllBulkSmsCampaignSummaries200Response>> GetAllBulkSmsCampaignSummariesWithHttpInfoAsync(string startAt, string? limit = default(string?), string? endAt = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'startAt' is set
            if (startAt == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'startAt' when calling SMSReportingApi->GetAllBulkSmsCampaignSummaries");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "start_at", startAt));
            if (endAt != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "end_at", endAt));
            }

            localVarRequestOptions.Operation = "SMSReportingApi.GetAllBulkSmsCampaignSummaries";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllBulkSmsCampaignSummaries200Response>("/reports/summary_reports/sms_campaign_summaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllBulkSmsCampaignSummaries", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
