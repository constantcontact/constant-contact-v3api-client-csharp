/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailReportingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// GET an Email Bounces Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact&#39;s email address, unique ID, and the email bounce date and time. Use the &lt;code&gt;bounce_code&lt;/code&gt; query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="bounceCode">To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBouncesReport200Response</returns>
        GetBouncesReport200Response GetBouncesReport(Guid campaignActivityId, List<string>? bounceCode = default(List<string>?), string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Bounces Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact&#39;s email address, unique ID, and the email bounce date and time. Use the &lt;code&gt;bounce_code&lt;/code&gt; query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="bounceCode">To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBouncesReport200Response</returns>
        ApiResponse<GetBouncesReport200Response> GetBouncesReportWithHttpInfo(Guid campaignActivityId, List<string>? bounceCode = default(List<string>?), string? limit = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET an Email Links Report
        /// </summary>
        /// <remarks>
        /// Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the &#x60;no_clicks&#x60; query parameter to &#x60;true&#x60;.  You can return reporting data for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="noClicks">Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCampaignActivityLinkReport200Response</returns>
        GetCampaignActivityLinkReport200Response GetCampaignActivityLinkReport(Guid campaignActivityId, bool? noClicks = default(bool?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Links Report
        /// </summary>
        /// <remarks>
        /// Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the &#x60;no_clicks&#x60; query parameter to &#x60;true&#x60;.  You can return reporting data for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="noClicks">Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCampaignActivityLinkReport200Response</returns>
        ApiResponse<GetCampaignActivityLinkReport200Response> GetCampaignActivityLinkReportWithHttpInfo(Guid campaignActivityId, bool? noClicks = default(bool?), int operationIndex = 0);
        /// <summary>
        /// GET an Email Clicks Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the &#x60;url_id&#x60; query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="urlId">The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetClicksReport200Response</returns>
        GetClicksReport200Response GetClicksReport(Guid campaignActivityId, long? urlId = default(long?), string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Clicks Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the &#x60;url_id&#x60; query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="urlId">The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetClicksReport200Response</returns>
        ApiResponse<GetClicksReport200Response> GetClicksReportWithHttpInfo(Guid campaignActivityId, long? urlId = default(long?), string? limit = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET an Email Did Not Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDidNotOpensReport200Response</returns>
        GetDidNotOpensReport200Response GetDidNotOpensReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Did Not Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDidNotOpensReport200Response</returns>
        ApiResponse<GetDidNotOpensReport200Response> GetDidNotOpensReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET an Email Campaign Activity Stats Report
        /// </summary>
        /// <remarks>
        /// Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_activity_id&#x60;, this method returns the &#x60;campaign_id&#x60;, the total counts (&#x60;stats&#x60;) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (&#x60;last_refresh_time&#x60;) the &#x60;stats&#x60;.  When requesting statistics for multiple email campaign activities, if one or more of the &#x60;campaign_activity_ids&#x60; do not exist, were deleted, or do not have any stats associated with it, the &#x60;campaign_activity_ids&#x60; and error details display under &#x60;errors&#x60;. If any single specified &#x60;campaign_activity_id&#x60; is invalid (malformed), a 404 error response is returned for all campaign activities.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityIds">A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignActivityReport200Response</returns>
        GetEmailCampaignActivityReport200Response GetEmailCampaignActivityReport(string campaignActivityIds, int operationIndex = 0);

        /// <summary>
        /// GET an Email Campaign Activity Stats Report
        /// </summary>
        /// <remarks>
        /// Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_activity_id&#x60;, this method returns the &#x60;campaign_id&#x60;, the total counts (&#x60;stats&#x60;) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (&#x60;last_refresh_time&#x60;) the &#x60;stats&#x60;.  When requesting statistics for multiple email campaign activities, if one or more of the &#x60;campaign_activity_ids&#x60; do not exist, were deleted, or do not have any stats associated with it, the &#x60;campaign_activity_ids&#x60; and error details display under &#x60;errors&#x60;. If any single specified &#x60;campaign_activity_id&#x60; is invalid (malformed), a 404 error response is returned for all campaign activities.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityIds">A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignActivityReport200Response</returns>
        ApiResponse<GetEmailCampaignActivityReport200Response> GetEmailCampaignActivityReportWithHttpInfo(string campaignActivityIds, int operationIndex = 0);
        /// <summary>
        /// GET an Email Campaigns Summary Report
        /// </summary>
        /// <remarks>
        /// Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (&lt;code&gt;last_sent_date&lt;/code&gt;). Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \&quot;[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\&quot;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignReport200Response</returns>
        GetEmailCampaignReport200Response GetEmailCampaignReport(string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Campaigns Summary Report
        /// </summary>
        /// <remarks>
        /// Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (&lt;code&gt;last_sent_date&lt;/code&gt;). Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \&quot;[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\&quot;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignReport200Response</returns>
        ApiResponse<GetEmailCampaignReport200Response> GetEmailCampaignReportWithHttpInfo(string? limit = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET an Email Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailOpensReport200Response</returns>
        GetEmailOpensReport200Response GetEmailOpensReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailOpensReport200Response</returns>
        ApiResponse<GetEmailOpensReport200Response> GetEmailOpensReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET an Email Sends Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact&#39;s email address, the contact&#39;s first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailSendsReport200Response</returns>
        GetEmailSendsReport200Response GetEmailSendsReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Sends Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact&#39;s email address, the contact&#39;s first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailSendsReport200Response</returns>
        ApiResponse<GetEmailSendsReport200Response> GetEmailSendsReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET an Email Campaign Stats Report
        /// </summary>
        /// <remarks>
        /// Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_id&#x60;, this method returns lists that include total counts (&#x60;stats&#x60;) for each type of tracked email and relevant campaign-related percentages (&#x60;percents&#x60;). It also returns the date and time at which the campaign stats were last refreshed. If any specified &#x60;campaign_id&#x60; is invalid, a 404 error response is returned for all campaigns.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignIds">A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailStatsReport200Response</returns>
        GetEmailStatsReport200Response GetEmailStatsReport(string campaignIds, int operationIndex = 0);

        /// <summary>
        /// GET an Email Campaign Stats Report
        /// </summary>
        /// <remarks>
        /// Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_id&#x60;, this method returns lists that include total counts (&#x60;stats&#x60;) for each type of tracked email and relevant campaign-related percentages (&#x60;percents&#x60;). It also returns the date and time at which the campaign stats were last refreshed. If any specified &#x60;campaign_id&#x60; is invalid, a 404 error response is returned for all campaigns.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignIds">A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailStatsReport200Response</returns>
        ApiResponse<GetEmailStatsReport200Response> GetEmailStatsReportWithHttpInfo(string campaignIds, int operationIndex = 0);
        /// <summary>
        /// GET an Email Forwards Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetForwardsReport200Response</returns>
        GetForwardsReport200Response GetForwardsReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Forwards Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetForwardsReport200Response</returns>
        ApiResponse<GetForwardsReport200Response> GetForwardsReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET an Email Opt-outs Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact&#39;s email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOptoutsReport200Response</returns>
        GetOptoutsReport200Response GetOptoutsReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Opt-outs Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact&#39;s email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOptoutsReport200Response</returns>
        ApiResponse<GetOptoutsReport200Response> GetOptoutsReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET an Email Unique Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailOpensReport200Response</returns>
        GetEmailOpensReport200Response GetUniqueOpensReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET an Email Unique Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailOpensReport200Response</returns>
        ApiResponse<GetEmailOpensReport200Response> GetUniqueOpensReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailReportingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// GET an Email Bounces Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact&#39;s email address, unique ID, and the email bounce date and time. Use the &lt;code&gt;bounce_code&lt;/code&gt; query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="bounceCode">To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBouncesReport200Response</returns>
        System.Threading.Tasks.Task<GetBouncesReport200Response> GetBouncesReportAsync(Guid campaignActivityId, List<string>? bounceCode = default(List<string>?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Bounces Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact&#39;s email address, unique ID, and the email bounce date and time. Use the &lt;code&gt;bounce_code&lt;/code&gt; query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="bounceCode">To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBouncesReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetBouncesReport200Response>> GetBouncesReportWithHttpInfoAsync(Guid campaignActivityId, List<string>? bounceCode = default(List<string>?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Links Report
        /// </summary>
        /// <remarks>
        /// Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the &#x60;no_clicks&#x60; query parameter to &#x60;true&#x60;.  You can return reporting data for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="noClicks">Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCampaignActivityLinkReport200Response</returns>
        System.Threading.Tasks.Task<GetCampaignActivityLinkReport200Response> GetCampaignActivityLinkReportAsync(Guid campaignActivityId, bool? noClicks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Links Report
        /// </summary>
        /// <remarks>
        /// Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the &#x60;no_clicks&#x60; query parameter to &#x60;true&#x60;.  You can return reporting data for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="noClicks">Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCampaignActivityLinkReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetCampaignActivityLinkReport200Response>> GetCampaignActivityLinkReportWithHttpInfoAsync(Guid campaignActivityId, bool? noClicks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Clicks Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the &#x60;url_id&#x60; query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="urlId">The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClicksReport200Response</returns>
        System.Threading.Tasks.Task<GetClicksReport200Response> GetClicksReportAsync(Guid campaignActivityId, long? urlId = default(long?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Clicks Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the &#x60;url_id&#x60; query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="urlId">The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClicksReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetClicksReport200Response>> GetClicksReportWithHttpInfoAsync(Guid campaignActivityId, long? urlId = default(long?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Did Not Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDidNotOpensReport200Response</returns>
        System.Threading.Tasks.Task<GetDidNotOpensReport200Response> GetDidNotOpensReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Did Not Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDidNotOpensReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetDidNotOpensReport200Response>> GetDidNotOpensReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Campaign Activity Stats Report
        /// </summary>
        /// <remarks>
        /// Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_activity_id&#x60;, this method returns the &#x60;campaign_id&#x60;, the total counts (&#x60;stats&#x60;) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (&#x60;last_refresh_time&#x60;) the &#x60;stats&#x60;.  When requesting statistics for multiple email campaign activities, if one or more of the &#x60;campaign_activity_ids&#x60; do not exist, were deleted, or do not have any stats associated with it, the &#x60;campaign_activity_ids&#x60; and error details display under &#x60;errors&#x60;. If any single specified &#x60;campaign_activity_id&#x60; is invalid (malformed), a 404 error response is returned for all campaign activities.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityIds">A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignActivityReport200Response</returns>
        System.Threading.Tasks.Task<GetEmailCampaignActivityReport200Response> GetEmailCampaignActivityReportAsync(string campaignActivityIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Campaign Activity Stats Report
        /// </summary>
        /// <remarks>
        /// Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_activity_id&#x60;, this method returns the &#x60;campaign_id&#x60;, the total counts (&#x60;stats&#x60;) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (&#x60;last_refresh_time&#x60;) the &#x60;stats&#x60;.  When requesting statistics for multiple email campaign activities, if one or more of the &#x60;campaign_activity_ids&#x60; do not exist, were deleted, or do not have any stats associated with it, the &#x60;campaign_activity_ids&#x60; and error details display under &#x60;errors&#x60;. If any single specified &#x60;campaign_activity_id&#x60; is invalid (malformed), a 404 error response is returned for all campaign activities.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityIds">A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignActivityReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailCampaignActivityReport200Response>> GetEmailCampaignActivityReportWithHttpInfoAsync(string campaignActivityIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Campaigns Summary Report
        /// </summary>
        /// <remarks>
        /// Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (&lt;code&gt;last_sent_date&lt;/code&gt;). Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \&quot;[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\&quot;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignReport200Response</returns>
        System.Threading.Tasks.Task<GetEmailCampaignReport200Response> GetEmailCampaignReportAsync(string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Campaigns Summary Report
        /// </summary>
        /// <remarks>
        /// Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (&lt;code&gt;last_sent_date&lt;/code&gt;). Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \&quot;[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\&quot;
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailCampaignReport200Response>> GetEmailCampaignReportWithHttpInfoAsync(string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailOpensReport200Response</returns>
        System.Threading.Tasks.Task<GetEmailOpensReport200Response> GetEmailOpensReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailOpensReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailOpensReport200Response>> GetEmailOpensReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Sends Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact&#39;s email address, the contact&#39;s first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailSendsReport200Response</returns>
        System.Threading.Tasks.Task<GetEmailSendsReport200Response> GetEmailSendsReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Sends Report
        /// </summary>
        /// <remarks>
        /// Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact&#39;s email address, the contact&#39;s first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailSendsReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailSendsReport200Response>> GetEmailSendsReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Campaign Stats Report
        /// </summary>
        /// <remarks>
        /// Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_id&#x60;, this method returns lists that include total counts (&#x60;stats&#x60;) for each type of tracked email and relevant campaign-related percentages (&#x60;percents&#x60;). It also returns the date and time at which the campaign stats were last refreshed. If any specified &#x60;campaign_id&#x60; is invalid, a 404 error response is returned for all campaigns.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignIds">A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailStatsReport200Response</returns>
        System.Threading.Tasks.Task<GetEmailStatsReport200Response> GetEmailStatsReportAsync(string campaignIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Campaign Stats Report
        /// </summary>
        /// <remarks>
        /// Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_id&#x60;, this method returns lists that include total counts (&#x60;stats&#x60;) for each type of tracked email and relevant campaign-related percentages (&#x60;percents&#x60;). It also returns the date and time at which the campaign stats were last refreshed. If any specified &#x60;campaign_id&#x60; is invalid, a 404 error response is returned for all campaigns.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignIds">A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailStatsReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailStatsReport200Response>> GetEmailStatsReportWithHttpInfoAsync(string campaignIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Forwards Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetForwardsReport200Response</returns>
        System.Threading.Tasks.Task<GetForwardsReport200Response> GetForwardsReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Forwards Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetForwardsReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetForwardsReport200Response>> GetForwardsReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Opt-outs Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact&#39;s email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOptoutsReport200Response</returns>
        System.Threading.Tasks.Task<GetOptoutsReport200Response> GetOptoutsReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Opt-outs Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact&#39;s email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOptoutsReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOptoutsReport200Response>> GetOptoutsReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET an Email Unique Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailOpensReport200Response</returns>
        System.Threading.Tasks.Task<GetEmailOpensReport200Response> GetUniqueOpensReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET an Email Unique Opens Report
        /// </summary>
        /// <remarks>
        /// Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailOpensReport200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailOpensReport200Response>> GetUniqueOpensReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailReportingApi : IEmailReportingApiSync, IEmailReportingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailReportingApi : IEmailReportingApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailReportingApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailReportingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailReportingApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailReportingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailReportingApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailReportingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailReportingApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// GET an Email Bounces Report Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact&#39;s email address, unique ID, and the email bounce date and time. Use the &lt;code&gt;bounce_code&lt;/code&gt; query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="bounceCode">To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetBouncesReport200Response</returns>
        public GetBouncesReport200Response GetBouncesReport(Guid campaignActivityId, List<string>? bounceCode = default(List<string>?), string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetBouncesReport200Response> localVarResponse = GetBouncesReportWithHttpInfo(campaignActivityId, bounceCode, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Bounces Report Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact&#39;s email address, unique ID, and the email bounce date and time. Use the &lt;code&gt;bounce_code&lt;/code&gt; query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="bounceCode">To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetBouncesReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetBouncesReport200Response> GetBouncesReportWithHttpInfo(Guid campaignActivityId, List<string>? bounceCode = default(List<string>?), string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (bounceCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("multi", "bounce_code", bounceCode));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetBouncesReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetBouncesReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/bounces", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBouncesReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Bounces Report Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact&#39;s email address, unique ID, and the email bounce date and time. Use the &lt;code&gt;bounce_code&lt;/code&gt; query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="bounceCode">To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetBouncesReport200Response</returns>
        public async System.Threading.Tasks.Task<GetBouncesReport200Response> GetBouncesReportAsync(Guid campaignActivityId, List<string>? bounceCode = default(List<string>?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetBouncesReport200Response> localVarResponse = await GetBouncesReportWithHttpInfoAsync(campaignActivityId, bounceCode, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Bounces Report Use this method to get a report listing contact bounce data for the specified email campaign activity. This report lists the most recent bounce data first and includes contact information, such as the contact&#39;s email address, unique ID, and the email bounce date and time. Use the &lt;code&gt;bounce_code&lt;/code&gt; query parameter to limit the type of bounce data to return.  For more use case information, see [Get a Bounces Report for an Email Campaign Activity](/api_guide/email_summary_bounces_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="bounceCode">To return results for a specific bounce code, select the &#x60;bounce_code&#x60; from the drop-down list. To return results for multiple codes, repeat the bounce code parameter for each. For example, to return results for bounce codes &#x60;B&#x60; and &#x60;D&#x60; use &#x60;bounce_code&#x3D;B&amp;bounce_code&#x3D;D&#x60;. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetBouncesReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetBouncesReport200Response>> GetBouncesReportWithHttpInfoAsync(Guid campaignActivityId, List<string>? bounceCode = default(List<string>?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (bounceCode != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("multi", "bounce_code", bounceCode));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetBouncesReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetBouncesReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/bounces", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetBouncesReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Links Report Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the &#x60;no_clicks&#x60; query parameter to &#x60;true&#x60;.  You can return reporting data for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="noClicks">Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetCampaignActivityLinkReport200Response</returns>
        public GetCampaignActivityLinkReport200Response GetCampaignActivityLinkReport(Guid campaignActivityId, bool? noClicks = default(bool?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetCampaignActivityLinkReport200Response> localVarResponse = GetCampaignActivityLinkReportWithHttpInfo(campaignActivityId, noClicks);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Links Report Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the &#x60;no_clicks&#x60; query parameter to &#x60;true&#x60;.  You can return reporting data for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="noClicks">Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetCampaignActivityLinkReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetCampaignActivityLinkReport200Response> GetCampaignActivityLinkReportWithHttpInfo(Guid campaignActivityId, bool? noClicks = default(bool?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (noClicks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "no_clicks", noClicks));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetCampaignActivityLinkReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetCampaignActivityLinkReport200Response>("/reports/email_reports/{campaign_activity_id}/links", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignActivityLinkReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Links Report Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the &#x60;no_clicks&#x60; query parameter to &#x60;true&#x60;.  You can return reporting data for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="noClicks">Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetCampaignActivityLinkReport200Response</returns>
        public async System.Threading.Tasks.Task<GetCampaignActivityLinkReport200Response> GetCampaignActivityLinkReportAsync(Guid campaignActivityId, bool? noClicks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetCampaignActivityLinkReport200Response> localVarResponse = await GetCampaignActivityLinkReportWithHttpInfoAsync(campaignActivityId, noClicks, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Links Report Use this method to return link details, including the number of unique contacts that clicked each link in an email campaign activity, and the type of action associated with clicking each link. To include link details for links that were not clicked, set the &#x60;no_clicks&#x60; query parameter to &#x60;true&#x60;.  You can return reporting data for &#x60;primary_email&#x60; and &#x60;resend&#x60; role email campaign activities. For more use case information, see [Get an Email Links Report](/api_guide/email_links_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="noClicks">Set this query parameter to &#x60;true&#x60; to  return details for links that were not clicked in the response results. (optional, default to false)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetCampaignActivityLinkReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetCampaignActivityLinkReport200Response>> GetCampaignActivityLinkReportWithHttpInfoAsync(Guid campaignActivityId, bool? noClicks = default(bool?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (noClicks != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "no_clicks", noClicks));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetCampaignActivityLinkReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetCampaignActivityLinkReport200Response>("/reports/email_reports/{campaign_activity_id}/links", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCampaignActivityLinkReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Clicks Report Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the &#x60;url_id&#x60; query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="urlId">The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetClicksReport200Response</returns>
        public GetClicksReport200Response GetClicksReport(Guid campaignActivityId, long? urlId = default(long?), string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetClicksReport200Response> localVarResponse = GetClicksReportWithHttpInfo(campaignActivityId, urlId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Clicks Report Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the &#x60;url_id&#x60; query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="urlId">The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetClicksReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetClicksReport200Response> GetClicksReportWithHttpInfo(Guid campaignActivityId, long? urlId = default(long?), string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (urlId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "url_id", urlId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetClicksReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetClicksReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/clicks", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClicksReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Clicks Report Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the &#x60;url_id&#x60; query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="urlId">The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetClicksReport200Response</returns>
        public async System.Threading.Tasks.Task<GetClicksReport200Response> GetClicksReportAsync(Guid campaignActivityId, long? urlId = default(long?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetClicksReport200Response> localVarResponse = await GetClicksReportWithHttpInfoAsync(campaignActivityId, urlId, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Clicks Report Use this method to get each time a contact clicked a link, the click date and time, and the device type they used. Use the &#x60;url_id&#x60; query parameter to get a clicks report for a specific link URL. Clicks report data is sorted with most recent activity listed first.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="urlId">The ID that uniquely identifies a single link URL for which you want to get a clicks report. (optional)</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetClicksReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetClicksReport200Response>> GetClicksReportWithHttpInfoAsync(Guid campaignActivityId, long? urlId = default(long?), string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (urlId != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "url_id", urlId));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetClicksReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetClicksReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/clicks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClicksReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Did Not Opens Report Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetDidNotOpensReport200Response</returns>
        public GetDidNotOpensReport200Response GetDidNotOpensReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetDidNotOpensReport200Response> localVarResponse = GetDidNotOpensReportWithHttpInfo(campaignActivityId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Did Not Opens Report Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetDidNotOpensReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetDidNotOpensReport200Response> GetDidNotOpensReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetDidNotOpensReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetDidNotOpensReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/didnotopens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDidNotOpensReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Did Not Opens Report Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetDidNotOpensReport200Response</returns>
        public async System.Threading.Tasks.Task<GetDidNotOpensReport200Response> GetDidNotOpensReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetDidNotOpensReport200Response> localVarResponse = await GetDidNotOpensReportWithHttpInfoAsync(campaignActivityId, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Did Not Opens Report Use this method to get a report listing each contact that was sent, but did not open the specified email campaign activity. This report lists contact information such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was sent. This report lists the most recent activity first. For more use case information, see [Get a Did Not Opens Report for an Email Campaign Activity](/api_guide/email_summary_non_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetDidNotOpensReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetDidNotOpensReport200Response>> GetDidNotOpensReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetDidNotOpensReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetDidNotOpensReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/didnotopens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetDidNotOpensReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Campaign Activity Stats Report Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_activity_id&#x60;, this method returns the &#x60;campaign_id&#x60;, the total counts (&#x60;stats&#x60;) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (&#x60;last_refresh_time&#x60;) the &#x60;stats&#x60;.  When requesting statistics for multiple email campaign activities, if one or more of the &#x60;campaign_activity_ids&#x60; do not exist, were deleted, or do not have any stats associated with it, the &#x60;campaign_activity_ids&#x60; and error details display under &#x60;errors&#x60;. If any single specified &#x60;campaign_activity_id&#x60; is invalid (malformed), a 404 error response is returned for all campaign activities.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityIds">A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignActivityReport200Response</returns>
        public GetEmailCampaignActivityReport200Response GetEmailCampaignActivityReport(string campaignActivityIds, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivityReport200Response> localVarResponse = GetEmailCampaignActivityReportWithHttpInfo(campaignActivityIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Campaign Activity Stats Report Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_activity_id&#x60;, this method returns the &#x60;campaign_id&#x60;, the total counts (&#x60;stats&#x60;) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (&#x60;last_refresh_time&#x60;) the &#x60;stats&#x60;.  When requesting statistics for multiple email campaign activities, if one or more of the &#x60;campaign_activity_ids&#x60; do not exist, were deleted, or do not have any stats associated with it, the &#x60;campaign_activity_ids&#x60; and error details display under &#x60;errors&#x60;. If any single specified &#x60;campaign_activity_id&#x60; is invalid (malformed), a 404 error response is returned for all campaign activities.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityIds">A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignActivityReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivityReport200Response> GetEmailCampaignActivityReportWithHttpInfo(string campaignActivityIds, int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityIds' is set
            if (campaignActivityIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityIds' when calling EmailReportingApi->GetEmailCampaignActivityReport");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_ids", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityIds)); // path parameter

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailCampaignActivityReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailCampaignActivityReport200Response>("/reports/stats/email_campaign_activities/{campaign_activity_ids}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivityReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Campaign Activity Stats Report Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_activity_id&#x60;, this method returns the &#x60;campaign_id&#x60;, the total counts (&#x60;stats&#x60;) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (&#x60;last_refresh_time&#x60;) the &#x60;stats&#x60;.  When requesting statistics for multiple email campaign activities, if one or more of the &#x60;campaign_activity_ids&#x60; do not exist, were deleted, or do not have any stats associated with it, the &#x60;campaign_activity_ids&#x60; and error details display under &#x60;errors&#x60;. If any single specified &#x60;campaign_activity_id&#x60; is invalid (malformed), a 404 error response is returned for all campaign activities.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityIds">A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignActivityReport200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailCampaignActivityReport200Response> GetEmailCampaignActivityReportAsync(string campaignActivityIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivityReport200Response> localVarResponse = await GetEmailCampaignActivityReportWithHttpInfoAsync(campaignActivityIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Campaign Activity Stats Report Use this method to get performance tracking statistics for up to ten email campaign activities. Statistics include the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_activity_id&#x60;, this method returns the &#x60;campaign_id&#x60;, the total counts (&#x60;stats&#x60;) for each type of tracked email activity, and the date and time that Constant Contact last refreshed (&#x60;last_refresh_time&#x60;) the &#x60;stats&#x60;.  When requesting statistics for multiple email campaign activities, if one or more of the &#x60;campaign_activity_ids&#x60; do not exist, were deleted, or do not have any stats associated with it, the &#x60;campaign_activity_ids&#x60; and error details display under &#x60;errors&#x60;. If any single specified &#x60;campaign_activity_id&#x60; is invalid (malformed), a 404 error response is returned for all campaign activities.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityIds">A comma-separated list of &#x60;campaign_activity_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignActivityReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivityReport200Response>> GetEmailCampaignActivityReportWithHttpInfoAsync(string campaignActivityIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityIds' is set
            if (campaignActivityIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityIds' when calling EmailReportingApi->GetEmailCampaignActivityReport");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_ids", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityIds)); // path parameter

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailCampaignActivityReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailCampaignActivityReport200Response>("/reports/stats/email_campaign_activities/{campaign_activity_ids}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivityReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Campaigns Summary Report Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (&lt;code&gt;last_sent_date&lt;/code&gt;). Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \&quot;[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\&quot;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignReport200Response</returns>
        public GetEmailCampaignReport200Response GetEmailCampaignReport(string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignReport200Response> localVarResponse = GetEmailCampaignReportWithHttpInfo(limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Campaigns Summary Report Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (&lt;code&gt;last_sent_date&lt;/code&gt;). Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \&quot;[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\&quot;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailCampaignReport200Response> GetEmailCampaignReportWithHttpInfo(string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailCampaignReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailCampaignReport200Response>("/reports/summary_reports/email_campaign_summaries", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Campaigns Summary Report Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (&lt;code&gt;last_sent_date&lt;/code&gt;). Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \&quot;[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\&quot;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignReport200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailCampaignReport200Response> GetEmailCampaignReportAsync(string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignReport200Response> localVarResponse = await GetEmailCampaignReportWithHttpInfoAsync(limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Campaigns Summary Report Use this method to get aggregate email campaign statistics for up to five hundred email campaigns. The response results include the total number of times that each contact uniquely interacted with each tracked campaign activity.  Results are sorted in descending order by the date that the email was last sent (&lt;code&gt;last_sent_date&lt;/code&gt;). Use the &lt;code&gt;limit&lt;/code&gt; query parameter to limit the number of email campaign summary reports listed on each page.     For more use case information, see \&quot;[Get an Email Campaign Summary Report](/api_guide/email_bulk_campaign_summary_report.html)\&quot;
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Use the &#x60;limit&#x60; query parameter to limit the number of email campaign summaries to return on a single page. The default is &#x60;50&#x60; and the maximum is &#x60;500&#x60; per page. (optional, default to &quot;50&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailCampaignReport200Response>> GetEmailCampaignReportWithHttpInfoAsync(string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailCampaignReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailCampaignReport200Response>("/reports/summary_reports/email_campaign_summaries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Opens Report Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailOpensReport200Response</returns>
        public GetEmailOpensReport200Response GetEmailOpensReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailOpensReport200Response> localVarResponse = GetEmailOpensReportWithHttpInfo(campaignActivityId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Opens Report Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailOpensReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailOpensReport200Response> GetEmailOpensReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailOpensReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailOpensReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/opens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailOpensReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Opens Report Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailOpensReport200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailOpensReport200Response> GetEmailOpensReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailOpensReport200Response> localVarResponse = await GetEmailOpensReportWithHttpInfoAsync(campaignActivityId, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Opens Report Use this method to get each time a contact opened a specific email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Opens report for an Email Campaign Activity](/api_guide/email_summary_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailOpensReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailOpensReport200Response>> GetEmailOpensReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailOpensReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailOpensReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/opens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailOpensReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Sends Report Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact&#39;s email address, the contact&#39;s first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailSendsReport200Response</returns>
        public GetEmailSendsReport200Response GetEmailSendsReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailSendsReport200Response> localVarResponse = GetEmailSendsReportWithHttpInfo(campaignActivityId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Sends Report Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact&#39;s email address, the contact&#39;s first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailSendsReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailSendsReport200Response> GetEmailSendsReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailSendsReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailSendsReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/sends", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailSendsReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Sends Report Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact&#39;s email address, the contact&#39;s first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailSendsReport200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailSendsReport200Response> GetEmailSendsReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailSendsReport200Response> localVarResponse = await GetEmailSendsReportWithHttpInfoAsync(campaignActivityId, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Sends Report Use this method to get each contact that was sent a specific email campaign activity. This sends report includes general contact data such as the date and time that the email campaign activity was sent to a contact&#39;s email address, the contact&#39;s first and last name, and unique ID. This report lists the most recent activity first. For more use case information, see [Get an Sends report for an Email Campaign Activity](/api_guide/email_summary_sends_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailSendsReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailSendsReport200Response>> GetEmailSendsReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailSendsReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailSendsReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/sends", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailSendsReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Campaign Stats Report Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_id&#x60;, this method returns lists that include total counts (&#x60;stats&#x60;) for each type of tracked email and relevant campaign-related percentages (&#x60;percents&#x60;). It also returns the date and time at which the campaign stats were last refreshed. If any specified &#x60;campaign_id&#x60; is invalid, a 404 error response is returned for all campaigns.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignIds">A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailStatsReport200Response</returns>
        public GetEmailStatsReport200Response GetEmailStatsReport(string campaignIds, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailStatsReport200Response> localVarResponse = GetEmailStatsReportWithHttpInfo(campaignIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Campaign Stats Report Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_id&#x60;, this method returns lists that include total counts (&#x60;stats&#x60;) for each type of tracked email and relevant campaign-related percentages (&#x60;percents&#x60;). It also returns the date and time at which the campaign stats were last refreshed. If any specified &#x60;campaign_id&#x60; is invalid, a 404 error response is returned for all campaigns.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignIds">A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailStatsReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailStatsReport200Response> GetEmailStatsReportWithHttpInfo(string campaignIds, int operationIndex = 0)
        {
            // verify the required parameter 'campaignIds' is set
            if (campaignIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignIds' when calling EmailReportingApi->GetEmailStatsReport");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_ids", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignIds)); // path parameter

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailStatsReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailStatsReport200Response>("/reports/stats/email_campaigns/{campaign_ids}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailStatsReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Campaign Stats Report Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_id&#x60;, this method returns lists that include total counts (&#x60;stats&#x60;) for each type of tracked email and relevant campaign-related percentages (&#x60;percents&#x60;). It also returns the date and time at which the campaign stats were last refreshed. If any specified &#x60;campaign_id&#x60; is invalid, a 404 error response is returned for all campaigns.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignIds">A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailStatsReport200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailStatsReport200Response> GetEmailStatsReportAsync(string campaignIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailStatsReport200Response> localVarResponse = await GetEmailStatsReportWithHttpInfoAsync(campaignIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Campaign Stats Report Use this method to get email campaign performance tracking statistics for one or more campaigns, including the total number of times contacts interacted with your campaigns and how.  For each &#x60;campaign_id&#x60;, this method returns lists that include total counts (&#x60;stats&#x60;) for each type of tracked email and relevant campaign-related percentages (&#x60;percents&#x60;). It also returns the date and time at which the campaign stats were last refreshed. If any specified &#x60;campaign_id&#x60; is invalid, a 404 error response is returned for all campaigns.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignIds">A comma-separated list of &#x60;campaign_id&#x60;s (UUID&#39;s).</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailStatsReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailStatsReport200Response>> GetEmailStatsReportWithHttpInfoAsync(string campaignIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignIds' is set
            if (campaignIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignIds' when calling EmailReportingApi->GetEmailStatsReport");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_ids", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignIds)); // path parameter

            localVarRequestOptions.Operation = "EmailReportingApi.GetEmailStatsReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailStatsReport200Response>("/reports/stats/email_campaigns/{campaign_ids}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailStatsReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Forwards Report Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetForwardsReport200Response</returns>
        public GetForwardsReport200Response GetForwardsReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetForwardsReport200Response> localVarResponse = GetForwardsReportWithHttpInfo(campaignActivityId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Forwards Report Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetForwardsReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetForwardsReport200Response> GetForwardsReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetForwardsReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetForwardsReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/forwards", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetForwardsReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Forwards Report Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetForwardsReport200Response</returns>
        public async System.Threading.Tasks.Task<GetForwardsReport200Response> GetForwardsReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetForwardsReport200Response> localVarResponse = await GetForwardsReportWithHttpInfoAsync(campaignActivityId, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Forwards Report Use this method to get a report listing each time a contact forwarded the email campaign activity using the forwarding link in the email footer. The report includes general contact information, such as the contact&#39;s email address and unique ID, and the date and time that the email campaign activity was forwarded. Forwards report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Forwards Report](/api_guide/email_summary_forwards_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetForwardsReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetForwardsReport200Response>> GetForwardsReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetForwardsReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetForwardsReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/forwards", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetForwardsReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Opt-outs Report Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact&#39;s email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetOptoutsReport200Response</returns>
        public GetOptoutsReport200Response GetOptoutsReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetOptoutsReport200Response> localVarResponse = GetOptoutsReportWithHttpInfo(campaignActivityId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Opt-outs Report Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact&#39;s email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetOptoutsReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetOptoutsReport200Response> GetOptoutsReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetOptoutsReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetOptoutsReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/optouts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptoutsReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Opt-outs Report Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact&#39;s email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetOptoutsReport200Response</returns>
        public async System.Threading.Tasks.Task<GetOptoutsReport200Response> GetOptoutsReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetOptoutsReport200Response> localVarResponse = await GetOptoutsReportWithHttpInfoAsync(campaignActivityId, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Opt-outs Report Use this method to get a report listing each contact that clicked the unsubscribe link in the email campaign activity to opt-out from receiving emails sent from your Constant Contact account. This report includes contact information, such as the contact&#39;s email address, unique ID, and the opt-out date and time. Opt-out report data is sorted with the most recent activity listed first. For more use case information, see [Get an Email Opt-outs Report](/api_guide/email_summary_optouts_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetOptoutsReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetOptoutsReport200Response>> GetOptoutsReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetOptoutsReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetOptoutsReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/optouts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOptoutsReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Unique Opens Report Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailOpensReport200Response</returns>
        public GetEmailOpensReport200Response GetUniqueOpensReport(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailOpensReport200Response> localVarResponse = GetUniqueOpensReportWithHttpInfo(campaignActivityId, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Unique Opens Report Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailOpensReport200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailOpensReport200Response> GetUniqueOpensReportWithHttpInfo(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetUniqueOpensReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailOpensReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/unique_opens", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueOpensReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET an Email Unique Opens Report Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailOpensReport200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailOpensReport200Response> GetUniqueOpensReportAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailOpensReport200Response> localVarResponse = await GetUniqueOpensReportWithHttpInfoAsync(campaignActivityId, limit, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET an Email Unique Opens Report Use this method to get a unique opens report that provides details about the last time that each contact opened the specified email campaign activity. This report includes general contact information such as the contact&#39;s email address and unique ID, the date and time they opened the email campaign activity, and the type of device they used to open it. This report lists the most recent activity first. For more use case information, see [Get an Unique Opens Report for an Email Campaign Activity](/api_guide/email_summary_unique_opens_report.html) in the API guide.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The ID that uniquely identifies the email campaign activity to use for this report.</param>
        /// <param name="limit">The number of tracking activities to return on a page. (optional, default to &quot;500&quot;)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailOpensReport200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailOpensReport200Response>> GetUniqueOpensReportWithHttpInfoAsync(Guid campaignActivityId, string? limit = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            localVarRequestOptions.Operation = "EmailReportingApi.GetUniqueOpensReport";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailOpensReport200Response>("/reports/email_reports/{campaign_activity_id}/tracking/unique_opens", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetUniqueOpensReport", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
