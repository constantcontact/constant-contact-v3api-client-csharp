/*
 * Constant Contact API v3
 *
 * Swagger build version 3.0.62
 *
 * The version of the OpenAPI document: 1.0.193
 * Contact: webservices@constantcontact.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using ConstantContactApi.Client;
using ConstantContactApi.Client.Auth;
using ConstantContactApi.Model;

namespace ConstantContactApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailCampaignsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// POST (Create) a New Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to create a new email campaign. This method also creates new &#x60;primary_email&#x60; and &#x60;permalink&#x60; email campaign activities and associates them with the new email campaign.  The request body must contain the &#x60;name&#x60; property and the &#x60;email_campaign_activities&#x60; array. The &#x60;name&#x60; must be unique. The &#x60;email_campaign_activities&#x60; array contains the main content of your email campaign and must include &#x60;format_type&#x60;, &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, &#x60;subject&#x60;, and &#x60;html_content&#x60; properties. The &#x60;from_email&#x60; address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailCampaignRequest">A JSON request body that contains the email content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEmailCampaign200Response</returns>
        CreateEmailCampaign200Response CreateEmailCampaign(CreateEmailCampaignRequest createEmailCampaignRequest, int operationIndex = 0);

        /// <summary>
        /// POST (Create) a New Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to create a new email campaign. This method also creates new &#x60;primary_email&#x60; and &#x60;permalink&#x60; email campaign activities and associates them with the new email campaign.  The request body must contain the &#x60;name&#x60; property and the &#x60;email_campaign_activities&#x60; array. The &#x60;name&#x60; must be unique. The &#x60;email_campaign_activities&#x60; array contains the main content of your email campaign and must include &#x60;format_type&#x60;, &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, &#x60;subject&#x60;, and &#x60;html_content&#x60; properties. The &#x60;from_email&#x60; address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailCampaignRequest">A JSON request body that contains the email content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEmailCampaign200Response</returns>
        ApiResponse<CreateEmailCampaign200Response> CreateEmailCampaignWithHttpInfo(CreateEmailCampaignRequest createEmailCampaignRequest, int operationIndex = 0);
        /// <summary>
        /// POST a Resend to Non-openers Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current &#x60;status&#x60; of &#x60;Draft&#x60;, &#x60;Scheduled&#x60;, or &#x60;Done&#x60;. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60; (properties are mutually exclusive) before resending to non-openers. If you set both &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60;, &#x60;delay_minutes&#x60; is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="createResendEmailCampaignRequest">A JSON request body that specifies when to resend the campaign activity to non-openers.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateResendEmailCampaign201Response</returns>
        CreateResendEmailCampaign201Response CreateResendEmailCampaign(string campaignActivityId, CreateResendEmailCampaignRequest createResendEmailCampaignRequest, int operationIndex = 0);

        /// <summary>
        /// POST a Resend to Non-openers Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current &#x60;status&#x60; of &#x60;Draft&#x60;, &#x60;Scheduled&#x60;, or &#x60;Done&#x60;. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60; (properties are mutually exclusive) before resending to non-openers. If you set both &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60;, &#x60;delay_minutes&#x60; is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="createResendEmailCampaignRequest">A JSON request body that specifies when to resend the campaign activity to non-openers.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateResendEmailCampaign201Response</returns>
        ApiResponse<CreateResendEmailCampaign201Response> CreateResendEmailCampaignWithHttpInfo(string campaignActivityId, CreateResendEmailCampaignRequest createResendEmailCampaignRequest, int operationIndex = 0);
        /// <summary>
        /// DELETE an Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a &#x60;Scheduled&#x60; status.  Constant Contact users can restore deleted email campaigns using the UI. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique ID for the email campaign you are deleting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteEmailCampaign(string campaignId, int operationIndex = 0);

        /// <summary>
        /// DELETE an Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a &#x60;Scheduled&#x60; status.  Constant Contact users can restore deleted email campaigns using the UI. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique ID for the email campaign you are deleting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteEmailCampaignWithHttpInfo(string campaignId, int operationIndex = 0);
        /// <summary>
        /// DELETE a Resend to Non Openers Activity
        /// </summary>
        /// <remarks>
        /// Use this &#x60;DELETE&#x60; method to delete (unschedule) a resend to non openers activity.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="resendRequestId">The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteResendEmailCampaign(string campaignActivityId, string resendRequestId, int operationIndex = 0);

        /// <summary>
        /// DELETE a Resend to Non Openers Activity
        /// </summary>
        /// <remarks>
        /// Use this &#x60;DELETE&#x60; method to delete (unschedule) a resend to non openers activity.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="resendRequestId">The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteResendEmailCampaignWithHttpInfo(string campaignActivityId, string resendRequestId, int operationIndex = 0);
        /// <summary>
        /// GET a Collection of Email Campaigns
        /// </summary>
        /// <remarks>
        /// Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the &#x60;after_date&#x60; and &#x60;before_date&#x60; query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET &#x60;/emails/{campaign_id}&#x60; endpoint.\&quot; &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the email campaign creation date.&lt;/p&gt;&lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)</param>
        /// <param name="beforeDate">Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="afterDate">Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllEmailCampaigns200Response</returns>
        GetAllEmailCampaigns200Response GetAllEmailCampaigns(int? limit = default(int?), DateTime? beforeDate = default(DateTime?), DateTime? afterDate = default(DateTime?), int operationIndex = 0);

        /// <summary>
        /// GET a Collection of Email Campaigns
        /// </summary>
        /// <remarks>
        /// Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the &#x60;after_date&#x60; and &#x60;before_date&#x60; query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET &#x60;/emails/{campaign_id}&#x60; endpoint.\&quot; &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the email campaign creation date.&lt;/p&gt;&lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)</param>
        /// <param name="beforeDate">Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="afterDate">Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllEmailCampaigns200Response</returns>
        ApiResponse<GetAllEmailCampaigns200Response> GetAllEmailCampaignsWithHttpInfo(int? limit = default(int?), DateTime? beforeDate = default(DateTime?), DateTime? afterDate = default(DateTime?), int operationIndex = 0);
        /// <summary>
        /// GET a Single Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a &#x60;REMOVED&#x60; status. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="include">Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignActivity200Response</returns>
        GetEmailCampaignActivity200Response GetEmailCampaignActivity(string campaignActivityId, string? include = default(string?), int operationIndex = 0);

        /// <summary>
        /// GET a Single Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a &#x60;REMOVED&#x60; status. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="include">Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignActivity200Response</returns>
        ApiResponse<GetEmailCampaignActivity200Response> GetEmailCampaignActivityWithHttpInfo(string campaignActivityId, string? include = default(string?), int operationIndex = 0);
        /// <summary>
        /// GET Details About a Single Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the &#x60;campaign_activity_id&#x60; and &#x60;role&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID (UUID format) that uniquely identifies this email campaign.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEmailCampaign200Response</returns>
        CreateEmailCampaign200Response GetEmailCampaignById(string campaignId, int operationIndex = 0);

        /// <summary>
        /// GET Details About a Single Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the &#x60;campaign_activity_id&#x60; and &#x60;role&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID (UUID format) that uniquely identifies this email campaign.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEmailCampaign200Response</returns>
        ApiResponse<CreateEmailCampaign200Response> GetEmailCampaignByIdWithHttpInfo(string campaignId, int operationIndex = 0);
        /// <summary>
        /// GET a Collection of V2 and V3 API Email Campaign Identifiers
        /// </summary>
        /// <remarks>
        /// &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the &#x60;v2_email_campaign_ids&#x60; query parameter, this method returns the corresponding V3 &#x60;campaign_id&#x60; and V3 &#x60;campaign_activity_id&#x60; UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v2EmailCampaignIds">Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignXrefs200Response</returns>
        GetEmailCampaignXrefs200Response GetEmailCampaignXrefs(string v2EmailCampaignIds, int operationIndex = 0);

        /// <summary>
        /// GET a Collection of V2 and V3 API Email Campaign Identifiers
        /// </summary>
        /// <remarks>
        /// &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the &#x60;v2_email_campaign_ids&#x60; query parameter, this method returns the corresponding V3 &#x60;campaign_id&#x60; and V3 &#x60;campaign_activity_id&#x60; UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v2EmailCampaignIds">Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignXrefs200Response</returns>
        ApiResponse<GetEmailCampaignXrefs200Response> GetEmailCampaignXrefsWithHttpInfo(string v2EmailCampaignIds, int operationIndex = 0);
        /// <summary>
        /// GET Details for a Resend to Non-openers Campaign Activity
        /// </summary>
        /// <remarks>
        /// Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified &#x60;campaign_activity_id&#x60;, an empty list is returned in the results. You can only create one resend activity per email campaign.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetResendEmailCampaign200ResponseInner&gt;</returns>
        List<GetResendEmailCampaign200ResponseInner> GetResendEmailCampaign(string campaignActivityId, int operationIndex = 0);

        /// <summary>
        /// GET Details for a Resend to Non-openers Campaign Activity
        /// </summary>
        /// <remarks>
        /// Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified &#x60;campaign_activity_id&#x60;, an empty list is returned in the results. You can only create one resend activity per email campaign.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetResendEmailCampaign200ResponseInner&gt;</returns>
        ApiResponse<List<GetResendEmailCampaign200ResponseInner>> GetResendEmailCampaignWithHttpInfo(string campaignActivityId, int operationIndex = 0);
        /// <summary>
        /// PATCH (Update) an Email Campaign Name
        /// </summary>
        /// <remarks>
        /// Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a &#x60;Removed&#x60; status.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique identifier for an email campaign.</param>
        /// <param name="patchEmailCampaignNameRequest">A JSON payload that contains the new email campaign name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEmailCampaign200Response</returns>
        CreateEmailCampaign200Response PatchEmailCampaignName(string campaignId, PatchEmailCampaignNameRequest patchEmailCampaignNameRequest, int operationIndex = 0);

        /// <summary>
        /// PATCH (Update) an Email Campaign Name
        /// </summary>
        /// <remarks>
        /// Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a &#x60;Removed&#x60; status.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique identifier for an email campaign.</param>
        /// <param name="patchEmailCampaignNameRequest">A JSON payload that contains the new email campaign name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEmailCampaign200Response</returns>
        ApiResponse<CreateEmailCampaign200Response> PatchEmailCampaignNameWithHttpInfo(string campaignId, PatchEmailCampaignNameRequest patchEmailCampaignNameRequest, int operationIndex = 0);
        /// <summary>
        /// PUT (Update) An Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, and &#x60;subject&#x60; properties.  You can only update email campaign activities that have the &#x60;primary_email&#x60; role and that are in &#x60;DRAFT&#x60; or &#x60;Done&#x60; status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers &#x60;physical_address_in_footer&#x60;, &#x60;document_properties&#x60;, &#x60;html_content&#x60;, and &#x60;permalink_url&#x60; subresources of the email campaign activity. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the email campaign activity you are updating.</param>
        /// <param name="getEmailCampaignActivity200Response">A request body payload that contains the complete email campaign activity with your changes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignActivity200Response</returns>
        GetEmailCampaignActivity200Response UpdateEmailCampaignActivity(string campaignActivityId, GetEmailCampaignActivity200Response getEmailCampaignActivity200Response, int operationIndex = 0);

        /// <summary>
        /// PUT (Update) An Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, and &#x60;subject&#x60; properties.  You can only update email campaign activities that have the &#x60;primary_email&#x60; role and that are in &#x60;DRAFT&#x60; or &#x60;Done&#x60; status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers &#x60;physical_address_in_footer&#x60;, &#x60;document_properties&#x60;, &#x60;html_content&#x60;, and &#x60;permalink_url&#x60; subresources of the email campaign activity. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the email campaign activity you are updating.</param>
        /// <param name="getEmailCampaignActivity200Response">A request body payload that contains the complete email campaign activity with your changes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignActivity200Response</returns>
        ApiResponse<GetEmailCampaignActivity200Response> UpdateEmailCampaignActivityWithHttpInfo(string campaignActivityId, GetEmailCampaignActivity200Response getEmailCampaignActivity200Response, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailCampaignsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// POST (Create) a New Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to create a new email campaign. This method also creates new &#x60;primary_email&#x60; and &#x60;permalink&#x60; email campaign activities and associates them with the new email campaign.  The request body must contain the &#x60;name&#x60; property and the &#x60;email_campaign_activities&#x60; array. The &#x60;name&#x60; must be unique. The &#x60;email_campaign_activities&#x60; array contains the main content of your email campaign and must include &#x60;format_type&#x60;, &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, &#x60;subject&#x60;, and &#x60;html_content&#x60; properties. The &#x60;from_email&#x60; address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailCampaignRequest">A JSON request body that contains the email content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEmailCampaign200Response</returns>
        System.Threading.Tasks.Task<CreateEmailCampaign200Response> CreateEmailCampaignAsync(CreateEmailCampaignRequest createEmailCampaignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST (Create) a New Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to create a new email campaign. This method also creates new &#x60;primary_email&#x60; and &#x60;permalink&#x60; email campaign activities and associates them with the new email campaign.  The request body must contain the &#x60;name&#x60; property and the &#x60;email_campaign_activities&#x60; array. The &#x60;name&#x60; must be unique. The &#x60;email_campaign_activities&#x60; array contains the main content of your email campaign and must include &#x60;format_type&#x60;, &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, &#x60;subject&#x60;, and &#x60;html_content&#x60; properties. The &#x60;from_email&#x60; address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailCampaignRequest">A JSON request body that contains the email content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEmailCampaign200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateEmailCampaign200Response>> CreateEmailCampaignWithHttpInfoAsync(CreateEmailCampaignRequest createEmailCampaignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// POST a Resend to Non-openers Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current &#x60;status&#x60; of &#x60;Draft&#x60;, &#x60;Scheduled&#x60;, or &#x60;Done&#x60;. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60; (properties are mutually exclusive) before resending to non-openers. If you set both &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60;, &#x60;delay_minutes&#x60; is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="createResendEmailCampaignRequest">A JSON request body that specifies when to resend the campaign activity to non-openers.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateResendEmailCampaign201Response</returns>
        System.Threading.Tasks.Task<CreateResendEmailCampaign201Response> CreateResendEmailCampaignAsync(string campaignActivityId, CreateResendEmailCampaignRequest createResendEmailCampaignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// POST a Resend to Non-openers Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current &#x60;status&#x60; of &#x60;Draft&#x60;, &#x60;Scheduled&#x60;, or &#x60;Done&#x60;. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60; (properties are mutually exclusive) before resending to non-openers. If you set both &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60;, &#x60;delay_minutes&#x60; is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="createResendEmailCampaignRequest">A JSON request body that specifies when to resend the campaign activity to non-openers.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateResendEmailCampaign201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateResendEmailCampaign201Response>> CreateResendEmailCampaignWithHttpInfoAsync(string campaignActivityId, CreateResendEmailCampaignRequest createResendEmailCampaignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DELETE an Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a &#x60;Scheduled&#x60; status.  Constant Contact users can restore deleted email campaigns using the UI. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique ID for the email campaign you are deleting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteEmailCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DELETE an Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a &#x60;Scheduled&#x60; status.  Constant Contact users can restore deleted email campaigns using the UI. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique ID for the email campaign you are deleting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteEmailCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// DELETE a Resend to Non Openers Activity
        /// </summary>
        /// <remarks>
        /// Use this &#x60;DELETE&#x60; method to delete (unschedule) a resend to non openers activity.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="resendRequestId">The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteResendEmailCampaignAsync(string campaignActivityId, string resendRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// DELETE a Resend to Non Openers Activity
        /// </summary>
        /// <remarks>
        /// Use this &#x60;DELETE&#x60; method to delete (unschedule) a resend to non openers activity.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="resendRequestId">The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteResendEmailCampaignWithHttpInfoAsync(string campaignActivityId, string resendRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Collection of Email Campaigns
        /// </summary>
        /// <remarks>
        /// Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the &#x60;after_date&#x60; and &#x60;before_date&#x60; query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET &#x60;/emails/{campaign_id}&#x60; endpoint.\&quot; &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the email campaign creation date.&lt;/p&gt;&lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)</param>
        /// <param name="beforeDate">Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="afterDate">Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllEmailCampaigns200Response</returns>
        System.Threading.Tasks.Task<GetAllEmailCampaigns200Response> GetAllEmailCampaignsAsync(int? limit = default(int?), DateTime? beforeDate = default(DateTime?), DateTime? afterDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Collection of Email Campaigns
        /// </summary>
        /// <remarks>
        /// Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the &#x60;after_date&#x60; and &#x60;before_date&#x60; query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET &#x60;/emails/{campaign_id}&#x60; endpoint.\&quot; &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the email campaign creation date.&lt;/p&gt;&lt;/div&gt; 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)</param>
        /// <param name="beforeDate">Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="afterDate">Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllEmailCampaigns200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetAllEmailCampaigns200Response>> GetAllEmailCampaignsWithHttpInfoAsync(int? limit = default(int?), DateTime? beforeDate = default(DateTime?), DateTime? afterDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Single Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a &#x60;REMOVED&#x60; status. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="include">Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignActivity200Response</returns>
        System.Threading.Tasks.Task<GetEmailCampaignActivity200Response> GetEmailCampaignActivityAsync(string campaignActivityId, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Single Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a &#x60;REMOVED&#x60; status. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="include">Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignActivity200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailCampaignActivity200Response>> GetEmailCampaignActivityWithHttpInfoAsync(string campaignActivityId, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET Details About a Single Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the &#x60;campaign_activity_id&#x60; and &#x60;role&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID (UUID format) that uniquely identifies this email campaign.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEmailCampaign200Response</returns>
        System.Threading.Tasks.Task<CreateEmailCampaign200Response> GetEmailCampaignByIdAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Details About a Single Email Campaign
        /// </summary>
        /// <remarks>
        /// Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the &#x60;campaign_activity_id&#x60; and &#x60;role&#x60;.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID (UUID format) that uniquely identifies this email campaign.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEmailCampaign200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateEmailCampaign200Response>> GetEmailCampaignByIdWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET a Collection of V2 and V3 API Email Campaign Identifiers
        /// </summary>
        /// <remarks>
        /// &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the &#x60;v2_email_campaign_ids&#x60; query parameter, this method returns the corresponding V3 &#x60;campaign_id&#x60; and V3 &#x60;campaign_activity_id&#x60; UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v2EmailCampaignIds">Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignXrefs200Response</returns>
        System.Threading.Tasks.Task<GetEmailCampaignXrefs200Response> GetEmailCampaignXrefsAsync(string v2EmailCampaignIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET a Collection of V2 and V3 API Email Campaign Identifiers
        /// </summary>
        /// <remarks>
        /// &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the &#x60;v2_email_campaign_ids&#x60; query parameter, this method returns the corresponding V3 &#x60;campaign_id&#x60; and V3 &#x60;campaign_activity_id&#x60; UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v2EmailCampaignIds">Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignXrefs200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailCampaignXrefs200Response>> GetEmailCampaignXrefsWithHttpInfoAsync(string v2EmailCampaignIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// GET Details for a Resend to Non-openers Campaign Activity
        /// </summary>
        /// <remarks>
        /// Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified &#x60;campaign_activity_id&#x60;, an empty list is returned in the results. You can only create one resend activity per email campaign.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetResendEmailCampaign200ResponseInner&gt;</returns>
        System.Threading.Tasks.Task<List<GetResendEmailCampaign200ResponseInner>> GetResendEmailCampaignAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// GET Details for a Resend to Non-openers Campaign Activity
        /// </summary>
        /// <remarks>
        /// Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified &#x60;campaign_activity_id&#x60;, an empty list is returned in the results. You can only create one resend activity per email campaign.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetResendEmailCampaign200ResponseInner&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GetResendEmailCampaign200ResponseInner>>> GetResendEmailCampaignWithHttpInfoAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PATCH (Update) an Email Campaign Name
        /// </summary>
        /// <remarks>
        /// Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a &#x60;Removed&#x60; status.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique identifier for an email campaign.</param>
        /// <param name="patchEmailCampaignNameRequest">A JSON payload that contains the new email campaign name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEmailCampaign200Response</returns>
        System.Threading.Tasks.Task<CreateEmailCampaign200Response> PatchEmailCampaignNameAsync(string campaignId, PatchEmailCampaignNameRequest patchEmailCampaignNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PATCH (Update) an Email Campaign Name
        /// </summary>
        /// <remarks>
        /// Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a &#x60;Removed&#x60; status.
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique identifier for an email campaign.</param>
        /// <param name="patchEmailCampaignNameRequest">A JSON payload that contains the new email campaign name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEmailCampaign200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateEmailCampaign200Response>> PatchEmailCampaignNameWithHttpInfoAsync(string campaignId, PatchEmailCampaignNameRequest patchEmailCampaignNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// PUT (Update) An Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, and &#x60;subject&#x60; properties.  You can only update email campaign activities that have the &#x60;primary_email&#x60; role and that are in &#x60;DRAFT&#x60; or &#x60;Done&#x60; status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers &#x60;physical_address_in_footer&#x60;, &#x60;document_properties&#x60;, &#x60;html_content&#x60;, and &#x60;permalink_url&#x60; subresources of the email campaign activity. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the email campaign activity you are updating.</param>
        /// <param name="getEmailCampaignActivity200Response">A request body payload that contains the complete email campaign activity with your changes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignActivity200Response</returns>
        System.Threading.Tasks.Task<GetEmailCampaignActivity200Response> UpdateEmailCampaignActivityAsync(string campaignActivityId, GetEmailCampaignActivity200Response getEmailCampaignActivity200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// PUT (Update) An Email Campaign Activity
        /// </summary>
        /// <remarks>
        /// Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, and &#x60;subject&#x60; properties.  You can only update email campaign activities that have the &#x60;primary_email&#x60; role and that are in &#x60;DRAFT&#x60; or &#x60;Done&#x60; status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers &#x60;physical_address_in_footer&#x60;, &#x60;document_properties&#x60;, &#x60;html_content&#x60;, and &#x60;permalink_url&#x60; subresources of the email campaign activity. 
        /// </remarks>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the email campaign activity you are updating.</param>
        /// <param name="getEmailCampaignActivity200Response">A request body payload that contains the complete email campaign activity with your changes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignActivity200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetEmailCampaignActivity200Response>> UpdateEmailCampaignActivityWithHttpInfoAsync(string campaignActivityId, GetEmailCampaignActivity200Response getEmailCampaignActivity200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmailCampaignsApi : IEmailCampaignsApiSync, IEmailCampaignsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmailCampaignsApi : IEmailCampaignsApi
    {
        private ConstantContactApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailCampaignsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmailCampaignsApi(string basePath)
        {
            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                new ConstantContactApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmailCampaignsApi(ConstantContactApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = ConstantContactApi.Client.Configuration.MergeConfigurations(
                ConstantContactApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ConstantContactApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmailCampaignsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmailCampaignsApi(ConstantContactApi.Client.ISynchronousClient client, ConstantContactApi.Client.IAsynchronousClient asyncClient, ConstantContactApi.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = ConstantContactApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public ConstantContactApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ConstantContactApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public ConstantContactApi.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ConstantContactApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// POST (Create) a New Email Campaign Use this method to create a new email campaign. This method also creates new &#x60;primary_email&#x60; and &#x60;permalink&#x60; email campaign activities and associates them with the new email campaign.  The request body must contain the &#x60;name&#x60; property and the &#x60;email_campaign_activities&#x60; array. The &#x60;name&#x60; must be unique. The &#x60;email_campaign_activities&#x60; array contains the main content of your email campaign and must include &#x60;format_type&#x60;, &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, &#x60;subject&#x60;, and &#x60;html_content&#x60; properties. The &#x60;from_email&#x60; address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailCampaignRequest">A JSON request body that contains the email content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEmailCampaign200Response</returns>
        public CreateEmailCampaign200Response CreateEmailCampaign(CreateEmailCampaignRequest createEmailCampaignRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response> localVarResponse = CreateEmailCampaignWithHttpInfo(createEmailCampaignRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (Create) a New Email Campaign Use this method to create a new email campaign. This method also creates new &#x60;primary_email&#x60; and &#x60;permalink&#x60; email campaign activities and associates them with the new email campaign.  The request body must contain the &#x60;name&#x60; property and the &#x60;email_campaign_activities&#x60; array. The &#x60;name&#x60; must be unique. The &#x60;email_campaign_activities&#x60; array contains the main content of your email campaign and must include &#x60;format_type&#x60;, &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, &#x60;subject&#x60;, and &#x60;html_content&#x60; properties. The &#x60;from_email&#x60; address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailCampaignRequest">A JSON request body that contains the email content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEmailCampaign200Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response> CreateEmailCampaignWithHttpInfo(CreateEmailCampaignRequest createEmailCampaignRequest, int operationIndex = 0)
        {
            // verify the required parameter 'createEmailCampaignRequest' is set
            if (createEmailCampaignRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createEmailCampaignRequest' when calling EmailCampaignsApi->CreateEmailCampaign");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEmailCampaignRequest;

            localVarRequestOptions.Operation = "EmailCampaignsApi.CreateEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateEmailCampaign200Response>("/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST (Create) a New Email Campaign Use this method to create a new email campaign. This method also creates new &#x60;primary_email&#x60; and &#x60;permalink&#x60; email campaign activities and associates them with the new email campaign.  The request body must contain the &#x60;name&#x60; property and the &#x60;email_campaign_activities&#x60; array. The &#x60;name&#x60; must be unique. The &#x60;email_campaign_activities&#x60; array contains the main content of your email campaign and must include &#x60;format_type&#x60;, &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, &#x60;subject&#x60;, and &#x60;html_content&#x60; properties. The &#x60;from_email&#x60; address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailCampaignRequest">A JSON request body that contains the email content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEmailCampaign200Response</returns>
        public async System.Threading.Tasks.Task<CreateEmailCampaign200Response> CreateEmailCampaignAsync(CreateEmailCampaignRequest createEmailCampaignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response> localVarResponse = await CreateEmailCampaignWithHttpInfoAsync(createEmailCampaignRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST (Create) a New Email Campaign Use this method to create a new email campaign. This method also creates new &#x60;primary_email&#x60; and &#x60;permalink&#x60; email campaign activities and associates them with the new email campaign.  The request body must contain the &#x60;name&#x60; property and the &#x60;email_campaign_activities&#x60; array. The &#x60;name&#x60; must be unique. The &#x60;email_campaign_activities&#x60; array contains the main content of your email campaign and must include &#x60;format_type&#x60;, &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, &#x60;subject&#x60;, and &#x60;html_content&#x60; properties. The &#x60;from_email&#x60; address you use must use a verified email address for your account. NOTE: If you create an email campaign using a legacy (V7) format, Constant Contact automatically converts it to the newer custom code format. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createEmailCampaignRequest">A JSON request body that contains the email content.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEmailCampaign200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response>> CreateEmailCampaignWithHttpInfoAsync(CreateEmailCampaignRequest createEmailCampaignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'createEmailCampaignRequest' is set
            if (createEmailCampaignRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createEmailCampaignRequest' when calling EmailCampaignsApi->CreateEmailCampaign");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = createEmailCampaignRequest;

            localVarRequestOptions.Operation = "EmailCampaignsApi.CreateEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateEmailCampaign200Response>("/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST a Resend to Non-openers Campaign Activity Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current &#x60;status&#x60; of &#x60;Draft&#x60;, &#x60;Scheduled&#x60;, or &#x60;Done&#x60;. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60; (properties are mutually exclusive) before resending to non-openers. If you set both &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60;, &#x60;delay_minutes&#x60; is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="createResendEmailCampaignRequest">A JSON request body that specifies when to resend the campaign activity to non-openers.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateResendEmailCampaign201Response</returns>
        public CreateResendEmailCampaign201Response CreateResendEmailCampaign(string campaignActivityId, CreateResendEmailCampaignRequest createResendEmailCampaignRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateResendEmailCampaign201Response> localVarResponse = CreateResendEmailCampaignWithHttpInfo(campaignActivityId, createResendEmailCampaignRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST a Resend to Non-openers Campaign Activity Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current &#x60;status&#x60; of &#x60;Draft&#x60;, &#x60;Scheduled&#x60;, or &#x60;Done&#x60;. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60; (properties are mutually exclusive) before resending to non-openers. If you set both &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60;, &#x60;delay_minutes&#x60; is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="createResendEmailCampaignRequest">A JSON request body that specifies when to resend the campaign activity to non-openers.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateResendEmailCampaign201Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateResendEmailCampaign201Response> CreateResendEmailCampaignWithHttpInfo(string campaignActivityId, CreateResendEmailCampaignRequest createResendEmailCampaignRequest, int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->CreateResendEmailCampaign");
            }

            // verify the required parameter 'createResendEmailCampaignRequest' is set
            if (createResendEmailCampaignRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createResendEmailCampaignRequest' when calling EmailCampaignsApi->CreateResendEmailCampaign");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = createResendEmailCampaignRequest;

            localVarRequestOptions.Operation = "EmailCampaignsApi.CreateResendEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateResendEmailCampaign201Response>("/emails/activities/{campaign_activity_id}/non_opener_resends", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateResendEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// POST a Resend to Non-openers Campaign Activity Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current &#x60;status&#x60; of &#x60;Draft&#x60;, &#x60;Scheduled&#x60;, or &#x60;Done&#x60;. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60; (properties are mutually exclusive) before resending to non-openers. If you set both &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60;, &#x60;delay_minutes&#x60; is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="createResendEmailCampaignRequest">A JSON request body that specifies when to resend the campaign activity to non-openers.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateResendEmailCampaign201Response</returns>
        public async System.Threading.Tasks.Task<CreateResendEmailCampaign201Response> CreateResendEmailCampaignAsync(string campaignActivityId, CreateResendEmailCampaignRequest createResendEmailCampaignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateResendEmailCampaign201Response> localVarResponse = await CreateResendEmailCampaignWithHttpInfoAsync(campaignActivityId, createResendEmailCampaignRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// POST a Resend to Non-openers Campaign Activity Use this POST method to resend a primary campaign activity to contacts that did not open a campaign activity that has a current &#x60;status&#x60; of &#x60;Draft&#x60;, &#x60;Scheduled&#x60;, or &#x60;Done&#x60;. You can only create one resend activity per email campaign.    After an email campaign activity is sent to contacts, Constant Contact waits the specified number of &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60; (properties are mutually exclusive) before resending to non-openers. If you set both &#x60;delay_days&#x60; or &#x60;delay_minutes&#x60;, &#x60;delay_minutes&#x60; is ignored in the request. You can resend to non-openers a minimum of twelve hours (720 minutes) and a maximum of up to 10 days (or 10 x 1440 minutes) after the initial send date.    
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="createResendEmailCampaignRequest">A JSON request body that specifies when to resend the campaign activity to non-openers.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateResendEmailCampaign201Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateResendEmailCampaign201Response>> CreateResendEmailCampaignWithHttpInfoAsync(string campaignActivityId, CreateResendEmailCampaignRequest createResendEmailCampaignRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->CreateResendEmailCampaign");
            }

            // verify the required parameter 'createResendEmailCampaignRequest' is set
            if (createResendEmailCampaignRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'createResendEmailCampaignRequest' when calling EmailCampaignsApi->CreateResendEmailCampaign");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = createResendEmailCampaignRequest;

            localVarRequestOptions.Operation = "EmailCampaignsApi.CreateResendEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CreateResendEmailCampaign201Response>("/emails/activities/{campaign_activity_id}/non_opener_resends", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateResendEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE an Email Campaign Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a &#x60;Scheduled&#x60; status.  Constant Contact users can restore deleted email campaigns using the UI. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique ID for the email campaign you are deleting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteEmailCampaign(string campaignId, int operationIndex = 0)
        {
            DeleteEmailCampaignWithHttpInfo(campaignId);
        }

        /// <summary>
        /// DELETE an Email Campaign Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a &#x60;Scheduled&#x60; status.  Constant Contact users can restore deleted email campaigns using the UI. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique ID for the email campaign you are deleting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ConstantContactApi.Client.ApiResponse<Object> DeleteEmailCampaignWithHttpInfo(string campaignId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignId' when calling EmailCampaignsApi->DeleteEmailCampaign");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsApi.DeleteEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/emails/{campaign_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE an Email Campaign Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a &#x60;Scheduled&#x60; status.  Constant Contact users can restore deleted email campaigns using the UI. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique ID for the email campaign you are deleting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteEmailCampaignAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteEmailCampaignWithHttpInfoAsync(campaignId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// DELETE an Email Campaign Use this method to delete an email campaign and the email campaign activities associated with the email campaign. You cannot delete an email campaign when it has a &#x60;Scheduled&#x60; status.  Constant Contact users can restore deleted email campaigns using the UI. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique ID for the email campaign you are deleting.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<Object>> DeleteEmailCampaignWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignId' when calling EmailCampaignsApi->DeleteEmailCampaign");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsApi.DeleteEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/emails/{campaign_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE a Resend to Non Openers Activity Use this &#x60;DELETE&#x60; method to delete (unschedule) a resend to non openers activity.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="resendRequestId">The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteResendEmailCampaign(string campaignActivityId, string resendRequestId, int operationIndex = 0)
        {
            DeleteResendEmailCampaignWithHttpInfo(campaignActivityId, resendRequestId);
        }

        /// <summary>
        /// DELETE a Resend to Non Openers Activity Use this &#x60;DELETE&#x60; method to delete (unschedule) a resend to non openers activity.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="resendRequestId">The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ConstantContactApi.Client.ApiResponse<Object> DeleteResendEmailCampaignWithHttpInfo(string campaignActivityId, string resendRequestId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->DeleteResendEmailCampaign");
            }

            // verify the required parameter 'resendRequestId' is set
            if (resendRequestId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'resendRequestId' when calling EmailCampaignsApi->DeleteResendEmailCampaign");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resend_request_id", ConstantContactApi.Client.ClientUtils.ParameterToString(resendRequestId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsApi.DeleteResendEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/emails/activities/{campaign_activity_id}/non_opener_resends/{resend_request_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteResendEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// DELETE a Resend to Non Openers Activity Use this &#x60;DELETE&#x60; method to delete (unschedule) a resend to non openers activity.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="resendRequestId">The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteResendEmailCampaignAsync(string campaignActivityId, string resendRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await DeleteResendEmailCampaignWithHttpInfoAsync(campaignActivityId, resendRequestId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// DELETE a Resend to Non Openers Activity Use this &#x60;DELETE&#x60; method to delete (unschedule) a resend to non openers activity.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="resendRequestId">The unique ID associated with the resend for the email campaign activity (for example: &#x60;389093&#x60;). If the email campaign activity is currently in draft status, specify &#x60;DRAFT&#x60; as the ID.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<Object>> DeleteResendEmailCampaignWithHttpInfoAsync(string campaignActivityId, string resendRequestId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->DeleteResendEmailCampaign");
            }

            // verify the required parameter 'resendRequestId' is set
            if (resendRequestId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'resendRequestId' when calling EmailCampaignsApi->DeleteResendEmailCampaign");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resend_request_id", ConstantContactApi.Client.ClientUtils.ParameterToString(resendRequestId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsApi.DeleteResendEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/emails/activities/{campaign_activity_id}/non_opener_resends/{resend_request_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteResendEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Collection of Email Campaigns Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the &#x60;after_date&#x60; and &#x60;before_date&#x60; query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET &#x60;/emails/{campaign_id}&#x60; endpoint.\&quot; &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the email campaign creation date.&lt;/p&gt;&lt;/div&gt; 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)</param>
        /// <param name="beforeDate">Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="afterDate">Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetAllEmailCampaigns200Response</returns>
        public GetAllEmailCampaigns200Response GetAllEmailCampaigns(int? limit = default(int?), DateTime? beforeDate = default(DateTime?), DateTime? afterDate = default(DateTime?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetAllEmailCampaigns200Response> localVarResponse = GetAllEmailCampaignsWithHttpInfo(limit, beforeDate, afterDate);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Collection of Email Campaigns Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the &#x60;after_date&#x60; and &#x60;before_date&#x60; query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET &#x60;/emails/{campaign_id}&#x60; endpoint.\&quot; &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the email campaign creation date.&lt;/p&gt;&lt;/div&gt; 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)</param>
        /// <param name="beforeDate">Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="afterDate">Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetAllEmailCampaigns200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetAllEmailCampaigns200Response> GetAllEmailCampaignsWithHttpInfo(int? limit = default(int?), DateTime? beforeDate = default(DateTime?), DateTime? afterDate = default(DateTime?), int operationIndex = 0)
        {
            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (beforeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "before_date", beforeDate));
            }
            if (afterDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "after_date", afterDate));
            }

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetAllEmailCampaigns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetAllEmailCampaigns200Response>("/emails", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllEmailCampaigns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Collection of Email Campaigns Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the &#x60;after_date&#x60; and &#x60;before_date&#x60; query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET &#x60;/emails/{campaign_id}&#x60; endpoint.\&quot; &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the email campaign creation date.&lt;/p&gt;&lt;/div&gt; 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)</param>
        /// <param name="beforeDate">Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="afterDate">Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetAllEmailCampaigns200Response</returns>
        public async System.Threading.Tasks.Task<GetAllEmailCampaigns200Response> GetAllEmailCampaignsAsync(int? limit = default(int?), DateTime? beforeDate = default(DateTime?), DateTime? afterDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetAllEmailCampaigns200Response> localVarResponse = await GetAllEmailCampaignsWithHttpInfoAsync(limit, beforeDate, afterDate, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Collection of Email Campaigns Use this method to list and get details about your email campaigns. By default, this method returns all email campaigns for the user account including deleted email campaigns. To get email campaigns within a date-range, use the &#x60;after_date&#x60; and &#x60;before_date&#x60; query parameters.  This endpoint does not return campaign activity details for each email campaign in the collection. To get email campaign activity details for a single email campaign, use the GET &#x60;/emails/{campaign_id}&#x60; endpoint.\&quot; &lt;div class&#x3D;\&quot;Msg\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;This method does not currently support filtering results using the email campaign creation date.&lt;/p&gt;&lt;/div&gt; 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Specifies the number of campaigns to display on each page of output that is returned (from return 1 - 500). The default returns 50 campaigns per page. (optional, default to 50)</param>
        /// <param name="beforeDate">Use to return email campaigns with &#x60;updated_at&#x60; timestamps that are before a specific date and time (in ISO-8601 format). Use with the &#x60;after_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="afterDate">Use to return email campaigns with last &#x60;updated_at&#x60; timestamps that are after a specific date and time (in ISO-8601 format). Use with the &#x60;before_date&#x60; query parameter to get email campaigns sent within a specific date range. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetAllEmailCampaigns200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetAllEmailCampaigns200Response>> GetAllEmailCampaignsWithHttpInfoAsync(int? limit = default(int?), DateTime? beforeDate = default(DateTime?), DateTime? afterDate = default(DateTime?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (beforeDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "before_date", beforeDate));
            }
            if (afterDate != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "after_date", afterDate));
            }

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetAllEmailCampaigns";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetAllEmailCampaigns200Response>("/emails", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAllEmailCampaigns", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Single Email Campaign Activity Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a &#x60;REMOVED&#x60; status. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="include">Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignActivity200Response</returns>
        public GetEmailCampaignActivity200Response GetEmailCampaignActivity(string campaignActivityId, string? include = default(string?), int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivity200Response> localVarResponse = GetEmailCampaignActivityWithHttpInfo(campaignActivityId, include);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Single Email Campaign Activity Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a &#x60;REMOVED&#x60; status. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="include">Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignActivity200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivity200Response> GetEmailCampaignActivityWithHttpInfo(string campaignActivityId, string? include = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->GetEmailCampaignActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailCampaignActivity200Response>("/emails/activities/{campaign_activity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Single Email Campaign Activity Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a &#x60;REMOVED&#x60; status. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="include">Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignActivity200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailCampaignActivity200Response> GetEmailCampaignActivityAsync(string campaignActivityId, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivity200Response> localVarResponse = await GetEmailCampaignActivityWithHttpInfoAsync(campaignActivityId, include, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Single Email Campaign Activity Use this method to return a specific email campaign activity. Each email campaign activity contains the email content, metadata, and styling information of an email. Email campaign activities can also contain either contact lists or segments. Constant Contact uses this information to determine who to send the email campaign activity to when you schedule it. You cannot get email campaign activities that have a &#x60;REMOVED&#x60; status. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for an email campaign activity.</param>
        /// <param name="include">Use the &#x60;include&#x60; query parameter to enter a comma separated list of additional email campaign activity properties for the V3 API to return. Valid values are &#x60;physical_address_in_footer&#x60;, &#x60;permalink_url&#x60;, &#x60;html_content&#x60;, and &#x60;document_properties&#x60;. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignActivity200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivity200Response>> GetEmailCampaignActivityWithHttpInfoAsync(string campaignActivityId, string? include = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->GetEmailCampaignActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            if (include != null)
            {
                localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "include", include));
            }

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailCampaignActivity200Response>("/emails/activities/{campaign_activity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Details About a Single Email Campaign Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the &#x60;campaign_activity_id&#x60; and &#x60;role&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID (UUID format) that uniquely identifies this email campaign.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEmailCampaign200Response</returns>
        public CreateEmailCampaign200Response GetEmailCampaignById(string campaignId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response> localVarResponse = GetEmailCampaignByIdWithHttpInfo(campaignId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Details About a Single Email Campaign Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the &#x60;campaign_activity_id&#x60; and &#x60;role&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID (UUID format) that uniquely identifies this email campaign.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEmailCampaign200Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response> GetEmailCampaignByIdWithHttpInfo(string campaignId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignId' when calling EmailCampaignsApi->GetEmailCampaignById");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetEmailCampaignById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<CreateEmailCampaign200Response>("/emails/{campaign_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Details About a Single Email Campaign Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the &#x60;campaign_activity_id&#x60; and &#x60;role&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID (UUID format) that uniquely identifies this email campaign.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEmailCampaign200Response</returns>
        public async System.Threading.Tasks.Task<CreateEmailCampaign200Response> GetEmailCampaignByIdAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response> localVarResponse = await GetEmailCampaignByIdWithHttpInfoAsync(campaignId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Details About a Single Email Campaign Use this method to get details about a single email campaign and campaign related activities. Details include the email campaign name, current status, create date, last update date, and a list of campaign activities; including the &#x60;campaign_activity_id&#x60; and &#x60;role&#x60;.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The ID (UUID format) that uniquely identifies this email campaign.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEmailCampaign200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response>> GetEmailCampaignByIdWithHttpInfoAsync(string campaignId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignId' when calling EmailCampaignsApi->GetEmailCampaignById");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetEmailCampaignById";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<CreateEmailCampaign200Response>("/emails/{campaign_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignById", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Collection of V2 and V3 API Email Campaign Identifiers &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the &#x60;v2_email_campaign_ids&#x60; query parameter, this method returns the corresponding V3 &#x60;campaign_id&#x60; and V3 &#x60;campaign_activity_id&#x60; UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v2EmailCampaignIds">Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignXrefs200Response</returns>
        public GetEmailCampaignXrefs200Response GetEmailCampaignXrefs(string v2EmailCampaignIds, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignXrefs200Response> localVarResponse = GetEmailCampaignXrefsWithHttpInfo(v2EmailCampaignIds);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Collection of V2 and V3 API Email Campaign Identifiers &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the &#x60;v2_email_campaign_ids&#x60; query parameter, this method returns the corresponding V3 &#x60;campaign_id&#x60; and V3 &#x60;campaign_activity_id&#x60; UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v2EmailCampaignIds">Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignXrefs200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailCampaignXrefs200Response> GetEmailCampaignXrefsWithHttpInfo(string v2EmailCampaignIds, int operationIndex = 0)
        {
            // verify the required parameter 'v2EmailCampaignIds' is set
            if (v2EmailCampaignIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'v2EmailCampaignIds' when calling EmailCampaignsApi->GetEmailCampaignXrefs");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "v2_email_campaign_ids", v2EmailCampaignIds));

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetEmailCampaignXrefs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEmailCampaignXrefs200Response>("/emails/campaign_id_xrefs", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignXrefs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET a Collection of V2 and V3 API Email Campaign Identifiers &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the &#x60;v2_email_campaign_ids&#x60; query parameter, this method returns the corresponding V3 &#x60;campaign_id&#x60; and V3 &#x60;campaign_activity_id&#x60; UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v2EmailCampaignIds">Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignXrefs200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailCampaignXrefs200Response> GetEmailCampaignXrefsAsync(string v2EmailCampaignIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignXrefs200Response> localVarResponse = await GetEmailCampaignXrefsWithHttpInfoAsync(v2EmailCampaignIds, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET a Collection of V2 and V3 API Email Campaign Identifiers &lt;div class&#x3D;\&quot;Msg Msg- -warning\&quot;&gt;&lt;p class&#x3D;\&quot;note-text\&quot;&gt;Use this endpoint to migrate your locally stored V2 email campaign data to the new V3 format. Developers are expected to use this endpoint sparingly. This endpoint is NOT intended for regular or repeated use. Constant Contact will eventually deprecate and remove this endpoint.&lt;/p&gt;&lt;/div&gt;  Use this method to migrate your local V2 API email data to the V3 API format. For each value that you provide in the &#x60;v2_email_campaign_ids&#x60; query parameter, this method returns the corresponding V3 &#x60;campaign_id&#x60; and V3 &#x60;campaign_activity_id&#x60; UUID value. For more information on the changes to the email campaign resource model, see [V3 Email Campaign Resource Changes](/api_guide/v3_v2_email_campaign_deltas.html) in the API guide. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="v2EmailCampaignIds">Comma separated list of V2 API &#x60;campaignId&#x60; values. You can enter up to 50 V2 &#x60;campaignId&#x60; values in each request.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignXrefs200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailCampaignXrefs200Response>> GetEmailCampaignXrefsWithHttpInfoAsync(string v2EmailCampaignIds, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'v2EmailCampaignIds' is set
            if (v2EmailCampaignIds == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'v2EmailCampaignIds' when calling EmailCampaignsApi->GetEmailCampaignXrefs");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(ConstantContactApi.Client.ClientUtils.ParameterToMultiMap("", "v2_email_campaign_ids", v2EmailCampaignIds));

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetEmailCampaignXrefs";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetEmailCampaignXrefs200Response>("/emails/campaign_id_xrefs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEmailCampaignXrefs", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Details for a Resend to Non-openers Campaign Activity Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified &#x60;campaign_activity_id&#x60;, an empty list is returned in the results. You can only create one resend activity per email campaign.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetResendEmailCampaign200ResponseInner&gt;</returns>
        public List<GetResendEmailCampaign200ResponseInner> GetResendEmailCampaign(string campaignActivityId, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<List<GetResendEmailCampaign200ResponseInner>> localVarResponse = GetResendEmailCampaignWithHttpInfo(campaignActivityId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Details for a Resend to Non-openers Campaign Activity Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified &#x60;campaign_activity_id&#x60;, an empty list is returned in the results. You can only create one resend activity per email campaign.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetResendEmailCampaign200ResponseInner&gt;</returns>
        public ConstantContactApi.Client.ApiResponse<List<GetResendEmailCampaign200ResponseInner>> GetResendEmailCampaignWithHttpInfo(string campaignActivityId, int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->GetResendEmailCampaign");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetResendEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetResendEmailCampaign200ResponseInner>>("/emails/activities/{campaign_activity_id}/non_opener_resends", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResendEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// GET Details for a Resend to Non-openers Campaign Activity Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified &#x60;campaign_activity_id&#x60;, an empty list is returned in the results. You can only create one resend activity per email campaign.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetResendEmailCampaign200ResponseInner&gt;</returns>
        public async System.Threading.Tasks.Task<List<GetResendEmailCampaign200ResponseInner>> GetResendEmailCampaignAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<List<GetResendEmailCampaign200ResponseInner>> localVarResponse = await GetResendEmailCampaignWithHttpInfoAsync(campaignActivityId, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// GET Details for a Resend to Non-openers Campaign Activity Get details about a resend to non-openers campaign activity. If resend activity does not exist for the specified &#x60;campaign_activity_id&#x60;, an empty list is returned in the results. You can only create one resend activity per email campaign.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the primary email campaign activity.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetResendEmailCampaign200ResponseInner&gt;)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<List<GetResendEmailCampaign200ResponseInner>>> GetResendEmailCampaignWithHttpInfoAsync(string campaignActivityId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->GetResendEmailCampaign");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter

            localVarRequestOptions.Operation = "EmailCampaignsApi.GetResendEmailCampaign";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<GetResendEmailCampaign200ResponseInner>>("/emails/activities/{campaign_activity_id}/non_opener_resends", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetResendEmailCampaign", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PATCH (Update) an Email Campaign Name Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a &#x60;Removed&#x60; status.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique identifier for an email campaign.</param>
        /// <param name="patchEmailCampaignNameRequest">A JSON payload that contains the new email campaign name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CreateEmailCampaign200Response</returns>
        public CreateEmailCampaign200Response PatchEmailCampaignName(string campaignId, PatchEmailCampaignNameRequest patchEmailCampaignNameRequest, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response> localVarResponse = PatchEmailCampaignNameWithHttpInfo(campaignId, patchEmailCampaignNameRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PATCH (Update) an Email Campaign Name Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a &#x60;Removed&#x60; status.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique identifier for an email campaign.</param>
        /// <param name="patchEmailCampaignNameRequest">A JSON payload that contains the new email campaign name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CreateEmailCampaign200Response</returns>
        public ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response> PatchEmailCampaignNameWithHttpInfo(string campaignId, PatchEmailCampaignNameRequest patchEmailCampaignNameRequest, int operationIndex = 0)
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignId' when calling EmailCampaignsApi->PatchEmailCampaignName");
            }

            // verify the required parameter 'patchEmailCampaignNameRequest' is set
            if (patchEmailCampaignNameRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'patchEmailCampaignNameRequest' when calling EmailCampaignsApi->PatchEmailCampaignName");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = patchEmailCampaignNameRequest;

            localVarRequestOptions.Operation = "EmailCampaignsApi.PatchEmailCampaignName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<CreateEmailCampaign200Response>("/emails/{campaign_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchEmailCampaignName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PATCH (Update) an Email Campaign Name Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a &#x60;Removed&#x60; status.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique identifier for an email campaign.</param>
        /// <param name="patchEmailCampaignNameRequest">A JSON payload that contains the new email campaign name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateEmailCampaign200Response</returns>
        public async System.Threading.Tasks.Task<CreateEmailCampaign200Response> PatchEmailCampaignNameAsync(string campaignId, PatchEmailCampaignNameRequest patchEmailCampaignNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response> localVarResponse = await PatchEmailCampaignNameWithHttpInfoAsync(campaignId, patchEmailCampaignNameRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PATCH (Update) an Email Campaign Name Use this method to rename an email campaign. The name is not visible to contacts. The name must be unique and cannot exceed 80 characters. You cannot rename email campaigns that have a &#x60;Removed&#x60; status.
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignId">The unique identifier for an email campaign.</param>
        /// <param name="patchEmailCampaignNameRequest">A JSON payload that contains the new email campaign name.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateEmailCampaign200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<CreateEmailCampaign200Response>> PatchEmailCampaignNameWithHttpInfoAsync(string campaignId, PatchEmailCampaignNameRequest patchEmailCampaignNameRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignId' is set
            if (campaignId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignId' when calling EmailCampaignsApi->PatchEmailCampaignName");
            }

            // verify the required parameter 'patchEmailCampaignNameRequest' is set
            if (patchEmailCampaignNameRequest == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'patchEmailCampaignNameRequest' when calling EmailCampaignsApi->PatchEmailCampaignName");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignId)); // path parameter
            localVarRequestOptions.Data = patchEmailCampaignNameRequest;

            localVarRequestOptions.Operation = "EmailCampaignsApi.PatchEmailCampaignName";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PatchAsync<CreateEmailCampaign200Response>("/emails/{campaign_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchEmailCampaignName", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (Update) An Email Campaign Activity Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, and &#x60;subject&#x60; properties.  You can only update email campaign activities that have the &#x60;primary_email&#x60; role and that are in &#x60;DRAFT&#x60; or &#x60;Done&#x60; status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers &#x60;physical_address_in_footer&#x60;, &#x60;document_properties&#x60;, &#x60;html_content&#x60;, and &#x60;permalink_url&#x60; subresources of the email campaign activity. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the email campaign activity you are updating.</param>
        /// <param name="getEmailCampaignActivity200Response">A request body payload that contains the complete email campaign activity with your changes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEmailCampaignActivity200Response</returns>
        public GetEmailCampaignActivity200Response UpdateEmailCampaignActivity(string campaignActivityId, GetEmailCampaignActivity200Response getEmailCampaignActivity200Response, int operationIndex = 0)
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivity200Response> localVarResponse = UpdateEmailCampaignActivityWithHttpInfo(campaignActivityId, getEmailCampaignActivity200Response);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (Update) An Email Campaign Activity Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, and &#x60;subject&#x60; properties.  You can only update email campaign activities that have the &#x60;primary_email&#x60; role and that are in &#x60;DRAFT&#x60; or &#x60;Done&#x60; status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers &#x60;physical_address_in_footer&#x60;, &#x60;document_properties&#x60;, &#x60;html_content&#x60;, and &#x60;permalink_url&#x60; subresources of the email campaign activity. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the email campaign activity you are updating.</param>
        /// <param name="getEmailCampaignActivity200Response">A request body payload that contains the complete email campaign activity with your changes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEmailCampaignActivity200Response</returns>
        public ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivity200Response> UpdateEmailCampaignActivityWithHttpInfo(string campaignActivityId, GetEmailCampaignActivity200Response getEmailCampaignActivity200Response, int operationIndex = 0)
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->UpdateEmailCampaignActivity");
            }

            // verify the required parameter 'getEmailCampaignActivity200Response' is set
            if (getEmailCampaignActivity200Response == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'getEmailCampaignActivity200Response' when calling EmailCampaignsApi->UpdateEmailCampaignActivity");
            }

            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = getEmailCampaignActivity200Response;

            localVarRequestOptions.Operation = "EmailCampaignsApi.UpdateEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GetEmailCampaignActivity200Response>("/emails/activities/{campaign_activity_id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// PUT (Update) An Email Campaign Activity Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, and &#x60;subject&#x60; properties.  You can only update email campaign activities that have the &#x60;primary_email&#x60; role and that are in &#x60;DRAFT&#x60; or &#x60;Done&#x60; status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers &#x60;physical_address_in_footer&#x60;, &#x60;document_properties&#x60;, &#x60;html_content&#x60;, and &#x60;permalink_url&#x60; subresources of the email campaign activity. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the email campaign activity you are updating.</param>
        /// <param name="getEmailCampaignActivity200Response">A request body payload that contains the complete email campaign activity with your changes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEmailCampaignActivity200Response</returns>
        public async System.Threading.Tasks.Task<GetEmailCampaignActivity200Response> UpdateEmailCampaignActivityAsync(string campaignActivityId, GetEmailCampaignActivity200Response getEmailCampaignActivity200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivity200Response> localVarResponse = await UpdateEmailCampaignActivityWithHttpInfoAsync(campaignActivityId, getEmailCampaignActivity200Response, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// PUT (Update) An Email Campaign Activity Use this method to update an email campaign activity by including the complete email campaign activity with your changes in the request body. The request body requires the &#x60;from_name&#x60;, &#x60;from_email&#x60;, &#x60;reply_to_email&#x60;, and &#x60;subject&#x60; properties.  You can only update email campaign activities that have the &#x60;primary_email&#x60; role and that are in &#x60;DRAFT&#x60; or &#x60;Done&#x60; status. When you use a PUT method to update a resource, the V3 API overwrites any properties that are missing in the request body. However, the V3 API does not overwrite subresources that you omit in the request body or missing properties in subresources. This method considers &#x60;physical_address_in_footer&#x60;, &#x60;document_properties&#x60;, &#x60;html_content&#x60;, and &#x60;permalink_url&#x60; subresources of the email campaign activity. 
        /// </summary>
        /// <exception cref="ConstantContactApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="campaignActivityId">The unique ID for the email campaign activity you are updating.</param>
        /// <param name="getEmailCampaignActivity200Response">A request body payload that contains the complete email campaign activity with your changes.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEmailCampaignActivity200Response)</returns>
        public async System.Threading.Tasks.Task<ConstantContactApi.Client.ApiResponse<GetEmailCampaignActivity200Response>> UpdateEmailCampaignActivityWithHttpInfoAsync(string campaignActivityId, GetEmailCampaignActivity200Response getEmailCampaignActivity200Response, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'campaignActivityId' is set
            if (campaignActivityId == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'campaignActivityId' when calling EmailCampaignsApi->UpdateEmailCampaignActivity");
            }

            // verify the required parameter 'getEmailCampaignActivity200Response' is set
            if (getEmailCampaignActivity200Response == null)
            {
                throw new ConstantContactApi.Client.ApiException(400, "Missing required parameter 'getEmailCampaignActivity200Response' when calling EmailCampaignsApi->UpdateEmailCampaignActivity");
            }


            ConstantContactApi.Client.RequestOptions localVarRequestOptions = new ConstantContactApi.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ConstantContactApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ConstantContactApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("campaign_activity_id", ConstantContactApi.Client.ClientUtils.ParameterToString(campaignActivityId)); // path parameter
            localVarRequestOptions.Data = getEmailCampaignActivity200Response;

            localVarRequestOptions.Operation = "EmailCampaignsApi.UpdateEmailCampaignActivity";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2_access_code) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }
            // authentication (oauth2_implicit) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<GetEmailCampaignActivity200Response>("/emails/activities/{campaign_activity_id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateEmailCampaignActivity", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
